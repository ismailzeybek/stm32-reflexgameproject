
bakalim3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800aaf8  0800aaf8  0001aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abfc  0800abfc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac04  0800ac04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac08  0800ac08  0001ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ac0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000090  0800ac9c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  0800ac9c  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff0a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040d6  00000000  00000000  0003ffca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  000440a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001808  00000000  00000000  00045a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025d13  00000000  00000000  00047260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000166b7  00000000  00000000  0006cf73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d55b9  00000000  00000000  0008362a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158be3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b0  00000000  00000000  00158c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0015fe10  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0015fe34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aae0 	.word	0x0800aae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800aae0 	.word	0x0800aae0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Delay>:
#include "stm32f4xx_hal.h"
#include "main.h"
#include "LCD.h"

void Delay(uint32_t nCount)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    for(; nCount != 0; nCount--);
 8000588:	e002      	b.n	8000590 <Delay+0x10>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3b01      	subs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f9      	bne.n	800058a <Delay+0xa>
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <lcd_delay>:
void lcd_delay(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
    Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f7ff ffe9 	bl	8000580 <Delay>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <LCD_Port_Clear>:

void LCD_Port_Clear(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
    LCD_EN_GPIO_Port->BSRR  = LCD_EN_Pin << 16;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <LCD_Port_Clear+0x38>)
 80005ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005be:	619a      	str	r2, [r3, #24]
    LCD_D4_GPIO_Port->BSRR  = LCD_D4_Pin << 16;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <LCD_Port_Clear+0x38>)
 80005c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005c6:	619a      	str	r2, [r3, #24]
    LCD_D5_GPIO_Port->BSRR  = LCD_D5_Pin << 16;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <LCD_Port_Clear+0x38>)
 80005ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005ce:	619a      	str	r2, [r3, #24]
    LCD_D6_GPIO_Port->BSRR  = LCD_D6_Pin << 16;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LCD_Port_Clear+0x38>)
 80005d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005d6:	619a      	str	r2, [r3, #24]
    LCD_D7_GPIO_Port->BSRR  = LCD_D7_Pin << 16;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <LCD_Port_Clear+0x38>)
 80005da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005de:	619a      	str	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    LCD_RS_GPIO_Port->BSRR  = LCD_RS_Pin << 16;
 80005fa:	4b48      	ldr	r3, [pc, #288]	; (800071c <lcd_cmd+0x12c>)
 80005fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000600:	619a      	str	r2, [r3, #24]
    LCD_Port_Clear();
 8000602:	f7ff ffd7 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 8000606:	f7ff ffcc 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800060a:	4b44      	ldr	r3, [pc, #272]	; (800071c <lcd_cmd+0x12c>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a43      	ldr	r2, [pc, #268]	; (800071c <lcd_cmd+0x12c>)
 8000610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000614:	6153      	str	r3, [r2, #20]

    if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <lcd_cmd+0x3a>
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <lcd_cmd+0x12c>)
 8000622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	e003      	b.n	8000632 <lcd_cmd+0x42>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <lcd_cmd+0x12c>)
 800062c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000630:	619a      	str	r2, [r3, #24]
    if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <lcd_cmd+0x56>
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <lcd_cmd+0x12c>)
 800063e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000642:	619a      	str	r2, [r3, #24]
 8000644:	e003      	b.n	800064e <lcd_cmd+0x5e>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <lcd_cmd+0x12c>)
 8000648:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800064c:	619a      	str	r2, [r3, #24]
    if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <lcd_cmd+0x72>
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <lcd_cmd+0x12c>)
 800065a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065e:	619a      	str	r2, [r3, #24]
 8000660:	e003      	b.n	800066a <lcd_cmd+0x7a>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <lcd_cmd+0x12c>)
 8000664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000668:	619a      	str	r2, [r3, #24]
    if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	da04      	bge.n	800067c <lcd_cmd+0x8c>
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <lcd_cmd+0x12c>)
 8000674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000678:	619a      	str	r2, [r3, #24]
 800067a:	e003      	b.n	8000684 <lcd_cmd+0x94>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_cmd+0x12c>)
 800067e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000682:	619a      	str	r2, [r3, #24]

    lcd_delay();
 8000684:	f7ff ff8d 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 8000688:	f7ff ff94 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 800068c:	f7ff ff89 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <lcd_cmd+0x12c>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <lcd_cmd+0x12c>)
 8000696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069a:	6153      	str	r3, [r2, #20]

    if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <lcd_cmd+0xc0>
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <lcd_cmd+0x12c>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	e003      	b.n	80006b8 <lcd_cmd+0xc8>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <lcd_cmd+0x12c>)
 80006b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006b6:	619a      	str	r2, [r3, #24]
    if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <lcd_cmd+0xdc>
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <lcd_cmd+0x12c>)
 80006c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	e003      	b.n	80006d4 <lcd_cmd+0xe4>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <lcd_cmd+0x12c>)
 80006ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006d2:	619a      	str	r2, [r3, #24]
    if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <lcd_cmd+0xf8>
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <lcd_cmd+0x12c>)
 80006e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	e003      	b.n	80006f0 <lcd_cmd+0x100>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <lcd_cmd+0x12c>)
 80006ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ee:	619a      	str	r2, [r3, #24]
    if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <lcd_cmd+0x114>
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <lcd_cmd+0x12c>)
 80006fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	e003      	b.n	800070c <lcd_cmd+0x11c>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <lcd_cmd+0x12c>)
 8000706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800070a:	619a      	str	r2, [r3, #24]

    lcd_delay();
 800070c:	f7ff ff49 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 8000710:	f7ff ff50 	bl	80005b4 <LCD_Port_Clear>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <lcd_char_cp+0x130>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <lcd_char_cp+0x130>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6153      	str	r3, [r2, #20]

    LCD_Port_Clear();
 8000736:	f7ff ff3d 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 800073a:	f7ff ff32 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800073e:	4b44      	ldr	r3, [pc, #272]	; (8000850 <lcd_char_cp+0x130>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <lcd_char_cp+0x130>)
 8000744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000748:	6153      	str	r3, [r2, #20]

    if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <lcd_char_cp+0x3e>
 8000754:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <lcd_char_cp+0x130>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	e003      	b.n	8000766 <lcd_char_cp+0x46>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <lcd_char_cp+0x130>)
 8000760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000764:	619a      	str	r2, [r3, #24]
    if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <lcd_char_cp+0x5a>
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <lcd_char_cp+0x130>)
 8000772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000776:	619a      	str	r2, [r3, #24]
 8000778:	e003      	b.n	8000782 <lcd_char_cp+0x62>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <lcd_char_cp+0x130>)
 800077c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000780:	619a      	str	r2, [r3, #24]
    if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000788:	2b00      	cmp	r3, #0
 800078a:	d004      	beq.n	8000796 <lcd_char_cp+0x76>
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <lcd_char_cp+0x130>)
 800078e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000792:	619a      	str	r2, [r3, #24]
 8000794:	e003      	b.n	800079e <lcd_char_cp+0x7e>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <lcd_char_cp+0x130>)
 8000798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079c:	619a      	str	r2, [r3, #24]
    if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da04      	bge.n	80007b0 <lcd_char_cp+0x90>
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <lcd_char_cp+0x130>)
 80007a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ac:	619a      	str	r2, [r3, #24]
 80007ae:	e003      	b.n	80007b8 <lcd_char_cp+0x98>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <lcd_char_cp+0x130>)
 80007b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b6:	619a      	str	r2, [r3, #24]

    lcd_delay();
 80007b8:	f7ff fef3 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 80007bc:	f7ff fefa 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 80007c0:	f7ff feef 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <lcd_char_cp+0x130>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <lcd_char_cp+0x130>)
 80007ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ce:	6153      	str	r3, [r2, #20]

    if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <lcd_char_cp+0xc4>
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <lcd_char_cp+0x130>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	e003      	b.n	80007ec <lcd_char_cp+0xcc>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <lcd_char_cp+0x130>)
 80007e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007ea:	619a      	str	r2, [r3, #24]
    if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <lcd_char_cp+0xe0>
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <lcd_char_cp+0x130>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fc:	619a      	str	r2, [r3, #24]
 80007fe:	e003      	b.n	8000808 <lcd_char_cp+0xe8>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <lcd_char_cp+0x130>)
 8000802:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000806:	619a      	str	r2, [r3, #24]
    if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	2b00      	cmp	r3, #0
 8000810:	d004      	beq.n	800081c <lcd_char_cp+0xfc>
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <lcd_char_cp+0x130>)
 8000814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000818:	619a      	str	r2, [r3, #24]
 800081a:	e003      	b.n	8000824 <lcd_char_cp+0x104>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <lcd_char_cp+0x130>)
 800081e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000822:	619a      	str	r2, [r3, #24]
    if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <lcd_char_cp+0x118>
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <lcd_char_cp+0x130>)
 8000830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000834:	619a      	str	r2, [r3, #24]
 8000836:	e003      	b.n	8000840 <lcd_char_cp+0x120>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <lcd_char_cp+0x130>)
 800083a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800083e:	619a      	str	r2, [r3, #24]

    lcd_delay();
 8000840:	f7ff feaf 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 8000844:	f7ff feb6 	bl	80005b4 <LCD_Port_Clear>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    while(*out_char)
 800085c:	e008      	b.n	8000870 <lcd_out_cp+0x1c>
    {
        lcd_delay();
 800085e:	f7ff fea0 	bl	80005a2 <lcd_delay>
        lcd_char_cp(*out_char++);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff58 	bl	8000720 <lcd_char_cp>
    while(*out_char)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f2      	bne.n	800085e <lcd_out_cp+0xa>
    }
    lcd_delay();
 8000878:	f7ff fe93 	bl	80005a2 <lcd_delay>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	460b      	mov	r3, r1
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	4613      	mov	r3, r2
 8000894:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000896:	20fa      	movs	r0, #250	; 0xfa
 8000898:	f001 fb18 	bl	8001ecc <HAL_Delay>
    lcd_cmd(_RETURN_HOME);
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fea7 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008a2:	2032      	movs	r0, #50	; 0x32
 80008a4:	f001 fb12 	bl	8001ecc <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	797b      	ldrb	r3, [r7, #5]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe97 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f001 fb02 	bl	8001ecc <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80008c8:	2006      	movs	r0, #6
 80008ca:	f7ff fe91 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f001 fafc 	bl	8001ecc <HAL_Delay>
    lcd_cmd(0x0E);
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff fe8b 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008da:	2032      	movs	r0, #50	; 0x32
 80008dc:	f001 faf6 	bl	8001ecc <HAL_Delay>
    lcd_cmd(0x0C);
 80008e0:	200c      	movs	r0, #12
 80008e2:	f7ff fe85 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008e6:	2032      	movs	r0, #50	; 0x32
 80008e8:	f001 faf0 	bl	8001ecc <HAL_Delay>
    lcd_cmd(0x01);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fe7f 	bl	80005f0 <lcd_cmd>
    HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f001 faea 	bl	8001ecc <HAL_Delay>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
    if(row == 1)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <lcd_gotoxy+0x24>
    {
        lcd_cmd(0x80 + (column - 1));
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	337f      	adds	r3, #127	; 0x7f
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe67 	bl	80005f0 <lcd_cmd>
    }
    else if(row == 2)
    {
        lcd_cmd(0xC0 + (column - 1));
    }
}
 8000922:	e008      	b.n	8000936 <lcd_gotoxy+0x36>
    else if(row == 2)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d105      	bne.n	8000936 <lcd_gotoxy+0x36>
        lcd_cmd(0xC0 + (column - 1));
 800092a:	79bb      	ldrb	r3, [r7, #6]
 800092c:	3b41      	subs	r3, #65	; 0x41
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe5d 	bl	80005f0 <lcd_cmd>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <lcd_print>:
    lcd_gotoxy(row, column);
    lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	603a      	str	r2, [r7, #0]
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	460b      	mov	r3, r1
 800094c:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffd3 	bl	8000900 <lcd_gotoxy>
    lcd_out_cp(out_char);
 800095a:	6838      	ldr	r0, [r7, #0]
 800095c:	f7ff ff7a 	bl	8000854 <lcd_out_cp>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <lcd_clear>:
void lcd_clear(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

    lcd_cmd(_CLEAR);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fe3f 	bl	80005f0 <lcd_cmd>
    HAL_Delay(2);
 8000972:	2002      	movs	r0, #2
 8000974:	f001 faaa 	bl	8001ecc <HAL_Delay>

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <kirmalimydelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kirmalimydelay(int delay) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	htim9.Instance->CNT = 0;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <kirmalimydelay+0x38>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim9);
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <kirmalimydelay+0x38>)
 800098e:	f004 feb8 	bl	8005702 <HAL_TIM_Base_Start>
	while (htim9.Instance->CNT < delay) {
 8000992:	e003      	b.n	800099c <kirmalimydelay+0x20>
		if (hatabayragi == 1) {
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <kirmalimydelay+0x3c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d006      	beq.n	80009aa <kirmalimydelay+0x2e>
	while (htim9.Instance->CNT < delay) {
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <kirmalimydelay+0x38>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3f5      	bcc.n	8000994 <kirmalimydelay+0x18>
			break;
		}
	}
}
 80009a8:	e000      	b.n	80009ac <kirmalimydelay+0x30>
			break;
 80009aa:	bf00      	nop
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001fc 	.word	0x200001fc
 80009b8:	200000b8 	.word	0x200000b8

080009bc <mydelay>:
void mydelay(int delay) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	htim9.Instance->CNT = 0;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <mydelay+0x2c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim9);
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <mydelay+0x2c>)
 80009ce:	f004 fe98 	bl	8005702 <HAL_TIM_Base_Start>
	while (htim9.Instance->CNT < delay) {
 80009d2:	bf00      	nop
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <mydelay+0x2c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d3f9      	bcc.n	80009d4 <mydelay+0x18>
	}
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200001fc 	.word	0x200001fc

080009ec <isimsiz1_hatalibasim_yazdirma>:

void isimsiz1_hatalibasim_yazdirma(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	lcd_clear();
 80009f0:	f7ff ffba 	bl	8000968 <lcd_clear>
	mydelay(100);
 80009f4:	2064      	movs	r0, #100	; 0x64
 80009f6:	f7ff ffe1 	bl	80009bc <mydelay>
	hatabayragi = 1;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <isimsiz1_hatalibasim_yazdirma+0x3c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
	lcd_print(1, 1, "1.Yarismaci");
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <isimsiz1_hatalibasim_yazdirma+0x40>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ff9a 	bl	800093e <lcd_print>
	mydelay(100);
 8000a0a:	2064      	movs	r0, #100	; 0x64
 8000a0c:	f7ff ffd6 	bl	80009bc <mydelay>
	lcd_print(2, 1, "Elendi...");
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <isimsiz1_hatalibasim_yazdirma+0x44>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff ff92 	bl	800093e <lcd_print>
	mydelay(5000);
 8000a1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a1e:	f7ff ffcd 	bl	80009bc <mydelay>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000b8 	.word	0x200000b8
 8000a2c:	0800aaf8 	.word	0x0800aaf8
 8000a30:	0800ab04 	.word	0x0800ab04

08000a34 <isimsiz2_hatalibasim_yazdirma>:
void isimsiz2_hatalibasim_yazdirma(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	lcd_clear();
 8000a38:	f7ff ff96 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f7ff ffbd 	bl	80009bc <mydelay>
	lcd_print(1, 1, "2.Yarismaci");
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <isimsiz2_hatalibasim_yazdirma+0x3c>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ff79 	bl	800093e <lcd_print>
	mydelay(100);
 8000a4c:	2064      	movs	r0, #100	; 0x64
 8000a4e:	f7ff ffb5 	bl	80009bc <mydelay>
	hatabayragi = 1;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <isimsiz2_hatalibasim_yazdirma+0x40>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
	lcd_print(2, 1, "Elendi...");
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <isimsiz2_hatalibasim_yazdirma+0x44>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f7ff ff6e 	bl	800093e <lcd_print>
	mydelay(5000);
 8000a62:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a66:	f7ff ffa9 	bl	80009bc <mydelay>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	0800ab10 	.word	0x0800ab10
 8000a74:	200000b8 	.word	0x200000b8
 8000a78:	0800ab04 	.word	0x0800ab04

08000a7c <isimli1_hatalibasim_yazdirma>:
void isimli1_hatalibasim_yazdirma(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000a80:	f7ff ff72 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000a84:	2064      	movs	r0, #100	; 0x64
 8000a86:	f7ff ff99 	bl	80009bc <mydelay>
	hatabayragi = 1;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <isimli1_hatalibasim_yazdirma+0x3c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
	lcd_print(1, 1, isim1);
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <isimli1_hatalibasim_yazdirma+0x40>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff ff52 	bl	800093e <lcd_print>
	mydelay(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f7ff ff8e 	bl	80009bc <mydelay>
	lcd_print(2, 1, "Elendi...");
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <isimli1_hatalibasim_yazdirma+0x44>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f7ff ff4a 	bl	800093e <lcd_print>
	mydelay(5000);
 8000aaa:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aae:	f7ff ff85 	bl	80009bc <mydelay>

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000b8 	.word	0x200000b8
 8000abc:	200002e4 	.word	0x200002e4
 8000ac0:	0800ab04 	.word	0x0800ab04

08000ac4 <isimli2_hatalibasim_yazdirma>:
void isimli2_hatalibasim_yazdirma(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ac8:	f7ff ff4e 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000acc:	2064      	movs	r0, #100	; 0x64
 8000ace:	f7ff ff75 	bl	80009bc <mydelay>
	lcd_print(1, 1, isim2);
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <isimli2_hatalibasim_yazdirma+0x3c>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff ff31 	bl	800093e <lcd_print>
	mydelay(100);
 8000adc:	2064      	movs	r0, #100	; 0x64
 8000ade:	f7ff ff6d 	bl	80009bc <mydelay>
	hatabayragi = 1;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <isimli2_hatalibasim_yazdirma+0x40>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
	lcd_print(2, 1, "Elendi...");
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <isimli2_hatalibasim_yazdirma+0x44>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff ff26 	bl	800093e <lcd_print>
	mydelay(5000);
 8000af2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000af6:	f7ff ff61 	bl	80009bc <mydelay>

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000198 	.word	0x20000198
 8000b04:	200000b8 	.word	0x200000b8
 8000b08:	0800ab04 	.word	0x0800ab04

08000b0c <isimli_sureleri_yazdir>:
void isimli_sureleri_yazdir(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b10:	f7ff ff2a 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f7ff ff51 	bl	80009bc <mydelay>
	lcd_print(1, 1, isim1);
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <isimli_sureleri_yazdir+0x6c>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ff0d 	bl	800093e <lcd_print>
	mydelay(100);
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f7ff ff49 	bl	80009bc <mydelay>
	sprintf(mesaj, "%d msn", saniye1);
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <isimli_sureleri_yazdir+0x70>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4913      	ldr	r1, [pc, #76]	; (8000b80 <isimli_sureleri_yazdir+0x74>)
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <isimli_sureleri_yazdir+0x78>)
 8000b34:	f009 fbfc 	bl	800a330 <siprintf>
	lcd_print(1, 9, mesaj);
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <isimli_sureleri_yazdir+0x78>)
 8000b3a:	2109      	movs	r1, #9
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff fefe 	bl	800093e <lcd_print>
	mydelay(100);
 8000b42:	2064      	movs	r0, #100	; 0x64
 8000b44:	f7ff ff3a 	bl	80009bc <mydelay>
	lcd_print(2, 1, isim2);
 8000b48:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <isimli_sureleri_yazdir+0x7c>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f7ff fef6 	bl	800093e <lcd_print>
	sprintf(mesaj, "%d msn", saniye2);
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <isimli_sureleri_yazdir+0x80>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4909      	ldr	r1, [pc, #36]	; (8000b80 <isimli_sureleri_yazdir+0x74>)
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <isimli_sureleri_yazdir+0x78>)
 8000b5c:	f009 fbe8 	bl	800a330 <siprintf>
	lcd_print(2, 9, mesaj);
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <isimli_sureleri_yazdir+0x78>)
 8000b62:	2109      	movs	r1, #9
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff feea 	bl	800093e <lcd_print>
	mydelay(3000);
 8000b6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b6e:	f7ff ff25 	bl	80009bc <mydelay>

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200002e4 	.word	0x200002e4
 8000b7c:	200000c4 	.word	0x200000c4
 8000b80:	0800ab1c 	.word	0x0800ab1c
 8000b84:	200000f0 	.word	0x200000f0
 8000b88:	20000198 	.word	0x20000198
 8000b8c:	200000c8 	.word	0x200000c8

08000b90 <isimli_kazanan_1_yazdirma_gonderme>:
void isimli_kazanan_1_yazdirma_gonderme(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b94:	f7ff fee8 	bl	8000968 <lcd_clear>
	mydelay(200);
 8000b98:	20c8      	movs	r0, #200	; 0xc8
 8000b9a:	f7ff ff0f 	bl	80009bc <mydelay>
	lcd_print(1, 1, isim1);
 8000b9e:	4a35      	ldr	r2, [pc, #212]	; (8000c74 <isimli_kazanan_1_yazdirma_gonderme+0xe4>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff fecb 	bl	800093e <lcd_print>
	mydelay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f7ff ff07 	bl	80009bc <mydelay>
	lcd_print(2, 1, "Kazandi.");
 8000bae:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <isimli_kazanan_1_yazdirma_gonderme+0xe8>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff fec3 	bl	800093e <lcd_print>
	strcpy(isim11, isim1);
 8000bb8:	492e      	ldr	r1, [pc, #184]	; (8000c74 <isimli_kazanan_1_yazdirma_gonderme+0xe4>)
 8000bba:	4830      	ldr	r0, [pc, #192]	; (8000c7c <isimli_kazanan_1_yazdirma_gonderme+0xec>)
 8000bbc:	f009 fbe7 	bl	800a38e <strcpy>
	strcat(isim11, "|");
 8000bc0:	482e      	ldr	r0, [pc, #184]	; (8000c7c <isimli_kazanan_1_yazdirma_gonderme+0xec>)
 8000bc2:	f7ff fb05 	bl	80001d0 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <isimli_kazanan_1_yazdirma_gonderme+0xec>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	492c      	ldr	r1, [pc, #176]	; (8000c80 <isimli_kazanan_1_yazdirma_gonderme+0xf0>)
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, isim11, strlen(isim11), 1000);
 8000bd8:	4828      	ldr	r0, [pc, #160]	; (8000c7c <isimli_kazanan_1_yazdirma_gonderme+0xec>)
 8000bda:	f7ff faf9 	bl	80001d0 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	4925      	ldr	r1, [pc, #148]	; (8000c7c <isimli_kazanan_1_yazdirma_gonderme+0xec>)
 8000be8:	4826      	ldr	r0, [pc, #152]	; (8000c84 <isimli_kazanan_1_yazdirma_gonderme+0xf4>)
 8000bea:	f005 f9fc 	bl	8005fe6 <HAL_UART_Transmit>
	isim1skor = isim1skor + 1;
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <isimli_kazanan_1_yazdirma_gonderme+0xf8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a24      	ldr	r2, [pc, #144]	; (8000c88 <isimli_kazanan_1_yazdirma_gonderme+0xf8>)
 8000bf6:	6013      	str	r3, [r2, #0]
	itoa(isim1skor, isim1sayac, 10);
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <isimli_kazanan_1_yazdirma_gonderme+0xf8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	4923      	ldr	r1, [pc, #140]	; (8000c8c <isimli_kazanan_1_yazdirma_gonderme+0xfc>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f009 fa6b 	bl	800a0dc <itoa>
	itoa(isim2skor, isim2sayac, 10);
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <isimli_kazanan_1_yazdirma_gonderme+0x100>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	220a      	movs	r2, #10
 8000c0c:	4921      	ldr	r1, [pc, #132]	; (8000c94 <isimli_kazanan_1_yazdirma_gonderme+0x104>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 fa64 	bl	800a0dc <itoa>
	strcpy(isim11sayac, isim1sayac);
 8000c14:	491d      	ldr	r1, [pc, #116]	; (8000c8c <isimli_kazanan_1_yazdirma_gonderme+0xfc>)
 8000c16:	4820      	ldr	r0, [pc, #128]	; (8000c98 <isimli_kazanan_1_yazdirma_gonderme+0x108>)
 8000c18:	f009 fbb9 	bl	800a38e <strcpy>
	strcat(isim11sayac, "|");
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <isimli_kazanan_1_yazdirma_gonderme+0x108>)
 8000c1e:	f7ff fad7 	bl	80001d0 <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <isimli_kazanan_1_yazdirma_gonderme+0x108>)
 8000c28:	4413      	add	r3, r2
 8000c2a:	4915      	ldr	r1, [pc, #84]	; (8000c80 <isimli_kazanan_1_yazdirma_gonderme+0xf0>)
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	460b      	mov	r3, r1
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, isim11sayac, strlen(isim11sayac), 1000);
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <isimli_kazanan_1_yazdirma_gonderme+0x108>)
 8000c36:	f7ff facb 	bl	80001d0 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	4915      	ldr	r1, [pc, #84]	; (8000c98 <isimli_kazanan_1_yazdirma_gonderme+0x108>)
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <isimli_kazanan_1_yazdirma_gonderme+0xf4>)
 8000c46:	f005 f9ce 	bl	8005fe6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, isim2sayac, strlen(isim2sayac), 1000);
 8000c4a:	4812      	ldr	r0, [pc, #72]	; (8000c94 <isimli_kazanan_1_yazdirma_gonderme+0x104>)
 8000c4c:	f7ff fac0 	bl	80001d0 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	490e      	ldr	r1, [pc, #56]	; (8000c94 <isimli_kazanan_1_yazdirma_gonderme+0x104>)
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <isimli_kazanan_1_yazdirma_gonderme+0xf4>)
 8000c5c:	f005 f9c3 	bl	8005fe6 <HAL_UART_Transmit>
	strcpy(isim11, "");
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <isimli_kazanan_1_yazdirma_gonderme+0xec>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	mydelay(3000);
 8000c66:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c6a:	f7ff fea7 	bl	80009bc <mydelay>

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200002e4 	.word	0x200002e4
 8000c78:	0800ab24 	.word	0x0800ab24
 8000c7c:	20000294 	.word	0x20000294
 8000c80:	0800ab30 	.word	0x0800ab30
 8000c84:	20000100 	.word	0x20000100
 8000c88:	200000d4 	.word	0x200000d4
 8000c8c:	200002f4 	.word	0x200002f4
 8000c90:	200000d8 	.word	0x200000d8
 8000c94:	200002f8 	.word	0x200002f8
 8000c98:	20000140 	.word	0x20000140

08000c9c <isimli_kazanan_2_yazdirma_gonderme>:
void isimli_kazanan_2_yazdirma_gonderme(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ca0:	f7ff fe62 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000ca4:	2064      	movs	r0, #100	; 0x64
 8000ca6:	f7ff fe89 	bl	80009bc <mydelay>
	lcd_print(1, 1, isim2);
 8000caa:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <isimli_kazanan_2_yazdirma_gonderme+0xdc>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fe45 	bl	800093e <lcd_print>
	mydelay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f7ff fe81 	bl	80009bc <mydelay>
	lcd_print(2, 1, "Kazandi.");
 8000cba:	4a30      	ldr	r2, [pc, #192]	; (8000d7c <isimli_kazanan_2_yazdirma_gonderme+0xe0>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f7ff fe3d 	bl	800093e <lcd_print>
	strcpy(isim22, isim2);
 8000cc4:	492c      	ldr	r1, [pc, #176]	; (8000d78 <isimli_kazanan_2_yazdirma_gonderme+0xdc>)
 8000cc6:	482e      	ldr	r0, [pc, #184]	; (8000d80 <isimli_kazanan_2_yazdirma_gonderme+0xe4>)
 8000cc8:	f009 fb61 	bl	800a38e <strcpy>
	strcat(isim22, "|");
 8000ccc:	482c      	ldr	r0, [pc, #176]	; (8000d80 <isimli_kazanan_2_yazdirma_gonderme+0xe4>)
 8000cce:	f7ff fa7f 	bl	80001d0 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <isimli_kazanan_2_yazdirma_gonderme+0xe4>)
 8000cd8:	4413      	add	r3, r2
 8000cda:	492a      	ldr	r1, [pc, #168]	; (8000d84 <isimli_kazanan_2_yazdirma_gonderme+0xe8>)
 8000cdc:	461a      	mov	r2, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, isim22, strlen(isim22), 1000);
 8000ce4:	4826      	ldr	r0, [pc, #152]	; (8000d80 <isimli_kazanan_2_yazdirma_gonderme+0xe4>)
 8000ce6:	f7ff fa73 	bl	80001d0 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	4923      	ldr	r1, [pc, #140]	; (8000d80 <isimli_kazanan_2_yazdirma_gonderme+0xe4>)
 8000cf4:	4824      	ldr	r0, [pc, #144]	; (8000d88 <isimli_kazanan_2_yazdirma_gonderme+0xec>)
 8000cf6:	f005 f976 	bl	8005fe6 <HAL_UART_Transmit>
	isim2skor = isim2skor + 1;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <isimli_kazanan_2_yazdirma_gonderme+0xf0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <isimli_kazanan_2_yazdirma_gonderme+0xf0>)
 8000d02:	6013      	str	r3, [r2, #0]
	itoa(isim1skor, isim1sayac, 10);
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <isimli_kazanan_2_yazdirma_gonderme+0xf4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	220a      	movs	r2, #10
 8000d0a:	4922      	ldr	r1, [pc, #136]	; (8000d94 <isimli_kazanan_2_yazdirma_gonderme+0xf8>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f009 f9e5 	bl	800a0dc <itoa>
	itoa(isim2skor, isim2sayac, 10);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <isimli_kazanan_2_yazdirma_gonderme+0xf0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	220a      	movs	r2, #10
 8000d18:	491f      	ldr	r1, [pc, #124]	; (8000d98 <isimli_kazanan_2_yazdirma_gonderme+0xfc>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f009 f9de 	bl	800a0dc <itoa>
	strcpy(isim11sayac, isim1sayac);
 8000d20:	491c      	ldr	r1, [pc, #112]	; (8000d94 <isimli_kazanan_2_yazdirma_gonderme+0xf8>)
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <isimli_kazanan_2_yazdirma_gonderme+0x100>)
 8000d24:	f009 fb33 	bl	800a38e <strcpy>
	strcat(isim11sayac, "|");
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <isimli_kazanan_2_yazdirma_gonderme+0x100>)
 8000d2a:	f7ff fa51 	bl	80001d0 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <isimli_kazanan_2_yazdirma_gonderme+0x100>)
 8000d34:	4413      	add	r3, r2
 8000d36:	4913      	ldr	r1, [pc, #76]	; (8000d84 <isimli_kazanan_2_yazdirma_gonderme+0xe8>)
 8000d38:	461a      	mov	r2, r3
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, isim11sayac, strlen(isim11sayac), 1000);
 8000d40:	4816      	ldr	r0, [pc, #88]	; (8000d9c <isimli_kazanan_2_yazdirma_gonderme+0x100>)
 8000d42:	f7ff fa45 	bl	80001d0 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	4913      	ldr	r1, [pc, #76]	; (8000d9c <isimli_kazanan_2_yazdirma_gonderme+0x100>)
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <isimli_kazanan_2_yazdirma_gonderme+0xec>)
 8000d52:	f005 f948 	bl	8005fe6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, isim2sayac, strlen(isim2sayac), 1000);
 8000d56:	4810      	ldr	r0, [pc, #64]	; (8000d98 <isimli_kazanan_2_yazdirma_gonderme+0xfc>)
 8000d58:	f7ff fa3a 	bl	80001d0 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <isimli_kazanan_2_yazdirma_gonderme+0xfc>)
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <isimli_kazanan_2_yazdirma_gonderme+0xec>)
 8000d68:	f005 f93d 	bl	8005fe6 <HAL_UART_Transmit>
	mydelay(3000);
 8000d6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d70:	f7ff fe24 	bl	80009bc <mydelay>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000198 	.word	0x20000198
 8000d7c:	0800ab24 	.word	0x0800ab24
 8000d80:	200001dc 	.word	0x200001dc
 8000d84:	0800ab30 	.word	0x0800ab30
 8000d88:	20000100 	.word	0x20000100
 8000d8c:	200000d8 	.word	0x200000d8
 8000d90:	200000d4 	.word	0x200000d4
 8000d94:	200002f4 	.word	0x200002f4
 8000d98:	200002f8 	.word	0x200002f8
 8000d9c:	20000140 	.word	0x20000140

08000da0 <isimsiz_sureleri_yazdir>:
void isimsiz_sureleri_yazdir() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	lcd_clear();
 8000da4:	f7ff fde0 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000da8:	2064      	movs	r0, #100	; 0x64
 8000daa:	f7ff fe07 	bl	80009bc <mydelay>
	sprintf(mesaj, "1.time : %d msn", saniye1);
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <isimsiz_sureleri_yazdir+0x50>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	490f      	ldr	r1, [pc, #60]	; (8000df4 <isimsiz_sureleri_yazdir+0x54>)
 8000db6:	4810      	ldr	r0, [pc, #64]	; (8000df8 <isimsiz_sureleri_yazdir+0x58>)
 8000db8:	f009 faba 	bl	800a330 <siprintf>
	lcd_print(1, 1, mesaj);
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <isimsiz_sureleri_yazdir+0x58>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fdbc 	bl	800093e <lcd_print>
	mydelay(100);
 8000dc6:	2064      	movs	r0, #100	; 0x64
 8000dc8:	f7ff fdf8 	bl	80009bc <mydelay>
	sprintf(mesaj, "2.time : %d msn", saniye2);
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <isimsiz_sureleri_yazdir+0x5c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	490b      	ldr	r1, [pc, #44]	; (8000e00 <isimsiz_sureleri_yazdir+0x60>)
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <isimsiz_sureleri_yazdir+0x58>)
 8000dd6:	f009 faab 	bl	800a330 <siprintf>
	lcd_print(2, 1, mesaj);
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <isimsiz_sureleri_yazdir+0x58>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fdad 	bl	800093e <lcd_print>
	mydelay(3000);
 8000de4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000de8:	f7ff fde8 	bl	80009bc <mydelay>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000c4 	.word	0x200000c4
 8000df4:	0800ab34 	.word	0x0800ab34
 8000df8:	200000f0 	.word	0x200000f0
 8000dfc:	200000c8 	.word	0x200000c8
 8000e00:	0800ab44 	.word	0x0800ab44

08000e04 <isimsiz_kazanan_1_yazdirma>:
void isimsiz_kazanan_1_yazdirma(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	lcd_clear();
 8000e08:	f7ff fdae 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000e0c:	2064      	movs	r0, #100	; 0x64
 8000e0e:	f7ff fdd5 	bl	80009bc <mydelay>
	lcd_print(1, 1, "1.Yarismaci");
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <isimsiz_kazanan_1_yazdirma+0x34>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fd91 	bl	800093e <lcd_print>
	mydelay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f7ff fdcd 	bl	80009bc <mydelay>
	lcd_print(2, 1, "Kazandi.");
 8000e22:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <isimsiz_kazanan_1_yazdirma+0x38>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff fd89 	bl	800093e <lcd_print>
	mydelay(3000);
 8000e2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e30:	f7ff fdc4 	bl	80009bc <mydelay>

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	0800aaf8 	.word	0x0800aaf8
 8000e3c:	0800ab24 	.word	0x0800ab24

08000e40 <isimsiz_kazanan_2_yazdirma>:
void isimsiz_kazanan_2_yazdirma(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	lcd_clear();
 8000e44:	f7ff fd90 	bl	8000968 <lcd_clear>
	mydelay(100);
 8000e48:	2064      	movs	r0, #100	; 0x64
 8000e4a:	f7ff fdb7 	bl	80009bc <mydelay>
	lcd_print(1, 1, "2.Yarismaci");
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <isimsiz_kazanan_2_yazdirma+0x34>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fd73 	bl	800093e <lcd_print>
	mydelay(100);
 8000e58:	2064      	movs	r0, #100	; 0x64
 8000e5a:	f7ff fdaf 	bl	80009bc <mydelay>
	lcd_print(2, 1, "Kazandi.");
 8000e5e:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <isimsiz_kazanan_2_yazdirma+0x38>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	2002      	movs	r0, #2
 8000e64:	f7ff fd6b 	bl	800093e <lcd_print>
	mydelay(3000);
 8000e68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e6c:	f7ff fda6 	bl	80009bc <mydelay>

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	0800ab10 	.word	0x0800ab10
 8000e78:	0800ab24 	.word	0x0800ab24

08000e7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e7c:	b598      	push	{r3, r4, r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e80:	f000 ffb2 	bl	8001de8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e84:	f000 f8f0 	bl	8001068 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e88:	f000 fab8 	bl	80013fc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000e8c:	f000 f972 	bl	8001174 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000e90:	f000 f99e 	bl	80011d0 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000e94:	f000 f9cc 	bl	8001230 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8000e98:	f008 fdd6 	bl	8009a48 <MX_USB_HOST_Init>
	MX_TIM2_Init();
 8000e9c:	f000 f9fe 	bl	800129c <MX_TIM2_Init>
	MX_TIM9_Init();
 8000ea0:	f000 fa48 	bl	8001334 <MX_TIM9_Init>
	MX_USART3_UART_Init();
 8000ea4:	f000 fa80 	bl	80013a8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fce9 	bl	8000884 <lcd_init>
	mydelay(50);
 8000eb2:	2032      	movs	r0, #50	; 0x32
 8000eb4:	f7ff fd82 	bl	80009bc <mydelay>
	lcd_clear();
 8000eb8:	f7ff fd56 	bl	8000968 <lcd_clear>
	mydelay(50);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f7ff fd7d 	bl	80009bc <mydelay>
	srand(time(NULL));
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f009 fa6c 	bl	800a3a0 <time>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	460c      	mov	r4, r1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f009 f9c7 	bl	800a260 <srand>
	HAL_UART_Receive_IT(&huart3, Rx_data, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	494e      	ldr	r1, [pc, #312]	; (8001010 <main+0x194>)
 8000ed6:	484f      	ldr	r0, [pc, #316]	; (8001014 <main+0x198>)
 8000ed8:	f005 f91e 	bl	8006118 <HAL_UART_Receive_IT>
	strcpy(isim1, "");
 8000edc:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <main+0x19c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	strcpy(isim2, "");
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	; (800101c <main+0x1a0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
	strcpy(gelcek, "");
 8000ee8:	4b4d      	ldr	r3, [pc, #308]	; (8001020 <main+0x1a4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000eee:	f008 fdd1 	bl	8009a94 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		HAL_TIM_Base_Stop_IT(&htim2);
 8000ef2:	484c      	ldr	r0, [pc, #304]	; (8001024 <main+0x1a8>)
 8000ef4:	f004 fc4d 	bl	8005792 <HAL_TIM_Base_Stop_IT>
		ledbayragi = 0;
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <main+0x1ac>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(baslamaled_GPIO_Port, baslamaled_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	484a      	ldr	r0, [pc, #296]	; (800102c <main+0x1b0>)
 8000f04:	f001 fad2 	bl	80024ac <HAL_GPIO_WritePin>
		hatabayragi = 0;
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <main+0x1b4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
		baslabayragi = 0;
 8000f0e:	4b49      	ldr	r3, [pc, #292]	; (8001034 <main+0x1b8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
		yarismaci1bayrak = 0;
 8000f14:	4b48      	ldr	r3, [pc, #288]	; (8001038 <main+0x1bc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
		yarismaci2bayrak = 0;
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <main+0x1c0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
		saniye1 = 0;
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <main+0x1c4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
		saniye2 = 0;
 8000f26:	4b47      	ldr	r3, [pc, #284]	; (8001044 <main+0x1c8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8000f2c:	f7ff fd1c 	bl	8000968 <lcd_clear>
		mydelay(100);
 8000f30:	2064      	movs	r0, #100	; 0x64
 8000f32:	f7ff fd43 	bl	80009bc <mydelay>
		lcd_print(1, 1, "Basla Veya");
 8000f36:	4a44      	ldr	r2, [pc, #272]	; (8001048 <main+0x1cc>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fcff 	bl	800093e <lcd_print>
		mydelay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f7ff fd3b 	bl	80009bc <mydelay>
		lcd_print(2, 1, "Isim Gir...");
 8000f46:	4a41      	ldr	r2, [pc, #260]	; (800104c <main+0x1d0>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f7ff fcf7 	bl	800093e <lcd_print>
		mydelay(100);
 8000f50:	2064      	movs	r0, #100	; 0x64
 8000f52:	f7ff fd33 	bl	80009bc <mydelay>
		while (1) {
			if (isimAlmaBayrak == 1) {
 8000f56:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <main+0x1d4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d110      	bne.n	8000f80 <main+0x104>
				strcpy(isim1, message);
 8000f5e:	493d      	ldr	r1, [pc, #244]	; (8001054 <main+0x1d8>)
 8000f60:	482d      	ldr	r0, [pc, #180]	; (8001018 <main+0x19c>)
 8000f62:	f009 fa14 	bl	800a38e <strcpy>
				isimAlmaBayrak = 0;
 8000f66:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <main+0x1d4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
				isim1skor = 0;
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <main+0x1dc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
				strcpy(message, "");
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <main+0x1d8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
				isim2skor = 0;
 8000f78:	4b38      	ldr	r3, [pc, #224]	; (800105c <main+0x1e0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
				break;
 8000f7e:	e005      	b.n	8000f8c <main+0x110>
			}
			if (baslabayragi == 1) {
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <main+0x1b8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d000      	beq.n	8000f8a <main+0x10e>
			if (isimAlmaBayrak == 1) {
 8000f88:	e7e5      	b.n	8000f56 <main+0xda>
				break;
 8000f8a:	bf00      	nop
			}
		}
		mydelay(50);
 8000f8c:	2032      	movs	r0, #50	; 0x32
 8000f8e:	f7ff fd15 	bl	80009bc <mydelay>
		while (1) {
			if (isimAlmaBayrak == 1) {
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <main+0x1d4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d113      	bne.n	8000fc2 <main+0x146>
				strcpy(isim2, message);
 8000f9a:	492e      	ldr	r1, [pc, #184]	; (8001054 <main+0x1d8>)
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <main+0x1a0>)
 8000f9e:	f009 f9f6 	bl	800a38e <strcpy>
				isimAlmaBayrak = 0;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <main+0x1d4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
				isim1skor = 0;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <main+0x1dc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				isim2skor = 0;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <main+0x1e0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
				isimGirildiBayrak = 1;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <main+0x1e4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
				strcpy(message, "");
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <main+0x1d8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
				break;
 8000fc0:	e005      	b.n	8000fce <main+0x152>
			}
			if (baslabayragi == 1) {
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <main+0x1b8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d000      	beq.n	8000fcc <main+0x150>
			if (isimAlmaBayrak == 1) {
 8000fca:	e7e2      	b.n	8000f92 <main+0x116>
				break;
 8000fcc:	bf00      	nop
			}
		}
		lcd_clear();
 8000fce:	f7ff fccb 	bl	8000968 <lcd_clear>
		mydelay(100);
 8000fd2:	2064      	movs	r0, #100	; 0x64
 8000fd4:	f7ff fcf2 	bl	80009bc <mydelay>
		lcd_print(1, 1, isim1);
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <main+0x19c>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fcae 	bl	800093e <lcd_print>
		mydelay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f7ff fcea 	bl	80009bc <mydelay>
		lcd_print(1, 13, "VS");
 8000fe8:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <main+0x1e8>)
 8000fea:	210d      	movs	r1, #13
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fca6 	bl	800093e <lcd_print>
		mydelay(100);
 8000ff2:	2064      	movs	r0, #100	; 0x64
 8000ff4:	f7ff fce2 	bl	80009bc <mydelay>
		lcd_print(2, 1, isim2);
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <main+0x1a0>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fc9e 	bl	800093e <lcd_print>
		while (1) {
			if (baslabayragi == 1) {
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <main+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d000      	beq.n	800100c <main+0x190>
 800100a:	e7fa      	b.n	8001002 <main+0x186>
				break;
 800100c:	bf00      	nop
		MX_USB_HOST_Process();
 800100e:	e76e      	b.n	8000eee <main+0x72>
 8001010:	200001a8 	.word	0x200001a8
 8001014:	20000100 	.word	0x20000100
 8001018:	200002e4 	.word	0x200002e4
 800101c:	20000198 	.word	0x20000198
 8001020:	200001ec 	.word	0x200001ec
 8001024:	200002a4 	.word	0x200002a4
 8001028:	200000b4 	.word	0x200000b4
 800102c:	40020400 	.word	0x40020400
 8001030:	200000b8 	.word	0x200000b8
 8001034:	200000cc 	.word	0x200000cc
 8001038:	200000bc 	.word	0x200000bc
 800103c:	200000c0 	.word	0x200000c0
 8001040:	200000c4 	.word	0x200000c4
 8001044:	200000c8 	.word	0x200000c8
 8001048:	0800ab54 	.word	0x0800ab54
 800104c:	0800ab60 	.word	0x0800ab60
 8001050:	200000d0 	.word	0x200000d0
 8001054:	200001ac 	.word	0x200001ac
 8001058:	200000d4 	.word	0x200000d4
 800105c:	200000d8 	.word	0x200000d8
 8001060:	200000b0 	.word	0x200000b0
 8001064:	0800ab6c 	.word	0x0800ab6c

08001068 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b098      	sub	sp, #96	; 0x60
 800106c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f009 f842 	bl	800a100 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b33      	ldr	r3, [pc, #204]	; (800116c <SystemClock_Config+0x104>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <SystemClock_Config+0x104>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <SystemClock_Config+0x104>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <SystemClock_Config+0x108>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <SystemClock_Config+0x108>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <SystemClock_Config+0x108>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80010d2:	2303      	movs	r3, #3
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010ee:	2308      	movs	r3, #8
 80010f0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80010f2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fc:	2307      	movs	r3, #7
 80010fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fccd 	bl	8004aa4 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xac>
		Error_Handler();
 8001110:	f000 fbc4 	bl	800189c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 ff26 	bl	8004f84 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xda>
		Error_Handler();
 800113e:	f000 fbad 	bl	800189c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001146:	23c0      	movs	r3, #192	; 0xc0
 8001148:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4618      	mov	r0, r3
 8001154:	f004 f908 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xfa>
		Error_Handler();
 800115e:	f000 fb9d 	bl	800189c <Error_Handler>
	}
}
 8001162:	bf00      	nop
 8001164:	3760      	adds	r7, #96	; 0x60
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001196:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f002 fe9f 	bl	8003ef4 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011bc:	f000 fb6e 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000144 	.word	0x20000144
 80011c8:	40005400 	.word	0x40005400
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_I2S3_Init+0x54>)
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <MX_I2S3_Init+0x58>)
 80011d8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2S3_Init+0x54>)
 80011dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_I2S3_Init+0x54>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_I2S3_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_I2S3_Init+0x54>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_I2S3_Init+0x54>)
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <MX_I2S3_Init+0x5c>)
 80011fa:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_I2S3_Init+0x54>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_I2S3_Init+0x54>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_I2S3_Init+0x54>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_I2S3_Init+0x54>)
 8001210:	f002 ffa8 	bl	8004164 <HAL_I2S_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2S3_Init+0x4e>
		Error_Handler();
 800121a:	f000 fb3f 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002fc 	.word	0x200002fc
 8001228:	40003c00 	.word	0x40003c00
 800122c:	00017700 	.word	0x00017700

08001230 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_SPI1_Init+0x64>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <MX_SPI1_Init+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_SPI1_Init+0x64>)
 800123c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001240:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_SPI1_Init+0x64>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_SPI1_Init+0x64>)
 800127c:	220a      	movs	r2, #10
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_SPI1_Init+0x64>)
 8001282:	f004 f9af 	bl	80055e4 <HAL_SPI_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_SPI1_Init+0x60>
		Error_Handler();
 800128c:	f000 fb06 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000023c 	.word	0x2000023c
 8001298:	40013000 	.word	0x40013000

0800129c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_TIM2_Init+0x94>)
 80012ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012be:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_TIM2_Init+0x94>)
 80012c2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80012c6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_TIM2_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM2_Init+0x94>)
 80012d0:	2209      	movs	r2, #9
 80012d2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_TIM2_Init+0x94>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM2_Init+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_TIM2_Init+0x94>)
 80012e2:	f004 f9e3 	bl	80056ac <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x54>
		Error_Handler();
 80012ec:	f000 fad6 	bl	800189c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM2_Init+0x94>)
 80012fe:	f004 fb7b 	bl	80059f8 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x70>
		Error_Handler();
 8001308:	f000 fac8 	bl	800189c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM2_Init+0x94>)
 800131a:	f004 fd87 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001324:	f000 faba 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200002a4 	.word	0x200002a4

08001334 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_TIM9_Init+0x6c>)
 8001348:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <MX_TIM9_Init+0x70>)
 800134a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 15999;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_TIM9_Init+0x6c>)
 800134e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001352:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_TIM9_Init+0x6c>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_TIM9_Init+0x6c>)
 800135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001360:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_TIM9_Init+0x6c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_TIM9_Init+0x6c>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_TIM9_Init+0x6c>)
 8001370:	f004 f99c 	bl	80056ac <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM9_Init+0x4a>
		Error_Handler();
 800137a:	f000 fa8f 	bl	800189c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_TIM9_Init+0x6c>)
 800138a:	f004 fb35 	bl	80059f8 <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM9_Init+0x64>
		Error_Handler();
 8001394:	f000 fa82 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001fc 	.word	0x200001fc
 80013a4:	40014000 	.word	0x40014000

080013a8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART3_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013b8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013e0:	f004 fdb4 	bl	8005f4c <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80013ea:	f000 fa57 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000100 	.word	0x20000100
 80013f8:	40004800 	.word	0x40004800

080013fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b8d      	ldr	r3, [pc, #564]	; (800164c <MX_GPIO_Init+0x250>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a8c      	ldr	r2, [pc, #560]	; (800164c <MX_GPIO_Init+0x250>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b8a      	ldr	r3, [pc, #552]	; (800164c <MX_GPIO_Init+0x250>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b86      	ldr	r3, [pc, #536]	; (800164c <MX_GPIO_Init+0x250>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a85      	ldr	r2, [pc, #532]	; (800164c <MX_GPIO_Init+0x250>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b83      	ldr	r3, [pc, #524]	; (800164c <MX_GPIO_Init+0x250>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <MX_GPIO_Init+0x250>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a7e      	ldr	r2, [pc, #504]	; (800164c <MX_GPIO_Init+0x250>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b7c      	ldr	r3, [pc, #496]	; (800164c <MX_GPIO_Init+0x250>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <MX_GPIO_Init+0x250>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a77      	ldr	r2, [pc, #476]	; (800164c <MX_GPIO_Init+0x250>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b75      	ldr	r3, [pc, #468]	; (800164c <MX_GPIO_Init+0x250>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <MX_GPIO_Init+0x250>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a70      	ldr	r2, [pc, #448]	; (800164c <MX_GPIO_Init+0x250>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b6e      	ldr	r3, [pc, #440]	; (800164c <MX_GPIO_Init+0x250>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <MX_GPIO_Init+0x250>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a69      	ldr	r2, [pc, #420]	; (800164c <MX_GPIO_Init+0x250>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <MX_GPIO_Init+0x250>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80014ba:	2200      	movs	r2, #0
 80014bc:	f641 7188 	movw	r1, #8072	; 0x1f88
 80014c0:	4863      	ldr	r0, [pc, #396]	; (8001650 <MX_GPIO_Init+0x254>)
 80014c2:	f000 fff3 	bl	80024ac <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LCD_RS_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin
					| LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80014c6:	2201      	movs	r2, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	4862      	ldr	r0, [pc, #392]	; (8001654 <MX_GPIO_Init+0x258>)
 80014cc:	f000 ffee 	bl	80024ac <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(baslamaled_GPIO_Port, baslamaled_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2101      	movs	r1, #1
 80014d4:	4860      	ldr	r0, [pc, #384]	; (8001658 <MX_GPIO_Init+0x25c>)
 80014d6:	f000 ffe9 	bl	80024ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80014da:	2200      	movs	r2, #0
 80014dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014e0:	485e      	ldr	r0, [pc, #376]	; (800165c <MX_GPIO_Init+0x260>)
 80014e2:	f000 ffe3 	bl	80024ac <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : CS_I2C_SPI_Pin LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin
	 LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LCD_RS_Pin | LCD_EN_Pin | LCD_D4_Pin
 80014e6:	f641 7388 	movw	r3, #8072	; 0x1f88
 80014ea:	61fb      	str	r3, [r7, #28]
			| LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4854      	ldr	r0, [pc, #336]	; (8001650 <MX_GPIO_Init+0x254>)
 8001500:	f000 fe3a 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001504:	2301      	movs	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	484e      	ldr	r0, [pc, #312]	; (8001654 <MX_GPIO_Init+0x258>)
 800151c:	f000 fe2c 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pins : yarismaci2_Pin yarismaci1_Pin */
	GPIO_InitStruct.Pin = yarismaci2_Pin | yarismaci1_Pin;
 8001520:	2314      	movs	r3, #20
 8001522:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001524:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <MX_GPIO_Init+0x264>)
 8001526:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001528:	2302      	movs	r3, #2
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4848      	ldr	r0, [pc, #288]	; (8001654 <MX_GPIO_Init+0x258>)
 8001534:	f000 fe20 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001538:	2308      	movs	r3, #8
 800153a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001548:	2305      	movs	r3, #5
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4840      	ldr	r0, [pc, #256]	; (8001654 <MX_GPIO_Init+0x258>)
 8001554:	f000 fe10 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001558:	2301      	movs	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <MX_GPIO_Init+0x268>)
 800155e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	483f      	ldr	r0, [pc, #252]	; (8001668 <MX_GPIO_Init+0x26c>)
 800156c:	f000 fe04 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : baslamabuton_Pin */
	GPIO_InitStruct.Pin = baslamabuton_Pin;
 8001570:	2308      	movs	r3, #8
 8001572:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MX_GPIO_Init+0x264>)
 8001576:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001578:	2302      	movs	r3, #2
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(baslamabuton_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4839      	ldr	r0, [pc, #228]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001584:	f000 fdf8 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : baslamaled_Pin */
	GPIO_InitStruct.Pin = baslamaled_Pin;
 8001588:	2301      	movs	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(baslamaled_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	482e      	ldr	r0, [pc, #184]	; (8001658 <MX_GPIO_Init+0x25c>)
 80015a0:	f000 fdea 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80015a4:	2304      	movs	r3, #4
 80015a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4828      	ldr	r0, [pc, #160]	; (8001658 <MX_GPIO_Init+0x25c>)
 80015b8:	f000 fdde 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ce:	2305      	movs	r3, #5
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <MX_GPIO_Init+0x25c>)
 80015da:	f000 fdcd 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80015de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4819      	ldr	r0, [pc, #100]	; (800165c <MX_GPIO_Init+0x260>)
 80015f8:	f000 fdbe 	bl	8002178 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015fc:	2320      	movs	r3, #32
 80015fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_GPIO_Init+0x260>)
 8001610:	f000 fdb2 	bl	8002178 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	2008      	movs	r0, #8
 800161a:	f000 fd54 	bl	80020c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800161e:	2008      	movs	r0, #8
 8001620:	f000 fd6d 	bl	80020fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2102      	movs	r1, #2
 8001628:	2009      	movs	r0, #9
 800162a:	f000 fd4c 	bl	80020c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800162e:	2009      	movs	r0, #9
 8001630:	f000 fd65 	bl	80020fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	200a      	movs	r0, #10
 800163a:	f000 fd44 	bl	80020c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800163e:	200a      	movs	r0, #10
 8001640:	f000 fd5d 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000
 8001654:	40020800 	.word	0x40020800
 8001658:	40020400 	.word	0x40020400
 800165c:	40020c00 	.word	0x40020c00
 8001660:	10110000 	.word	0x10110000
 8001664:	10120000 	.word	0x10120000
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

	if (Rx_data[0] == '.') {
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_UART_RxCpltCallback+0x40>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b2e      	cmp	r3, #46	; 0x2e
 800167a:	d10a      	bne.n	8001692 <HAL_UART_RxCpltCallback+0x26>
		strcpy(message, (char*) gelcek);
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <HAL_UART_RxCpltCallback+0x44>)
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <HAL_UART_RxCpltCallback+0x48>)
 8001680:	f008 fe85 	bl	800a38e <strcpy>
		strcpy(gelcek, "");
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_UART_RxCpltCallback+0x44>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
		isimAlmaBayrak = 1;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_UART_RxCpltCallback+0x4c>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e003      	b.n	800169a <HAL_UART_RxCpltCallback+0x2e>
	} else {
		strcat(gelcek, (char*) Rx_data);
 8001692:	4906      	ldr	r1, [pc, #24]	; (80016ac <HAL_UART_RxCpltCallback+0x40>)
 8001694:	4806      	ldr	r0, [pc, #24]	; (80016b0 <HAL_UART_RxCpltCallback+0x44>)
 8001696:	f008 fe6b 	bl	800a370 <strcat>
	}
	HAL_UART_Receive_IT(&huart3, Rx_data, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	4903      	ldr	r1, [pc, #12]	; (80016ac <HAL_UART_RxCpltCallback+0x40>)
 800169e:	4807      	ldr	r0, [pc, #28]	; (80016bc <HAL_UART_RxCpltCallback+0x50>)
 80016a0:	f004 fd3a 	bl	8006118 <HAL_UART_Receive_IT>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200001a8 	.word	0x200001a8
 80016b0:	200001ec 	.word	0x200001ec
 80016b4:	200001ac 	.word	0x200001ac
 80016b8:	200000d0 	.word	0x200000d0
 80016bc:	20000100 	.word	0x20000100

080016c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	count = count + 10;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	330a      	adds	r3, #10
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d0:	6013      	str	r3, [r2, #0]

}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200000ac 	.word	0x200000ac

080016e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == yarismaci1_Pin) {
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d11a      	bne.n	800172a <HAL_GPIO_EXTI_Callback+0x46>
		if (ledbayragi == 0) {
 80016f4:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_GPIO_EXTI_Callback+0x180>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <HAL_GPIO_EXTI_Callback+0x34>
			if (isimGirildiBayrak == 0) {
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <HAL_GPIO_EXTI_Callback+0x184>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <HAL_GPIO_EXTI_Callback+0x26>
				isimsiz1_hatalibasim_yazdirma();
 8001704:	f7ff f972 	bl	80009ec <isimsiz1_hatalibasim_yazdirma>
 8001708:	e00f      	b.n	800172a <HAL_GPIO_EXTI_Callback+0x46>

			} else if (isimGirildiBayrak == 1) {
 800170a:	4b57      	ldr	r3, [pc, #348]	; (8001868 <HAL_GPIO_EXTI_Callback+0x184>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10b      	bne.n	800172a <HAL_GPIO_EXTI_Callback+0x46>
				isimli1_hatalibasim_yazdirma();
 8001712:	f7ff f9b3 	bl	8000a7c <isimli1_hatalibasim_yazdirma>
 8001716:	e008      	b.n	800172a <HAL_GPIO_EXTI_Callback+0x46>

			}
		} else {
			lcd_clear();
 8001718:	f7ff f926 	bl	8000968 <lcd_clear>
			saniye1 = count;
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_GPIO_EXTI_Callback+0x188>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a53      	ldr	r2, [pc, #332]	; (8001870 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001722:	6013      	str	r3, [r2, #0]
			yarismaci1bayrak = 1;
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_GPIO_EXTI_Callback+0x190>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == yarismaci2_Pin) {
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d11a      	bne.n	8001766 <HAL_GPIO_EXTI_Callback+0x82>
		if (ledbayragi == 0) {
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_GPIO_EXTI_Callback+0x180>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_GPIO_EXTI_Callback+0x70>
			if (isimGirildiBayrak == 0) {
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_GPIO_EXTI_Callback+0x184>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <HAL_GPIO_EXTI_Callback+0x62>
				isimsiz2_hatalibasim_yazdirma();
 8001740:	f7ff f978 	bl	8000a34 <isimsiz2_hatalibasim_yazdirma>
 8001744:	e00f      	b.n	8001766 <HAL_GPIO_EXTI_Callback+0x82>
			} else if (isimGirildiBayrak == 1) {
 8001746:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_GPIO_EXTI_Callback+0x184>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10b      	bne.n	8001766 <HAL_GPIO_EXTI_Callback+0x82>
				isimli2_hatalibasim_yazdirma();
 800174e:	f7ff f9b9 	bl	8000ac4 <isimli2_hatalibasim_yazdirma>
 8001752:	e008      	b.n	8001766 <HAL_GPIO_EXTI_Callback+0x82>
			}
		} else {
			lcd_clear();
 8001754:	f7ff f908 	bl	8000968 <lcd_clear>
			saniye2 = count;
 8001758:	4b44      	ldr	r3, [pc, #272]	; (800186c <HAL_GPIO_EXTI_Callback+0x188>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_GPIO_EXTI_Callback+0x194>)
 800175e:	6013      	str	r3, [r2, #0]
			yarismaci2bayrak = 1;
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <HAL_GPIO_EXTI_Callback+0x198>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == baslamabuton_Pin) {
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d177      	bne.n	800185c <HAL_GPIO_EXTI_Callback+0x178>
		baslabayragi = 1;
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <HAL_GPIO_EXTI_Callback+0x19c>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
		ledbayragi = 0;
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <HAL_GPIO_EXTI_Callback+0x180>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
		hatabayragi = 0;
 8001778:	4b42      	ldr	r3, [pc, #264]	; (8001884 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
		mydelay(100);
 800177e:	2064      	movs	r0, #100	; 0x64
 8001780:	f7ff f91c 	bl	80009bc <mydelay>
		lcd_clear();
 8001784:	f7ff f8f0 	bl	8000968 <lcd_clear>
		mydelay(100);
 8001788:	2064      	movs	r0, #100	; 0x64
 800178a:	f7ff f917 	bl	80009bc <mydelay>
		lcd_print(1, 1, "Hizli Olan");
 800178e:	4a3e      	ldr	r2, [pc, #248]	; (8001888 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001790:	2101      	movs	r1, #1
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff f8d3 	bl	800093e <lcd_print>
		mydelay(100);
 8001798:	2064      	movs	r0, #100	; 0x64
 800179a:	f7ff f90f 	bl	80009bc <mydelay>
		lcd_print(2, 1, "Kazansin!");
 800179e:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_GPIO_EXTI_Callback+0x1a8>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff f8cb 	bl	800093e <lcd_print>
		HAL_GPIO_WritePin(baslamaled_GPIO_Port, baslamaled_Pin, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2101      	movs	r1, #1
 80017ac:	4838      	ldr	r0, [pc, #224]	; (8001890 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80017ae:	f000 fe7d 	bl	80024ac <HAL_GPIO_WritePin>
		int sayi = (rand() % 10) + 5;
 80017b2:	f008 fd79 	bl	800a2a8 <rand>
 80017b6:	4601      	mov	r1, r0
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80017ba:	fb83 2301 	smull	r2, r3, r3, r1
 80017be:	109a      	asrs	r2, r3, #2
 80017c0:	17cb      	asrs	r3, r1, #31
 80017c2:	1ad2      	subs	r2, r2, r3
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	1aca      	subs	r2, r1, r3
 80017ce:	1d53      	adds	r3, r2, #5
 80017d0:	60fb      	str	r3, [r7, #12]
		kirmalimydelay(sayi * 1000);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f8cd 	bl	800097c <kirmalimydelay>
		if (hatabayragi == 1) {
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d038      	beq.n	800185c <HAL_GPIO_EXTI_Callback+0x178>
		} else {
			count = 0;
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_GPIO_EXTI_Callback+0x188>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
			htim2.Instance->CNT = 0;
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 80017f8:	4827      	ldr	r0, [pc, #156]	; (8001898 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80017fa:	f003 ffa6 	bl	800574a <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(baslamaled_GPIO_Port, baslamaled_Pin, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	2101      	movs	r1, #1
 8001802:	4823      	ldr	r0, [pc, #140]	; (8001890 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001804:	f000 fe52 	bl	80024ac <HAL_GPIO_WritePin>
			ledbayragi = 1;
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_GPIO_EXTI_Callback+0x180>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
			while (1) {
				if (yarismaci1bayrak == 1 && yarismaci2bayrak == 1) {
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_GPIO_EXTI_Callback+0x190>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d1fb      	bne.n	800180e <HAL_GPIO_EXTI_Callback+0x12a>
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_GPIO_EXTI_Callback+0x198>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d1f7      	bne.n	800180e <HAL_GPIO_EXTI_Callback+0x12a>
					if (isimGirildiBayrak == 1) {
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_GPIO_EXTI_Callback+0x184>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10d      	bne.n	8001842 <HAL_GPIO_EXTI_Callback+0x15e>
						isimli_sureleri_yazdir();
 8001826:	f7ff f971 	bl	8000b0c <isimli_sureleri_yazdir>
						if (saniye1 < saniye2) {
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_GPIO_EXTI_Callback+0x18c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_GPIO_EXTI_Callback+0x194>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	da02      	bge.n	800183c <HAL_GPIO_EXTI_Callback+0x158>
							isimli_kazanan_1_yazdirma_gonderme();
 8001836:	f7ff f9ab 	bl	8000b90 <isimli_kazanan_1_yazdirma_gonderme>
						} else {
							isimli_kazanan_2_yazdirma_gonderme();
						}
						break;
 800183a:	e00f      	b.n	800185c <HAL_GPIO_EXTI_Callback+0x178>
							isimli_kazanan_2_yazdirma_gonderme();
 800183c:	f7ff fa2e 	bl	8000c9c <isimli_kazanan_2_yazdirma_gonderme>
						break;
 8001840:	e00c      	b.n	800185c <HAL_GPIO_EXTI_Callback+0x178>
					} else {
						isimsiz_sureleri_yazdir();
 8001842:	f7ff faad 	bl	8000da0 <isimsiz_sureleri_yazdir>

						if (saniye1 < saniye2) {
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_GPIO_EXTI_Callback+0x194>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	da02      	bge.n	8001858 <HAL_GPIO_EXTI_Callback+0x174>
							isimsiz_kazanan_1_yazdirma();
 8001852:	f7ff fad7 	bl	8000e04 <isimsiz_kazanan_1_yazdirma>
						} else {
							isimsiz_kazanan_2_yazdirma();
						}
						break;
 8001856:	e001      	b.n	800185c <HAL_GPIO_EXTI_Callback+0x178>
							isimsiz_kazanan_2_yazdirma();
 8001858:	f7ff faf2 	bl	8000e40 <isimsiz_kazanan_2_yazdirma>

		}

	}

}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000b4 	.word	0x200000b4
 8001868:	200000b0 	.word	0x200000b0
 800186c:	200000ac 	.word	0x200000ac
 8001870:	200000c4 	.word	0x200000c4
 8001874:	200000bc 	.word	0x200000bc
 8001878:	200000c8 	.word	0x200000c8
 800187c:	200000c0 	.word	0x200000c0
 8001880:	200000cc 	.word	0x200000cc
 8001884:	200000b8 	.word	0x200000b8
 8001888:	0800ab70 	.word	0x0800ab70
 800188c:	0800ab7c 	.word	0x0800ab7c
 8001890:	40020400 	.word	0x40020400
 8001894:	66666667 	.word	0x66666667
 8001898:	200002a4 	.word	0x200002a4

0800189c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018a2:	e7fe      	b.n	80018a2 <Error_Handler+0x6>

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f000 fbe4 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_I2C_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12c      	bne.n	8001970 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_I2C_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_I2C_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001932:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001944:	2304      	movs	r3, #4
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480c      	ldr	r0, [pc, #48]	; (8001980 <HAL_I2C_MspInit+0x8c>)
 8001950:	f000 fc12 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_I2C_MspInit+0x88>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_I2C_MspInit+0x88>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001962:	6413      	str	r3, [r2, #64]	; 0x40
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_I2C_MspInit+0x88>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <HAL_I2S_MspInit+0xc0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d14a      	bne.n	8001a3c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_I2S_MspInit+0xc4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019fa:	2310      	movs	r3, #16
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <HAL_I2S_MspInit+0xc8>)
 8001a16:	f000 fbaf 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a1a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_I2S_MspInit+0xcc>)
 8001a38:	f000 fb9e 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40003c00 	.word	0x40003c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020800 	.word	0x40020800

08001a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_SPI_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12b      	bne.n	8001ace <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001aae:	23e0      	movs	r3, #224	; 0xe0
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_SPI_MspInit+0x8c>)
 8001aca:	f000 fb55 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40013000 	.word	0x40013000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d116      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_TIM_Base_MspInit+0x70>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <HAL_TIM_Base_MspInit+0x70>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_TIM_Base_MspInit+0x70>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	201c      	movs	r0, #28
 8001b18:	f000 fad5 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b1c:	201c      	movs	r0, #28
 8001b1e:	f000 faee 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001b22:	e012      	b.n	8001b4a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_TIM_Base_MspInit+0x74>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d10d      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_TIM_Base_MspInit+0x70>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_TIM_Base_MspInit+0x70>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_TIM_Base_MspInit+0x70>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40014000 	.word	0x40014000

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <HAL_UART_MspInit+0xd4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d153      	bne.n	8001c26 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_UART_MspInit+0xd8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be4:	2307      	movs	r3, #7
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <HAL_UART_MspInit+0xdc>)
 8001bf0:	f000 fac2 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c06:	2307      	movs	r3, #7
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480a      	ldr	r0, [pc, #40]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001c12:	f000 fab1 	bl	8002178 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2027      	movs	r0, #39	; 0x27
 8001c1c:	f000 fa53 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c20:	2027      	movs	r0, #39	; 0x27
 8001c22:	f000 fa6c 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004800 	.word	0x40004800
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40020c00 	.word	0x40020c00

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler+0x4>

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f8fe 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c98:	2004      	movs	r0, #4
 8001c9a:	f000 fc21 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ca6:	2008      	movs	r0, #8
 8001ca8:	f000 fc1a 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cb4:	2010      	movs	r0, #16
 8001cb6:	f000 fc13 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM2_IRQHandler+0x10>)
 8001cc6:	f003 fd8f 	bl	80057e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002a4 	.word	0x200002a4

08001cd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */



  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART3_IRQHandler+0x10>)
 8001cda:	f004 fa73 	bl	80061c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000100 	.word	0x20000100

08001ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <OTG_FS_IRQHandler+0x10>)
 8001cee:	f000 fe9f 	bl	8002a30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000720 	.word	0x20000720

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f008 f994 	bl	800a058 <__errno>
 8001d30:	4602      	mov	r2, r0
 8001d32:	230c      	movs	r3, #12
 8001d34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <_sbrk+0x64>)
 8001d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20020000 	.word	0x20020000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	200000dc 	.word	0x200000dc
 8001d64:	200009e8 	.word	0x200009e8

08001d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <SystemInit+0x28>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d72:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <SystemInit+0x28>)
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SystemInit+0x28>)
 8001d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d82:	609a      	str	r2, [r3, #8]
#endif
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d9a:	e003      	b.n	8001da4 <LoopCopyDataInit>

08001d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001da2:	3104      	adds	r1, #4

08001da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dac:	d3f6      	bcc.n	8001d9c <CopyDataInit>
  ldr  r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001db0:	e002      	b.n	8001db8 <LoopFillZerobss>

08001db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001db4:	f842 3b04 	str.w	r3, [r2], #4

08001db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dbc:	d3f9      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dbe:	f7ff ffd3 	bl	8001d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f008 f94f 	bl	800a064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff f859 	bl	8000e7c <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dd0:	0800ac0c 	.word	0x0800ac0c
  ldr  r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dd8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001ddc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001de0:	200009e8 	.word	0x200009e8

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_Init+0x40>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_Init+0x40>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x40>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f94d 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fd42 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f965 	bl	800211a <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 f92d 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	20000344 	.word	0x20000344

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000344 	.word	0x20000344

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_Delay+0x40>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000008 	.word	0x20000008

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff29 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff3e 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff31 	bl	8001f74 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e00c      	b.n	800216a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2205      	movs	r2, #5
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e16b      	b.n	800246c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 815a 	bne.w	8002466 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d00b      	beq.n	80021d2 <HAL_GPIO_Init+0x5a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0xfc>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b12      	cmp	r3, #18
 8002272:	d123      	bne.n	80022bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80b4 	beq.w	8002466 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <HAL_GPIO_Init+0x308>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a5e      	ldr	r2, [pc, #376]	; (8002480 <HAL_GPIO_Init+0x308>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b5c      	ldr	r3, [pc, #368]	; (8002480 <HAL_GPIO_Init+0x308>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a5a      	ldr	r2, [pc, #360]	; (8002484 <HAL_GPIO_Init+0x30c>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_GPIO_Init+0x310>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <HAL_GPIO_Init+0x226>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_GPIO_Init+0x314>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x222>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_GPIO_Init+0x318>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x21e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <HAL_GPIO_Init+0x31c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <HAL_GPIO_Init+0x320>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x216>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_GPIO_Init+0x324>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x212>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_GPIO_Init+0x328>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_GPIO_Init+0x32c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x20a>
 800237e:	2307      	movs	r3, #7
 8002380:	e00e      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002382:	2308      	movs	r3, #8
 8002384:	e00c      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002386:	2306      	movs	r3, #6
 8002388:	e00a      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800238a:	2305      	movs	r3, #5
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800238e:	2304      	movs	r3, #4
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x228>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_GPIO_Init+0x30c>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_GPIO_Init+0x330>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_GPIO_Init+0x330>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_GPIO_Init+0x330>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x330>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_GPIO_Init+0x330>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_GPIO_Init+0x330>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_GPIO_Init+0x330>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_GPIO_Init+0x330>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f ae90 	bls.w	8002194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	3724      	adds	r7, #36	; 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40021400 	.word	0x40021400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f8f0 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40013c00 	.word	0x40013c00

08002510 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	b08f      	sub	sp, #60	; 0x3c
 8002514:	af0a      	add	r7, sp, #40	; 0x28
 8002516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e054      	b.n	80025cc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f007 fae1 	bl	8009b04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 fc9d 	bl	8006ea0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	687e      	ldr	r6, [r7, #4]
 800256e:	466d      	mov	r5, sp
 8002570:	f106 0410 	add.w	r4, r6, #16
 8002574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002580:	e885 0003 	stmia.w	r5, {r0, r1}
 8002584:	1d33      	adds	r3, r6, #4
 8002586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002588:	6838      	ldr	r0, [r7, #0]
 800258a:	f004 fc17 	bl	8006dbc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fc94 	bl	8006ec2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	687e      	ldr	r6, [r7, #4]
 80025a2:	466d      	mov	r5, sp
 80025a4:	f106 0410 	add.w	r4, r6, #16
 80025a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80025b8:	1d33      	adds	r3, r6, #4
 80025ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	f004 fda7 	bl	8007110 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025d4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af04      	add	r7, sp, #16
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	70fb      	strb	r3, [r7, #3]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70bb      	strb	r3, [r7, #2]
 80025ea:	4613      	mov	r3, r2
 80025ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_HCD_HC_Init+0x28>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e07f      	b.n	80026fc <HAL_HCD_HC_Init+0x128>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	333d      	adds	r3, #61	; 0x3d
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	787a      	ldrb	r2, [r7, #1]
 800262a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3340      	adds	r3, #64	; 0x40
 800263c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800263e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	3339      	adds	r3, #57	; 0x39
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	333f      	adds	r3, #63	; 0x3f
 8002664:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002668:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	78bb      	ldrb	r3, [r7, #2]
 800266e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002672:	b2d8      	uxtb	r0, r3
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	333a      	adds	r3, #58	; 0x3a
 8002682:	4602      	mov	r2, r0
 8002684:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002686:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da0a      	bge.n	80026a4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	333b      	adds	r3, #59	; 0x3b
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e009      	b.n	80026b8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	333b      	adds	r3, #59	; 0x3b
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	333c      	adds	r3, #60	; 0x3c
 80026c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026cc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	787c      	ldrb	r4, [r7, #1]
 80026d4:	78ba      	ldrb	r2, [r7, #2]
 80026d6:	78f9      	ldrb	r1, [r7, #3]
 80026d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4623      	mov	r3, r4
 80026ea:	f004 fe93 	bl	8007414 <USB_HC_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}

08002704 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_HCD_HC_Halt+0x1e>
 800271e:	2302      	movs	r3, #2
 8002720:	e00f      	b.n	8002742 <HAL_HCD_HC_Halt+0x3e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f005 f8cf 	bl	80078d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	70fb      	strb	r3, [r7, #3]
 800275e:	460b      	mov	r3, r1
 8002760:	70bb      	strb	r3, [r7, #2]
 8002762:	4613      	mov	r3, r2
 8002764:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	333b      	adds	r3, #59	; 0x3b
 8002776:	78ba      	ldrb	r2, [r7, #2]
 8002778:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	333f      	adds	r3, #63	; 0x3f
 800278a:	787a      	ldrb	r2, [r7, #1]
 800278c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800278e:	7c3b      	ldrb	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d114      	bne.n	80027be <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3342      	adds	r3, #66	; 0x42
 80027a4:	2203      	movs	r2, #3
 80027a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	7f3a      	ldrb	r2, [r7, #28]
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e009      	b.n	80027d2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	3342      	adds	r3, #66	; 0x42
 80027ce:	2202      	movs	r2, #2
 80027d0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027d2:	787b      	ldrb	r3, [r7, #1]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	f200 80d6 	bhi.w	8002986 <HAL_HCD_HC_SubmitRequest+0x23a>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	08002971 	.word	0x08002971
 80027e8:	0800285d 	.word	0x0800285d
 80027ec:	080028e7 	.word	0x080028e7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027f0:	7c3b      	ldrb	r3, [r7, #16]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	f040 80c9 	bne.w	800298a <HAL_HCD_HC_SubmitRequest+0x23e>
 80027f8:	78bb      	ldrb	r3, [r7, #2]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80c5 	bne.w	800298a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3351      	adds	r3, #81	; 0x51
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	3351      	adds	r3, #81	; 0x51
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	3342      	adds	r3, #66	; 0x42
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002844:	e0a1      	b.n	800298a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	3342      	adds	r3, #66	; 0x42
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
      break;
 800285a:	e096      	b.n	800298a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800285c:	78bb      	ldrb	r3, [r7, #2]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d120      	bne.n	80028a4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	3351      	adds	r3, #81	; 0x51
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	3342      	adds	r3, #66	; 0x42
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800288c:	e07e      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	3342      	adds	r3, #66	; 0x42
 800289e:	2202      	movs	r2, #2
 80028a0:	701a      	strb	r2, [r3, #0]
      break;
 80028a2:	e073      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	3350      	adds	r3, #80	; 0x50
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3342      	adds	r3, #66	; 0x42
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
      break;
 80028ce:	e05d      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3342      	adds	r3, #66	; 0x42
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]
      break;
 80028e4:	e052      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028e6:	78bb      	ldrb	r3, [r7, #2]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d120      	bne.n	800292e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	3351      	adds	r3, #81	; 0x51
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	3342      	adds	r3, #66	; 0x42
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002916:	e039      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	3342      	adds	r3, #66	; 0x42
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]
      break;
 800292c:	e02e      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	3350      	adds	r3, #80	; 0x50
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	3342      	adds	r3, #66	; 0x42
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
      break;
 8002958:	e018      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	3342      	adds	r3, #66	; 0x42
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
      break;
 800296e:	e00d      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	3342      	adds	r3, #66	; 0x42
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
      break;
 8002984:	e002      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800298a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3344      	adds	r3, #68	; 0x44
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	8b39      	ldrh	r1, [r7, #24]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4403      	add	r3, r0
 80029b0:	3348      	adds	r3, #72	; 0x48
 80029b2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	335c      	adds	r3, #92	; 0x5c
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	334c      	adds	r3, #76	; 0x4c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3339      	adds	r3, #57	; 0x39
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	335d      	adds	r3, #93	; 0x5d
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	3338      	adds	r3, #56	; 0x38
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	18d1      	adds	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f004 fe02 	bl	8007628 <USB_HC_StartXfer>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop

08002a30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 fb1f 	bl	800708a <USB_GetMode>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	f040 80ef 	bne.w	8002c32 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fb03 	bl	8007064 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80e5 	beq.w	8002c30 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 fafa 	bl	8007064 <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a7a:	d104      	bne.n	8002a86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 faea 	bl	8007064 <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9a:	d104      	bne.n	8002aa6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 fada 	bl	8007064 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aba:	d104      	bne.n	8002ac6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 faca 	bl	8007064 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d103      	bne.n	8002ae2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fabc 	bl	8007064 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af6:	d115      	bne.n	8002b24 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f007 f874 	bl	8009c00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fbb2 	bl	8007288 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 fa9b 	bl	8007064 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b38:	d102      	bne.n	8002b40 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f001 f966 	bl	8003e0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 fa8d 	bl	8007064 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d106      	bne.n	8002b62 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f007 f837 	bl	8009bc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fa7c 	bl	8007064 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b76:	d138      	bne.n	8002bea <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 fe99 	bl	80078b4 <USB_HC_ReadInterrupt>
 8002b82:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e025      	b.n	8002bd6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8cf 	bl	8002d60 <HCD_HC_IN_IRQHandler>
 8002bc2:	e005      	b.n	8002bd0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	4619      	mov	r1, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fcfd 	bl	80035ca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3d4      	bcc.n	8002b8a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fa38 	bl	8007064 <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d101      	bne.n	8002c02 <HAL_HCD_IRQHandler+0x1d2>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_HCD_IRQHandler+0x1d4>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d014      	beq.n	8002c32 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0210 	bic.w	r2, r2, #16
 8002c16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f001 f84b 	bl	8003cb4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0210 	orr.w	r2, r2, #16
 8002c2c:	619a      	str	r2, [r3, #24]
 8002c2e:	e000      	b.n	8002c32 <HAL_HCD_IRQHandler+0x202>
      return;
 8002c30:	bf00      	nop
    }
  }
}
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_HCD_Start+0x16>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e013      	b.n	8002c76 <HAL_HCD_Start+0x3e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 f90f 	bl	8006e7e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fb72 	bl	8007350 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_HCD_Stop+0x16>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e00d      	b.n	8002cb0 <HAL_HCD_Stop+0x32>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 ff53 	bl	8007b4c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fb19 	bl	80072fc <USB_ResetPort>
 8002cca:	4603      	mov	r3, r0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	334c      	adds	r3, #76	; 0x4c
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 fb5b 	bl	80073f0 <USB_GetCurrentFrame>
 8002d3a:	4603      	mov	r3, r0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f004 fb36 	bl	80073c2 <USB_GetHostSpeed>
 8002d56:	4603      	mov	r3, r0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d119      	bne.n	8002dc4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2304      	movs	r3, #4
 8002da0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	60d3      	str	r3, [r2, #12]
 8002dc2:	e0ce      	b.n	8002f62 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d12c      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	335d      	adds	r3, #93	; 0x5d
 8002e00:	2207      	movs	r2, #7
 8002e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	0151      	lsls	r1, r2, #5
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	440a      	add	r2, r1
 8002e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f004 fd51 	bl	80078d6 <USB_HC_Halt>
 8002e34:	e095      	b.n	8002f62 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d109      	bne.n	8002e60 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	6093      	str	r3, [r2, #8]
 8002e5e:	e080      	b.n	8002f62 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d134      	bne.n	8002ee0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	335d      	adds	r3, #93	; 0x5d
 8002ea6:	2205      	movs	r2, #5
 8002ea8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2310      	movs	r3, #16
 8002eba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2308      	movs	r3, #8
 8002ecc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fcfc 	bl	80078d6 <USB_HC_Halt>
 8002ede:	e040      	b.n	8002f62 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d134      	bne.n	8002f62 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	0151      	lsls	r1, r2, #5
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	440a      	add	r2, r1
 8002f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 fcd7 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	2310      	movs	r3, #16
 8002f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	335d      	adds	r3, #93	; 0x5d
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f60:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f78:	d122      	bne.n	8002fc0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	0151      	lsls	r1, r2, #5
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	440a      	add	r2, r1
 8002f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 fc96 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fbc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002fbe:	e300      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 80fd 	bne.w	80031d2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3348      	adds	r3, #72	; 0x48
 8002ff0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003004:	1ad1      	subs	r1, r2, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4403      	add	r3, r0
 8003014:	334c      	adds	r3, #76	; 0x4c
 8003016:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	335d      	adds	r3, #93	; 0x5d
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3358      	adds	r3, #88	; 0x58
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	461a      	mov	r2, r3
 800304e:	2301      	movs	r3, #1
 8003050:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	333f      	adds	r3, #63	; 0x3f
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	333f      	adds	r3, #63	; 0x3f
 8003078:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800307a:	2b02      	cmp	r3, #2
 800307c:	d121      	bne.n	80030c2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	0151      	lsls	r1, r2, #5
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	440a      	add	r2, r1
 8003094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fc14 	bl	80078d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	461a      	mov	r2, r3
 80030bc:	2310      	movs	r3, #16
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	e070      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	333f      	adds	r3, #63	; 0x3f
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d12a      	bne.n	800312e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	335c      	adds	r3, #92	; 0x5c
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	b2d8      	uxtb	r0, r3
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	440b      	add	r3, r1
 800311e:	335c      	adds	r3, #92	; 0x5c
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4601      	mov	r1, r0
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f006 fd78 	bl	8009c1c <HAL_HCD_HC_NotifyURBChange_Callback>
 800312c:	e03a      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	333f      	adds	r3, #63	; 0x3f
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d12f      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	335c      	adds	r3, #92	; 0x5c
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	3350      	adds	r3, #80	; 0x50
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	f083 0301 	eor.w	r3, r3, #1
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	3350      	adds	r3, #80	; 0x50
 8003180:	4602      	mov	r2, r0
 8003182:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	b2d8      	uxtb	r0, r3
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	4601      	mov	r1, r0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f006 fd3c 	bl	8009c1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	3350      	adds	r3, #80	; 0x50
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2d8      	uxtb	r0, r3
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	3350      	adds	r3, #80	; 0x50
 80031cc:	4602      	mov	r2, r0
 80031ce:	701a      	strb	r2, [r3, #0]
}
 80031d0:	e1f7      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f040 811a 	bne.w	800341e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	0151      	lsls	r1, r2, #5
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	440a      	add	r2, r1
 8003200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003204:	f023 0302 	bic.w	r3, r3, #2
 8003208:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	335d      	adds	r3, #93	; 0x5d
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10a      	bne.n	8003236 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	335c      	adds	r3, #92	; 0x5c
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e0d9      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	335d      	adds	r3, #93	; 0x5d
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d10a      	bne.n	8003262 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	2205      	movs	r2, #5
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e0c3      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	335d      	adds	r3, #93	; 0x5d
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d00a      	beq.n	800328e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	335d      	adds	r3, #93	; 0x5d
 8003288:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800328a:	2b08      	cmp	r3, #8
 800328c:	d156      	bne.n	800333c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3358      	adds	r3, #88	; 0x58
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1c59      	adds	r1, r3, #1
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4403      	add	r3, r0
 80032b0:	3358      	adds	r3, #88	; 0x58
 80032b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	3358      	adds	r3, #88	; 0x58
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d914      	bls.n	80032f4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	3358      	adds	r3, #88	; 0x58
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	335c      	adds	r3, #92	; 0x5c
 80032ee:	2204      	movs	r2, #4
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e009      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	335c      	adds	r3, #92	; 0x5c
 8003304:	2202      	movs	r2, #2
 8003306:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800331e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003326:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e056      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	335d      	adds	r3, #93	; 0x5d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d123      	bne.n	800339a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	440b      	add	r3, r1
 8003360:	335c      	adds	r3, #92	; 0x5c
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800337c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003384:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	e027      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	335d      	adds	r3, #93	; 0x5d
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b07      	cmp	r3, #7
 80033ae:	d11c      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	3358      	adds	r3, #88	; 0x58
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4403      	add	r3, r0
 80033d2:	3358      	adds	r3, #88	; 0x58
 80033d4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	335c      	adds	r3, #92	; 0x5c
 80033e6:	2204      	movs	r2, #4
 80033e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2302      	movs	r3, #2
 80033fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	335c      	adds	r3, #92	; 0x5c
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4601      	mov	r1, r0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f006 fc00 	bl	8009c1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800341c:	e0d1      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d13e      	bne.n	80034b2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	440a      	add	r2, r1
 800344a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	3358      	adds	r3, #88	; 0x58
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4403      	add	r3, r0
 8003476:	3358      	adds	r3, #88	; 0x58
 8003478:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	335d      	adds	r3, #93	; 0x5d
 800348a:	2206      	movs	r2, #6
 800348c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fa1c 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	461a      	mov	r2, r3
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	6093      	str	r3, [r2, #8]
}
 80034b0:	e087      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d17c      	bne.n	80035c2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	333f      	adds	r3, #63	; 0x3f
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d122      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	3358      	adds	r3, #88	; 0x58
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	0151      	lsls	r1, r2, #5
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	440a      	add	r2, r1
 8003508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f004 f9da 	bl	80078d6 <USB_HC_Halt>
 8003522:	e045      	b.n	80035b0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	333f      	adds	r3, #63	; 0x3f
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	440b      	add	r3, r1
 8003548:	333f      	adds	r3, #63	; 0x3f
 800354a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800354c:	2b02      	cmp	r3, #2
 800354e:	d12f      	bne.n	80035b0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3358      	adds	r3, #88	; 0x58
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d121      	bne.n	80035b0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	335d      	adds	r3, #93	; 0x5d
 800357c:	2203      	movs	r2, #3
 800357e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	440a      	add	r2, r1
 8003596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 f993 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	2310      	movs	r3, #16
 80035c0:	6093      	str	r3, [r2, #8]
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d119      	bne.n	800362e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	461a      	mov	r2, r3
 8003608:	2304      	movs	r3, #4
 800360a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	0151      	lsls	r1, r2, #5
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	440a      	add	r2, r1
 8003622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800362c:	e33e      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b20      	cmp	r3, #32
 8003642:	d141      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	461a      	mov	r2, r3
 8003652:	2320      	movs	r3, #32
 8003654:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	333d      	adds	r3, #61	; 0x3d
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	f040 831f 	bne.w	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	333d      	adds	r3, #61	; 0x3d
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	335c      	adds	r3, #92	; 0x5c
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 f908 	bl	80078d6 <USB_HC_Halt>
}
 80036c6:	e2f1      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d13f      	bne.n	800375e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	335d      	adds	r3, #93	; 0x5d
 80036ee:	2204      	movs	r2, #4
 80036f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	333d      	adds	r3, #61	; 0x3d
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	3358      	adds	r3, #88	; 0x58
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	0151      	lsls	r1, r2, #5
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	440a      	add	r2, r1
 8003730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f004 f8c6 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	461a      	mov	r2, r3
 8003758:	2340      	movs	r3, #64	; 0x40
 800375a:	6093      	str	r3, [r2, #8]
}
 800375c:	e2a6      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003774:	d122      	bne.n	80037bc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	440a      	add	r2, r1
 800378c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 f898 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	461a      	mov	r2, r3
 80037b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b8:	6093      	str	r3, [r2, #8]
}
 80037ba:	e277      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d135      	bne.n	800383e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3358      	adds	r3, #88	; 0x58
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f004 f860 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	461a      	mov	r2, r3
 8003824:	2301      	movs	r3, #1
 8003826:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	335d      	adds	r3, #93	; 0x5d
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
}
 800383c:	e236      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d12b      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	2308      	movs	r3, #8
 8003864:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	440a      	add	r2, r1
 800387c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f004 f820 	bl	80078d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	335d      	adds	r3, #93	; 0x5d
 80038a6:	2205      	movs	r2, #5
 80038a8:	701a      	strb	r2, [r3, #0]
}
 80038aa:	e1ff      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d155      	bne.n	800396e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	3358      	adds	r3, #88	; 0x58
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	335d      	adds	r3, #93	; 0x5d
 80038e6:	2203      	movs	r2, #3
 80038e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	440b      	add	r3, r1
 80038f8:	333d      	adds	r3, #61	; 0x3d
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d114      	bne.n	800392a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	333c      	adds	r3, #60	; 0x3c
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	333d      	adds	r3, #61	; 0x3d
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	440a      	add	r2, r1
 8003940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f003 ffbe 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003966:	461a      	mov	r2, r3
 8003968:	2310      	movs	r3, #16
 800396a:	6093      	str	r3, [r2, #8]
}
 800396c:	e19e      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d12b      	bne.n	80039dc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	440a      	add	r2, r1
 800399a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f003 ff91 	bl	80078d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	335d      	adds	r3, #93	; 0x5d
 80039c4:	2206      	movs	r2, #6
 80039c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	461a      	mov	r2, r3
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	6093      	str	r3, [r2, #8]
}
 80039da:	e167      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d135      	bne.n	8003a60 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 ff59 	bl	80078d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	2310      	movs	r3, #16
 8003a34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	461a      	mov	r2, r3
 8003a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	335d      	adds	r3, #93	; 0x5d
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	701a      	strb	r2, [r3, #0]
}
 8003a5e:	e125      	b.n	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	f040 811a 	bne.w	8003cac <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	0151      	lsls	r1, r2, #5
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a92:	f023 0302 	bic.w	r3, r3, #2
 8003a96:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	440b      	add	r3, r1
 8003aa6:	335d      	adds	r3, #93	; 0x5d
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d137      	bne.n	8003b1e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	335c      	adds	r3, #92	; 0x5c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	333f      	adds	r3, #63	; 0x3f
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d00b      	beq.n	8003af0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	333f      	adds	r3, #63	; 0x3f
 8003ae8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	f040 80c5 	bne.w	8003c7a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	440b      	add	r3, r1
 8003afe:	3351      	adds	r3, #81	; 0x51
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	f083 0301 	eor.w	r3, r3, #1
 8003b06:	b2d8      	uxtb	r0, r3
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3351      	adds	r3, #81	; 0x51
 8003b18:	4602      	mov	r2, r0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e0ad      	b.n	8003c7a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	335d      	adds	r3, #93	; 0x5d
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d10a      	bne.n	8003b4a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	440b      	add	r3, r1
 8003b42:	335c      	adds	r3, #92	; 0x5c
 8003b44:	2202      	movs	r2, #2
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	e097      	b.n	8003c7a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	440b      	add	r3, r1
 8003b58:	335d      	adds	r3, #93	; 0x5d
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d10a      	bne.n	8003b76 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	335c      	adds	r3, #92	; 0x5c
 8003b70:	2202      	movs	r2, #2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e081      	b.n	8003c7a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	335d      	adds	r3, #93	; 0x5d
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d10a      	bne.n	8003ba2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	335c      	adds	r3, #92	; 0x5c
 8003b9c:	2205      	movs	r2, #5
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e06b      	b.n	8003c7a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	335d      	adds	r3, #93	; 0x5d
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d00a      	beq.n	8003bce <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	335d      	adds	r3, #93	; 0x5d
 8003bc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d155      	bne.n	8003c7a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3358      	adds	r3, #88	; 0x58
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c59      	adds	r1, r3, #1
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4403      	add	r3, r0
 8003bf0:	3358      	adds	r3, #88	; 0x58
 8003bf2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3358      	adds	r3, #88	; 0x58
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d914      	bls.n	8003c34 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	440b      	add	r3, r1
 8003c18:	3358      	adds	r3, #88	; 0x58
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	335c      	adds	r3, #92	; 0x5c
 8003c2e:	2204      	movs	r2, #4
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e009      	b.n	8003c48 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	2202      	movs	r2, #2
 8003c46:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c5e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c66:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	461a      	mov	r2, r3
 8003c88:	2302      	movs	r3, #2
 8003c8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	b2d8      	uxtb	r0, r3
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	335c      	adds	r3, #92	; 0x5c
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f005 ffb8 	bl	8009c1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cac:	bf00      	nop
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	0c5b      	lsrs	r3, r3, #17
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ce8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d003      	beq.n	8003cf8 <HCD_RXQLVL_IRQHandler+0x44>
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	f000 8082 	beq.w	8003dfa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003cf6:	e083      	b.n	8003e00 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d07f      	beq.n	8003dfe <HCD_RXQLVL_IRQHandler+0x14a>
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3344      	adds	r3, #68	; 0x44
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d074      	beq.n	8003dfe <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	440b      	add	r3, r1
 8003d26:	3344      	adds	r3, #68	; 0x44
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f003 f96f 	bl	8007012 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	3344      	adds	r3, #68	; 0x44
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	18d1      	adds	r1, r2, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4403      	add	r3, r0
 8003d58:	3344      	adds	r3, #68	; 0x44
 8003d5a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	334c      	adds	r3, #76	; 0x4c
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	18d1      	adds	r1, r2, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4403      	add	r3, r0
 8003d80:	334c      	adds	r3, #76	; 0x4c
 8003d82:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HCD_RXQLVL_IRQHandler+0x154>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d031      	beq.n	8003dfe <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	3350      	adds	r3, #80	; 0x50
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2d8      	uxtb	r0, r3
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3350      	adds	r3, #80	; 0x50
 8003df4:	4602      	mov	r2, r0
 8003df6:	701a      	strb	r2, [r3, #0]
      break;
 8003df8:	e001      	b.n	8003dfe <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003dfe:	bf00      	nop
  }
}
 8003e00:	bf00      	nop
 8003e02:	3728      	adds	r7, #40	; 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	1ff80000 	.word	0x1ff80000

08003e0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d10b      	bne.n	8003e5c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f005 fec8 	bl	8009be4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d132      	bne.n	8003ecc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f043 0308 	orr.w	r3, r3, #8
 8003e6c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d126      	bne.n	8003ec6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d113      	bne.n	8003ea8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e8a:	d106      	bne.n	8003e9a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2102      	movs	r1, #2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 f9f8 	bl	8007288 <USB_InitFSLSPClkSel>
 8003e98:	e011      	b.n	8003ebe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f003 f9f1 	bl	8007288 <USB_InitFSLSPClkSel>
 8003ea6:	e00a      	b.n	8003ebe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ebc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f005 feba 	bl	8009c38 <HAL_HCD_PortEnabled_Callback>
 8003ec4:	e002      	b.n	8003ecc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 fec4 	bl	8009c54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d103      	bne.n	8003ede <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f043 0320 	orr.w	r3, r3, #32
 8003edc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e11f      	b.n	8004146 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fcea 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f58:	f001 f9de 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4a7b      	ldr	r2, [pc, #492]	; (8004150 <HAL_I2C_Init+0x25c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d807      	bhi.n	8003f78 <HAL_I2C_Init+0x84>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a7a      	ldr	r2, [pc, #488]	; (8004154 <HAL_I2C_Init+0x260>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bf94      	ite	ls
 8003f70:	2301      	movls	r3, #1
 8003f72:	2300      	movhi	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	e006      	b.n	8003f86 <HAL_I2C_Init+0x92>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a77      	ldr	r2, [pc, #476]	; (8004158 <HAL_I2C_Init+0x264>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bf94      	ite	ls
 8003f80:	2301      	movls	r3, #1
 8003f82:	2300      	movhi	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0db      	b.n	8004146 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a72      	ldr	r2, [pc, #456]	; (800415c <HAL_I2C_Init+0x268>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0c9b      	lsrs	r3, r3, #18
 8003f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a64      	ldr	r2, [pc, #400]	; (8004150 <HAL_I2C_Init+0x25c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d802      	bhi.n	8003fc8 <HAL_I2C_Init+0xd4>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	e009      	b.n	8003fdc <HAL_I2C_Init+0xe8>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	4a63      	ldr	r2, [pc, #396]	; (8004160 <HAL_I2C_Init+0x26c>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	3301      	adds	r3, #1
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4956      	ldr	r1, [pc, #344]	; (8004150 <HAL_I2C_Init+0x25c>)
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	d80d      	bhi.n	8004018 <HAL_I2C_Init+0x124>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e59      	subs	r1, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fbb1 f3f3 	udiv	r3, r1, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	2b04      	cmp	r3, #4
 8004012:	bf38      	it	cc
 8004014:	2304      	movcc	r3, #4
 8004016:	e04f      	b.n	80040b8 <HAL_I2C_Init+0x1c4>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d111      	bne.n	8004044 <HAL_I2C_Init+0x150>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e58      	subs	r0, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	440b      	add	r3, r1
 800402e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e012      	b.n	800406a <HAL_I2C_Init+0x176>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e58      	subs	r0, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	0099      	lsls	r1, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Init+0x17e>
 800406e:	2301      	movs	r3, #1
 8004070:	e022      	b.n	80040b8 <HAL_I2C_Init+0x1c4>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10e      	bne.n	8004098 <HAL_I2C_Init+0x1a4>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1e58      	subs	r0, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	440b      	add	r3, r1
 8004088:	fbb0 f3f3 	udiv	r3, r0, r3
 800408c:	3301      	adds	r3, #1
 800408e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004096:	e00f      	b.n	80040b8 <HAL_I2C_Init+0x1c4>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1e58      	subs	r0, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6859      	ldr	r1, [r3, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	0099      	lsls	r1, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ae:	3301      	adds	r3, #1
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	6809      	ldr	r1, [r1, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6911      	ldr	r1, [r2, #16]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68d2      	ldr	r2, [r2, #12]
 80040f2:	4311      	orrs	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	000186a0 	.word	0x000186a0
 8004154:	001e847f 	.word	0x001e847f
 8004158:	003d08ff 	.word	0x003d08ff
 800415c:	431bde83 	.word	0x431bde83
 8004160:	10624dd3 	.word	0x10624dd3

08004164 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e128      	b.n	80043c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a90      	ldr	r2, [pc, #576]	; (80043d0 <HAL_I2S_Init+0x26c>)
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fd fbf7 	bl	8001984 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041ac:	f023 030f 	bic.w	r3, r3, #15
 80041b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2202      	movs	r2, #2
 80041b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d060      	beq.n	8004284 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80041ca:	2310      	movs	r3, #16
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e001      	b.n	80041d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d802      	bhi.n	80041e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80041e2:	2001      	movs	r0, #1
 80041e4:	f001 f9a2 	bl	800552c <HAL_RCCEx_GetPeriphCLKFreq>
 80041e8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f2:	d125      	bne.n	8004240 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	fbb2 f2f3 	udiv	r2, r2, r3
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	3305      	adds	r3, #5
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e01f      	b.n	800425e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	3305      	adds	r3, #5
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e00e      	b.n	800425e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	fbb2 f2f3 	udiv	r2, r2, r3
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	3305      	adds	r3, #5
 800425c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4a5c      	ldr	r2, [pc, #368]	; (80043d4 <HAL_I2S_Init+0x270>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	08db      	lsrs	r3, r3, #3
 8004268:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004284:	2302      	movs	r3, #2
 8004286:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d902      	bls.n	8004298 <HAL_I2S_Init+0x134>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2bff      	cmp	r3, #255	; 0xff
 8004296:	d907      	bls.n	80042a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f043 0210 	orr.w	r2, r3, #16
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e08f      	b.n	80043c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	ea42 0103 	orr.w	r1, r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042c6:	f023 030f 	bic.w	r3, r3, #15
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6851      	ldr	r1, [r2, #4]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6892      	ldr	r2, [r2, #8]
 80042d2:	4311      	orrs	r1, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68d2      	ldr	r2, [r2, #12]
 80042d8:	4311      	orrs	r1, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6992      	ldr	r2, [r2, #24]
 80042de:	430a      	orrs	r2, r1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d161      	bne.n	80043b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_I2S_Init+0x274>)
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_I2S_Init+0x278>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_I2S_Init+0x1a4>
 8004304:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_I2S_Init+0x27c>)
 8004306:	e001      	b.n	800430c <HAL_I2S_Init+0x1a8>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4932      	ldr	r1, [pc, #200]	; (80043dc <HAL_I2S_Init+0x278>)
 8004314:	428a      	cmp	r2, r1
 8004316:	d101      	bne.n	800431c <HAL_I2S_Init+0x1b8>
 8004318:	4a31      	ldr	r2, [pc, #196]	; (80043e0 <HAL_I2S_Init+0x27c>)
 800431a:	e001      	b.n	8004320 <HAL_I2S_Init+0x1bc>
 800431c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004320:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004324:	f023 030f 	bic.w	r3, r3, #15
 8004328:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <HAL_I2S_Init+0x278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_I2S_Init+0x1d4>
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_I2S_Init+0x27c>)
 8004336:	e001      	b.n	800433c <HAL_I2S_Init+0x1d8>
 8004338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433c:	2202      	movs	r2, #2
 800433e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a25      	ldr	r2, [pc, #148]	; (80043dc <HAL_I2S_Init+0x278>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <HAL_I2S_Init+0x1ea>
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_I2S_Init+0x27c>)
 800434c:	e001      	b.n	8004352 <HAL_I2S_Init+0x1ee>
 800434e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435e:	d003      	beq.n	8004368 <HAL_I2S_Init+0x204>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d103      	bne.n	8004370 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e001      	b.n	8004374 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	b299      	uxth	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800438a:	4303      	orrs	r3, r0
 800438c:	b29b      	uxth	r3, r3
 800438e:	430b      	orrs	r3, r1
 8004390:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004392:	4313      	orrs	r3, r2
 8004394:	b29a      	uxth	r2, r3
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	4313      	orrs	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <HAL_I2S_Init+0x278>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <HAL_I2S_Init+0x24c>
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_I2S_Init+0x27c>)
 80043ae:	e001      	b.n	80043b4 <HAL_I2S_Init+0x250>
 80043b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b4:	897a      	ldrh	r2, [r7, #10]
 80043b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	080044db 	.word	0x080044db
 80043d4:	cccccccd 	.word	0xcccccccd
 80043d8:	080045f1 	.word	0x080045f1
 80043dc:	40003800 	.word	0x40003800
 80043e0:	40003400 	.word	0x40003400

080043e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	881a      	ldrh	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	1c9a      	adds	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004464:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ffb8 	bl	80043e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	b292      	uxth	r2, r2
 8004490:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10e      	bne.n	80044d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff93 	bl	80043f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d13a      	bne.n	800456c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d109      	bne.n	8004514 <I2S_IRQHandler+0x3a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d102      	bne.n	8004514 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff ffb4 	bl	800447c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d126      	bne.n	800456c <I2S_IRQHandler+0x92>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d11f      	bne.n	800456c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800453a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f043 0202 	orr.w	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff ff50 	bl	800440c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b03      	cmp	r3, #3
 8004576:	d136      	bne.n	80045e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d109      	bne.n	8004596 <I2S_IRQHandler+0xbc>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b80      	cmp	r3, #128	; 0x80
 800458e:	d102      	bne.n	8004596 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff45 	bl	8004420 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d122      	bne.n	80045e6 <I2S_IRQHandler+0x10c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d11b      	bne.n	80045e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f043 0204 	orr.w	r2, r3, #4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff13 	bl	800440c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4aa2      	ldr	r2, [pc, #648]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800460a:	4ba2      	ldr	r3, [pc, #648]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800460c:	e001      	b.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800460e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a9b      	ldr	r2, [pc, #620]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d101      	bne.n	800462c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004628:	4b9a      	ldr	r3, [pc, #616]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800462a:	e001      	b.n	8004630 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800462c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d004      	beq.n	8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8099 	bne.w	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f925 	bl	80048ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9c8 	bl	8004a0c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d13a      	bne.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d035      	beq.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a7e      	ldr	r2, [pc, #504]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800469a:	4b7e      	ldr	r3, [pc, #504]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800469c:	e001      	b.n	80046a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800469e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4979      	ldr	r1, [pc, #484]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046aa:	428b      	cmp	r3, r1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80046ae:	4b79      	ldr	r3, [pc, #484]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046b0:	e001      	b.n	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fe88 	bl	800440c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	f040 80be 	bne.w	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80b8 	beq.w	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004722:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a59      	ldr	r2, [pc, #356]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800472e:	4b59      	ldr	r3, [pc, #356]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004730:	e001      	b.n	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4954      	ldr	r1, [pc, #336]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800473e:	428b      	cmp	r3, r1
 8004740:	d101      	bne.n	8004746 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004742:	4b54      	ldr	r3, [pc, #336]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004744:	e001      	b.n	800474a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800474a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800474e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fe4a 	bl	800440c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004778:	e084      	b.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d107      	bne.n	8004794 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8be 	bl	8004910 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8fd 	bl	80049a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d12f      	bne.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02a      	beq.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2e      	ldr	r2, [pc, #184]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047dc:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047de:	e001      	b.n	80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4929      	ldr	r1, [pc, #164]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047ec:	428b      	cmp	r3, r1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047f0:	4b28      	ldr	r3, [pc, #160]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047f2:	e001      	b.n	80047f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f043 0202 	orr.w	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fdfa 	bl	800440c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b08      	cmp	r3, #8
 8004820:	d131      	bne.n	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02c      	beq.n	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d101      	bne.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004836:	4b17      	ldr	r3, [pc, #92]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004838:	e001      	b.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800483a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4912      	ldr	r1, [pc, #72]	; (8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004846:	428b      	cmp	r3, r1
 8004848:	d101      	bne.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800484c:	e001      	b.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800484e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004852:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004856:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004866:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fdc5 	bl	800440c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	e000      	b.n	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004884:	bf00      	nop
}
 8004886:	bf00      	nop
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40003800 	.word	0x40003800
 8004894:	40003400 	.word	0x40003400

08004898 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c99      	adds	r1, r3, #2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6251      	str	r1, [r2, #36]	; 0x24
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d113      	bne.n	8004906 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ffc9 	bl	8004898 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c99      	adds	r1, r3, #2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6251      	str	r1, [r2, #36]	; 0x24
 8004922:	8819      	ldrh	r1, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <I2SEx_TxISR_I2SExt+0x90>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <I2SEx_TxISR_I2SExt+0x22>
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <I2SEx_TxISR_I2SExt+0x94>)
 8004930:	e001      	b.n	8004936 <I2SEx_TxISR_I2SExt+0x26>
 8004932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004936:	460a      	mov	r2, r1
 8004938:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d121      	bne.n	8004996 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <I2SEx_TxISR_I2SExt+0x90>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <I2SEx_TxISR_I2SExt+0x50>
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <I2SEx_TxISR_I2SExt+0x94>)
 800495e:	e001      	b.n	8004964 <I2SEx_TxISR_I2SExt+0x54>
 8004960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	490d      	ldr	r1, [pc, #52]	; (80049a0 <I2SEx_TxISR_I2SExt+0x90>)
 800496c:	428b      	cmp	r3, r1
 800496e:	d101      	bne.n	8004974 <I2SEx_TxISR_I2SExt+0x64>
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <I2SEx_TxISR_I2SExt+0x94>)
 8004972:	e001      	b.n	8004978 <I2SEx_TxISR_I2SExt+0x68>
 8004974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004978:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800497c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff81 	bl	8004898 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40003800 	.word	0x40003800
 80049a4:	40003400 	.word	0x40003400

080049a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68d8      	ldr	r0, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	1c99      	adds	r1, r3, #2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049c0:	b282      	uxth	r2, r0
 80049c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d113      	bne.n	8004a04 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ff4a 	bl	8004898 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <I2SEx_RxISR_I2SExt+0x90>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <I2SEx_RxISR_I2SExt+0x16>
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <I2SEx_RxISR_I2SExt+0x94>)
 8004a20:	e001      	b.n	8004a26 <I2SEx_RxISR_I2SExt+0x1a>
 8004a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a26:	68d8      	ldr	r0, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	1c99      	adds	r1, r3, #2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a32:	b282      	uxth	r2, r0
 8004a34:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d121      	bne.n	8004a92 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <I2SEx_RxISR_I2SExt+0x90>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d101      	bne.n	8004a5c <I2SEx_RxISR_I2SExt+0x50>
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <I2SEx_RxISR_I2SExt+0x94>)
 8004a5a:	e001      	b.n	8004a60 <I2SEx_RxISR_I2SExt+0x54>
 8004a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	490d      	ldr	r1, [pc, #52]	; (8004a9c <I2SEx_RxISR_I2SExt+0x90>)
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	d101      	bne.n	8004a70 <I2SEx_RxISR_I2SExt+0x64>
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <I2SEx_RxISR_I2SExt+0x94>)
 8004a6e:	e001      	b.n	8004a74 <I2SEx_RxISR_I2SExt+0x68>
 8004a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a78:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff03 	bl	8004898 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40003800 	.word	0x40003800
 8004aa0:	40003400 	.word	0x40003400

08004aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e25b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d075      	beq.n	8004bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ac2:	4ba3      	ldr	r3, [pc, #652]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d00c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ace:	4ba0      	ldr	r3, [pc, #640]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d112      	bne.n	8004b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ada:	4b9d      	ldr	r3, [pc, #628]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	4b99      	ldr	r3, [pc, #612]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d05b      	beq.n	8004bac <HAL_RCC_OscConfig+0x108>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d157      	bne.n	8004bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e236      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b08:	d106      	bne.n	8004b18 <HAL_RCC_OscConfig+0x74>
 8004b0a:	4b91      	ldr	r3, [pc, #580]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a90      	ldr	r2, [pc, #576]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e01d      	b.n	8004b54 <HAL_RCC_OscConfig+0xb0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x98>
 8004b22:	4b8b      	ldr	r3, [pc, #556]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a8a      	ldr	r2, [pc, #552]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b88      	ldr	r3, [pc, #544]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a87      	ldr	r2, [pc, #540]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	4b84      	ldr	r3, [pc, #528]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a83      	ldr	r2, [pc, #524]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b81      	ldr	r3, [pc, #516]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a80      	ldr	r2, [pc, #512]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fd f9aa 	bl	8001eb4 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fd f9a6 	bl	8001eb4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	; 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1fb      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0xc0>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fd f996 	bl	8001eb4 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fd f992 	bl	8001eb4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1e7      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0xe8>
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bba:	4b65      	ldr	r3, [pc, #404]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc6:	4b62      	ldr	r3, [pc, #392]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d11c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b5f      	ldr	r3, [pc, #380]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x152>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1bb      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf6:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4952      	ldr	r1, [pc, #328]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	e03a      	b.n	8004c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c14:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <HAL_RCC_OscConfig+0x2b0>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1a:	f7fd f94b 	bl	8001eb4 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fd f947 	bl	8001eb4 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e19c      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4940      	ldr	r1, [pc, #256]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]
 8004c54:	e015      	b.n	8004c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <HAL_RCC_OscConfig+0x2b0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd f92a 	bl	8001eb4 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fd f926 	bl	8001eb4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e17b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d030      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d016      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fd f90a 	bl	8001eb4 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca4:	f7fd f906 	bl	8001eb4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e15b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x200>
 8004cc2:	e015      	b.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7fd f8f3 	bl	8001eb4 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd2:	f7fd f8ef 	bl	8001eb4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e144      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80a0 	beq.w	8004e3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_OscConfig+0x2b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d121      	bne.n	8004d7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <HAL_RCC_OscConfig+0x2b8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <HAL_RCC_OscConfig+0x2b8>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d46:	f7fd f8b5 	bl	8001eb4 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	e011      	b.n	8004d72 <HAL_RCC_OscConfig+0x2ce>
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	42470000 	.word	0x42470000
 8004d58:	42470e80 	.word	0x42470e80
 8004d5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d60:	f7fd f8a8 	bl	8001eb4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e0fd      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	4b81      	ldr	r3, [pc, #516]	; (8004f78 <HAL_RCC_OscConfig+0x4d4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d106      	bne.n	8004d94 <HAL_RCC_OscConfig+0x2f0>
 8004d86:	4b7d      	ldr	r3, [pc, #500]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4a7c      	ldr	r2, [pc, #496]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70
 8004d92:	e01c      	b.n	8004dce <HAL_RCC_OscConfig+0x32a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b05      	cmp	r3, #5
 8004d9a:	d10c      	bne.n	8004db6 <HAL_RCC_OscConfig+0x312>
 8004d9c:	4b77      	ldr	r3, [pc, #476]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	4a76      	ldr	r2, [pc, #472]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	6713      	str	r3, [r2, #112]	; 0x70
 8004da8:	4b74      	ldr	r3, [pc, #464]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a73      	ldr	r2, [pc, #460]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e00b      	b.n	8004dce <HAL_RCC_OscConfig+0x32a>
 8004db6:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a70      	ldr	r2, [pc, #448]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	4b6e      	ldr	r3, [pc, #440]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a6d      	ldr	r2, [pc, #436]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d015      	beq.n	8004e02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fd f86d 	bl	8001eb4 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fd f869 	bl	8001eb4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0bc      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ee      	beq.n	8004dde <HAL_RCC_OscConfig+0x33a>
 8004e00:	e014      	b.n	8004e2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e02:	f7fd f857 	bl	8001eb4 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fd f853 	bl	8001eb4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0a6      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ee      	bne.n	8004e0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e32:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	4a51      	ldr	r2, [pc, #324]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8092 	beq.w	8004f6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e48:	4b4c      	ldr	r3, [pc, #304]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d05c      	beq.n	8004f0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d141      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b48      	ldr	r3, [pc, #288]	; (8004f80 <HAL_RCC_OscConfig+0x4dc>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fd f827 	bl	8001eb4 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd f823 	bl	8001eb4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e078      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7c:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	019b      	lsls	r3, r3, #6
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	061b      	lsls	r3, r3, #24
 8004eac:	4933      	ldr	r1, [pc, #204]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb2:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <HAL_RCC_OscConfig+0x4dc>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fc fffc 	bl	8001eb4 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fc fff8 	bl	8001eb4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e04d      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x41c>
 8004ede:	e045      	b.n	8004f6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <HAL_RCC_OscConfig+0x4dc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee6:	f7fc ffe5 	bl	8001eb4 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eee:	f7fc ffe1 	bl	8001eb4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e036      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <HAL_RCC_OscConfig+0x44a>
 8004f0c:	e02e      	b.n	8004f6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e029      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f1a:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <HAL_RCC_OscConfig+0x4d8>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d11c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d115      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d10d      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40007000 	.word	0x40007000
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	42470060 	.word	0x42470060

08004f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0cc      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f98:	4b68      	ldr	r3, [pc, #416]	; (800513c <HAL_RCC_ClockConfig+0x1b8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d90c      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b65      	ldr	r3, [pc, #404]	; (800513c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b63      	ldr	r3, [pc, #396]	; (800513c <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0b8      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd8:	4b59      	ldr	r3, [pc, #356]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a58      	ldr	r2, [pc, #352]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff0:	4b53      	ldr	r3, [pc, #332]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4a52      	ldr	r2, [pc, #328]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	494d      	ldr	r1, [pc, #308]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d044      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d119      	bne.n	8005062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e07f      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d003      	beq.n	8005042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503e:	2b03      	cmp	r3, #3
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005042:	4b3f      	ldr	r3, [pc, #252]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e06f      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005052:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e067      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4934      	ldr	r1, [pc, #208]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005074:	f7fc ff1e 	bl	8001eb4 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	e00a      	b.n	8005092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507c:	f7fc ff1a 	bl	8001eb4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e04f      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 020c 	and.w	r2, r3, #12
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d1eb      	bne.n	800507c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a4:	4b25      	ldr	r3, [pc, #148]	; (800513c <HAL_RCC_ClockConfig+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d20c      	bcs.n	80050cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b22      	ldr	r3, [pc, #136]	; (800513c <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e032      	b.n	8005132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4916      	ldr	r1, [pc, #88]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	490e      	ldr	r1, [pc, #56]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800510a:	f000 f821 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 800510e:	4601      	mov	r1, r0
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 800511c:	5cd3      	ldrb	r3, [r2, r3]
 800511e:	fa21 f303 	lsr.w	r3, r1, r3
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc fe7e 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40023c00 	.word	0x40023c00
 8005140:	40023800 	.word	0x40023800
 8005144:	0800ab8c 	.word	0x0800ab8c
 8005148:	20000000 	.word	0x20000000
 800514c:	20000004 	.word	0x20000004

08005150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	2300      	movs	r3, #0
 8005160:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005166:	4b63      	ldr	r3, [pc, #396]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b04      	cmp	r3, #4
 8005170:	d007      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x32>
 8005172:	2b08      	cmp	r3, #8
 8005174:	d008      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x38>
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 80b4 	bne.w	80052e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800517e:	60bb      	str	r3, [r7, #8]
       break;
 8005180:	e0b3      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005182:	4b5e      	ldr	r3, [pc, #376]	; (80052fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005184:	60bb      	str	r3, [r7, #8]
      break;
 8005186:	e0b0      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005188:	4b5a      	ldr	r3, [pc, #360]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005192:	4b58      	ldr	r3, [pc, #352]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04a      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519e:	4b55      	ldr	r3, [pc, #340]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	ea03 0501 	and.w	r5, r3, r1
 80051b4:	ea04 0602 	and.w	r6, r4, r2
 80051b8:	4629      	mov	r1, r5
 80051ba:	4632      	mov	r2, r6
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	0154      	lsls	r4, r2, #5
 80051c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051ca:	014b      	lsls	r3, r1, #5
 80051cc:	4619      	mov	r1, r3
 80051ce:	4622      	mov	r2, r4
 80051d0:	1b49      	subs	r1, r1, r5
 80051d2:	eb62 0206 	sbc.w	r2, r2, r6
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	0194      	lsls	r4, r2, #6
 80051e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051e4:	018b      	lsls	r3, r1, #6
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	eb64 0402 	sbc.w	r4, r4, r2
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	00e2      	lsls	r2, r4, #3
 80051f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051fa:	00d9      	lsls	r1, r3, #3
 80051fc:	460b      	mov	r3, r1
 80051fe:	4614      	mov	r4, r2
 8005200:	195b      	adds	r3, r3, r5
 8005202:	eb44 0406 	adc.w	r4, r4, r6
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	0262      	lsls	r2, r4, #9
 8005210:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005214:	0259      	lsls	r1, r3, #9
 8005216:	460b      	mov	r3, r1
 8005218:	4614      	mov	r4, r2
 800521a:	4618      	mov	r0, r3
 800521c:	4621      	mov	r1, r4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	f7fb f82a 	bl	8000280 <__aeabi_uldivmod>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e049      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005234:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	099b      	lsrs	r3, r3, #6
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	ea03 0501 	and.w	r5, r3, r1
 800524a:	ea04 0602 	and.w	r6, r4, r2
 800524e:	4629      	mov	r1, r5
 8005250:	4632      	mov	r2, r6
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	0154      	lsls	r4, r2, #5
 800525c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005260:	014b      	lsls	r3, r1, #5
 8005262:	4619      	mov	r1, r3
 8005264:	4622      	mov	r2, r4
 8005266:	1b49      	subs	r1, r1, r5
 8005268:	eb62 0206 	sbc.w	r2, r2, r6
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	0194      	lsls	r4, r2, #6
 8005276:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800527a:	018b      	lsls	r3, r1, #6
 800527c:	1a5b      	subs	r3, r3, r1
 800527e:	eb64 0402 	sbc.w	r4, r4, r2
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	00e2      	lsls	r2, r4, #3
 800528c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005290:	00d9      	lsls	r1, r3, #3
 8005292:	460b      	mov	r3, r1
 8005294:	4614      	mov	r4, r2
 8005296:	195b      	adds	r3, r3, r5
 8005298:	eb44 0406 	adc.w	r4, r4, r6
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	02a2      	lsls	r2, r4, #10
 80052a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052aa:	0299      	lsls	r1, r3, #10
 80052ac:	460b      	mov	r3, r1
 80052ae:	4614      	mov	r4, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	4621      	mov	r1, r4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	461a      	mov	r2, r3
 80052bc:	4623      	mov	r3, r4
 80052be:	f7fa ffdf 	bl	8000280 <__aeabi_uldivmod>
 80052c2:	4603      	mov	r3, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	3301      	adds	r3, #1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	60bb      	str	r3, [r7, #8]
      break;
 80052e2:	e002      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052e6:	60bb      	str	r3, [r7, #8]
      break;
 80052e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ea:	68bb      	ldr	r3, [r7, #8]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f4:	40023800 	.word	0x40023800
 80052f8:	00f42400 	.word	0x00f42400
 80052fc:	007a1200 	.word	0x007a1200

08005300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005304:	4b03      	ldr	r3, [pc, #12]	; (8005314 <HAL_RCC_GetHCLKFreq+0x14>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000000 	.word	0x20000000

08005318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800531c:	f7ff fff0 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8005320:	4601      	mov	r1, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0a9b      	lsrs	r3, r3, #10
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <HAL_RCC_GetPCLK1Freq+0x24>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	0800ab9c 	.word	0x0800ab9c

08005340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005344:	f7ff ffdc 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8005348:	4601      	mov	r1, r0
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	0b5b      	lsrs	r3, r3, #13
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	4a03      	ldr	r2, [pc, #12]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40023800 	.word	0x40023800
 8005364:	0800ab9c 	.word	0x0800ab9c

08005368 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800538c:	2b00      	cmp	r3, #0
 800538e:	d035      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005390:	4b62      	ldr	r3, [pc, #392]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005396:	f7fc fd8d 	bl	8001eb4 <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800539e:	f7fc fd89 	bl	8001eb4 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e0b0      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053b0:	4b5b      	ldr	r3, [pc, #364]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	019a      	lsls	r2, r3, #6
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	071b      	lsls	r3, r3, #28
 80053c8:	4955      	ldr	r1, [pc, #340]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053d0:	4b52      	ldr	r3, [pc, #328]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053d6:	f7fc fd6d 	bl	8001eb4 <HAL_GetTick>
 80053da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053de:	f7fc fd69 	bl	8001eb4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e090      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053f0:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8083 	beq.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b44      	ldr	r3, [pc, #272]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	4a43      	ldr	r2, [pc, #268]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005418:	6413      	str	r3, [r2, #64]	; 0x40
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005426:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3e      	ldr	r2, [pc, #248]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005432:	f7fc fd3f 	bl	8001eb4 <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7fc fd3b 	bl	8001eb4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e062      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800544c:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005458:	4b31      	ldr	r3, [pc, #196]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005460:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02f      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d028      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005476:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005480:	4b29      	ldr	r3, [pc, #164]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005486:	4b28      	ldr	r3, [pc, #160]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800548c:	4a24      	ldr	r2, [pc, #144]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d114      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800549e:	f7fc fd09 	bl	8001eb4 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a4:	e00a      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a6:	f7fc fd05 	bl	8001eb4 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d901      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e02a      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ee      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d4:	d10d      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054d6:	4b12      	ldr	r3, [pc, #72]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	490d      	ldr	r1, [pc, #52]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]
 80054f0:	e005      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054fc:	6093      	str	r3, [r2, #8]
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550a:	4905      	ldr	r1, [pc, #20]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800550c:	4313      	orrs	r3, r2
 800550e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	42470068 	.word	0x42470068
 8005520:	40023800 	.word	0x40023800
 8005524:	40007000 	.word	0x40007000
 8005528:	42470e40 	.word	0x42470e40

0800552c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d13d      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800554a:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005552:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800555a:	2b01      	cmp	r3, #1
 800555c:	d12f      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800555e:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005560:	617b      	str	r3, [r7, #20]
          break;
 8005562:	e02f      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005570:	d108      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005572:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e007      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ae:	0f1b      	lsrs	r3, r3, #28
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
          break;
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
          break;
 80055c2:	bf00      	nop
        }
      }
      break;
 80055c4:	bf00      	nop
    }
  }
  return frequency;
 80055c6:	697b      	ldr	r3, [r7, #20]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40023800 	.word	0x40023800
 80055d8:	00bb8000 	.word	0x00bb8000
 80055dc:	007a1200 	.word	0x007a1200
 80055e0:	00f42400 	.word	0x00f42400

080055e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e056      	b.n	80056a4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fc fa1f 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	ea42 0103 	orr.w	r1, r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	0c1b      	lsrs	r3, r3, #16
 8005674:	f003 0104 	and.w	r1, r3, #4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e01d      	b.n	80056fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fc fa06 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fa64 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d007      	beq.n	8005734 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d007      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <HAL_TIM_Base_Stop_IT+0x48>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	f240 4344 	movw	r3, #1092	; 0x444
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <HAL_TIM_Base_Stop_IT+0x48>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0202 	mvn.w	r2, #2
 8005814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9a5 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f997 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f9a8 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0204 	mvn.w	r2, #4
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f97b 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f96d 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f97e 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0208 	mvn.w	r2, #8
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2204      	movs	r2, #4
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f951 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f943 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f954 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0210 	mvn.w	r2, #16
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2208      	movs	r2, #8
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f927 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f919 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f92a 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0201 	mvn.w	r2, #1
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb feaa 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fad0 	bl	8005f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d10e      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d107      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8ef 	bl	8005ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0220 	mvn.w	r2, #32
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa9a 	bl	8005f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIM_ConfigClockSource+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e0a6      	b.n	8005b5e <HAL_TIM_ConfigClockSource+0x166>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d067      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x120>
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d80b      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x6c>
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d073      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x140>
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d802      	bhi.n	8005a5a <HAL_TIM_ConfigClockSource+0x62>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d06f      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a58:	e078      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d06c      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x140>
 8005a5e:	2b30      	cmp	r3, #48	; 0x30
 8005a60:	d06a      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005a62:	e073      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a64:	2b70      	cmp	r3, #112	; 0x70
 8005a66:	d00d      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0x8c>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d804      	bhi.n	8005a76 <HAL_TIM_ConfigClockSource+0x7e>
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d033      	beq.n	8005ad8 <HAL_TIM_ConfigClockSource+0xe0>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d041      	beq.n	8005af8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a74:	e06a      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d066      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x152>
 8005a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a80:	d017      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a82:	e063      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6899      	ldr	r1, [r3, #8]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f000 f9aa 	bl	8005dec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
      break;
 8005ab0:	e04c      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6899      	ldr	r1, [r3, #8]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f000 f993 	bl	8005dec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad4:	609a      	str	r2, [r3, #8]
      break;
 8005ad6:	e039      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f000 f907 	bl	8005cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2150      	movs	r1, #80	; 0x50
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f960 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005af6:	e029      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	461a      	mov	r2, r3
 8005b06:	f000 f926 	bl	8005d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2160      	movs	r1, #96	; 0x60
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f950 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005b16:	e019      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	461a      	mov	r2, r3
 8005b26:	f000 f8e7 	bl	8005cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2140      	movs	r1, #64	; 0x40
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f940 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005b36:	e009      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 f937 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005b48:	e000      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a40      	ldr	r2, [pc, #256]	; (8005ccc <TIM_Base_SetConfig+0x114>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d00f      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3d      	ldr	r2, [pc, #244]	; (8005cd0 <TIM_Base_SetConfig+0x118>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3c      	ldr	r2, [pc, #240]	; (8005cd4 <TIM_Base_SetConfig+0x11c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3b      	ldr	r2, [pc, #236]	; (8005cd8 <TIM_Base_SetConfig+0x120>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3a      	ldr	r2, [pc, #232]	; (8005cdc <TIM_Base_SetConfig+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d108      	bne.n	8005c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	; (8005ccc <TIM_Base_SetConfig+0x114>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d02b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d027      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <TIM_Base_SetConfig+0x118>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d023      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <TIM_Base_SetConfig+0x11c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <TIM_Base_SetConfig+0x120>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <TIM_Base_SetConfig+0x124>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d017      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <TIM_Base_SetConfig+0x128>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a27      	ldr	r2, [pc, #156]	; (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <TIM_Base_SetConfig+0x130>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <TIM_Base_SetConfig+0x134>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a24      	ldr	r2, [pc, #144]	; (8005cf0 <TIM_Base_SetConfig+0x138>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <TIM_Base_SetConfig+0x13c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d108      	bne.n	8005c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <TIM_Base_SetConfig+0x114>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <TIM_Base_SetConfig+0x124>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d103      	bne.n	8005cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	615a      	str	r2, [r3, #20]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40010400 	.word	0x40010400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800
 8005cec:	40001800 	.word	0x40001800
 8005cf0:	40001c00 	.word	0x40001c00
 8005cf4:	40002000 	.word	0x40002000

08005cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 030a 	bic.w	r3, r3, #10
 8005d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b087      	sub	sp, #28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0210 	bic.w	r2, r3, #16
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	031b      	lsls	r3, r3, #12
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f043 0307 	orr.w	r3, r3, #7
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	021a      	lsls	r2, r3, #8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e05a      	b.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d022      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d01d      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40001800 	.word	0x40001800

08005f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e03f      	b.n	8005fde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fdf2 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2224      	movs	r2, #36	; 0x24
 8005f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb97 	bl	80066c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b088      	sub	sp, #32
 8005fea:	af02      	add	r7, sp, #8
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b20      	cmp	r3, #32
 8006004:	f040 8083 	bne.w	800610e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_UART_Transmit+0x2e>
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e07b      	b.n	8006110 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_UART_Transmit+0x40>
 8006022:	2302      	movs	r3, #2
 8006024:	e074      	b.n	8006110 <HAL_UART_Transmit+0x12a>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2221      	movs	r2, #33	; 0x21
 8006038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800603c:	f7fb ff3a 	bl	8001eb4 <HAL_GetTick>
 8006040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	88fa      	ldrh	r2, [r7, #6]
 800604c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006056:	e042      	b.n	80060de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606e:	d122      	bne.n	80060b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2200      	movs	r2, #0
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f9b6 	bl	80063ec <UART_WaitOnFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e042      	b.n	8006110 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800609c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	3302      	adds	r3, #2
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	e017      	b.n	80060de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	e013      	b.n	80060de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f993 	bl	80063ec <UART_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e01f      	b.n	8006110 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	60ba      	str	r2, [r7, #8]
 80060d6:	781a      	ldrb	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1b7      	bne.n	8006058 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2140      	movs	r1, #64	; 0x40
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f97a 	bl	80063ec <UART_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e006      	b.n	8006110 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e000      	b.n	8006110 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800610e:	2302      	movs	r3, #2
  }
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b20      	cmp	r3, #32
 8006130:	d140      	bne.n	80061b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_UART_Receive_IT+0x26>
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e039      	b.n	80061b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_UART_Receive_IT+0x38>
 800614c:	2302      	movs	r3, #2
 800614e:	e032      	b.n	80061b6 <HAL_UART_Receive_IT+0x9e>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2222      	movs	r2, #34	; 0x22
 8006174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800618e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0220 	orr.w	r2, r2, #32
 80061ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_UART_IRQHandler+0x52>
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9d6 	bl	80065c0 <UART_Receive_IT>
      return;
 8006214:	e0d1      	b.n	80063ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80b0 	beq.w	800637e <HAL_UART_IRQHandler+0x1ba>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_UART_IRQHandler+0x70>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80a5 	beq.w	800637e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_UART_IRQHandler+0x90>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624c:	f043 0201 	orr.w	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_UART_IRQHandler+0xb0>
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	f043 0202 	orr.w	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_UART_IRQHandler+0xd0>
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628c:	f043 0204 	orr.w	r2, r3, #4
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <HAL_UART_IRQHandler+0xfa>
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <HAL_UART_IRQHandler+0xee>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	f043 0208 	orr.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d078      	beq.n	80063b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_UART_IRQHandler+0x11c>
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f970 	bl	80065c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	bf0c      	ite	eq
 80062ee:	2301      	moveq	r3, #1
 80062f0:	2300      	movne	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_UART_IRQHandler+0x144>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d031      	beq.n	800636c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8b9 	bl	8006480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d123      	bne.n	8006364 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695a      	ldr	r2, [r3, #20]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	2b00      	cmp	r3, #0
 8006332:	d013      	beq.n	800635c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <HAL_UART_IRQHandler+0x1fc>)
 800633a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	4618      	mov	r0, r3
 8006342:	f7fb fef6 	bl	8002132 <HAL_DMA_Abort_IT>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006356:	4610      	mov	r0, r2
 8006358:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635a:	e00e      	b.n	800637a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f83b 	bl	80063d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006362:	e00a      	b.n	800637a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f837 	bl	80063d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636a:	e006      	b.n	800637a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f833 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006378:	e01e      	b.n	80063b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637a:	bf00      	nop
    return;
 800637c:	e01c      	b.n	80063b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_UART_IRQHandler+0x1d6>
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f8a6 	bl	80064e4 <UART_Transmit_IT>
    return;
 8006398:	e00f      	b.n	80063ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <HAL_UART_IRQHandler+0x1f6>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8ee 	bl	8006590 <UART_EndTransmit_IT>
    return;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80063b8:	bf00      	nop
  }
}
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	080064bd 	.word	0x080064bd

080063c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fc:	e02c      	b.n	8006458 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006404:	d028      	beq.n	8006458 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <UART_WaitOnFlagUntilTimeout+0x30>
 800640c:	f7fb fd52 	bl	8001eb4 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	d21d      	bcs.n	8006458 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800642a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e00f      	b.n	8006478 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	bf0c      	ite	eq
 8006468:	2301      	moveq	r3, #1
 800646a:	2300      	movne	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	429a      	cmp	r2, r3
 8006474:	d0c3      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006496:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff ff7e 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b21      	cmp	r3, #33	; 0x21
 80064f6:	d144      	bne.n	8006582 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d11a      	bne.n	8006538 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006516:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	1c9a      	adds	r2, r3, #2
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	621a      	str	r2, [r3, #32]
 800652a:	e00e      	b.n	800654a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	621a      	str	r2, [r3, #32]
 8006536:	e008      	b.n	800654a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	1c59      	adds	r1, r3, #1
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6211      	str	r1, [r2, #32]
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4619      	mov	r1, r3
 8006558:	84d1      	strh	r1, [r2, #38]	; 0x26
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10f      	bne.n	800657e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800656c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ff07 	bl	80063c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b22      	cmp	r3, #34	; 0x22
 80065d2:	d171      	bne.n	80066b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d123      	bne.n	8006626 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10e      	bne.n	800660a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
 8006608:	e029      	b.n	800665e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	b29b      	uxth	r3, r3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28
 8006624:	e01b      	b.n	800665e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6858      	ldr	r0, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6291      	str	r1, [r2, #40]	; 0x28
 800663e:	b2c2      	uxtb	r2, r0
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	e00c      	b.n	800665e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	1c58      	adds	r0, r3, #1
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	6288      	str	r0, [r1, #40]	; 0x28
 8006656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	4619      	mov	r1, r3
 800666c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800666e:	2b00      	cmp	r3, #0
 8006670:	d120      	bne.n	80066b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0220 	bic.w	r2, r2, #32
 8006680:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fa ffde 	bl	800166c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e002      	b.n	80066ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006706:	f023 030c 	bic.w	r3, r3, #12
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	68f9      	ldr	r1, [r7, #12]
 8006710:	430b      	orrs	r3, r1
 8006712:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006732:	f040 818b 	bne.w	8006a4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4ac1      	ldr	r2, [pc, #772]	; (8006a40 <UART_SetConfig+0x37c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d005      	beq.n	800674c <UART_SetConfig+0x88>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4abf      	ldr	r2, [pc, #764]	; (8006a44 <UART_SetConfig+0x380>)
 8006746:	4293      	cmp	r3, r2
 8006748:	f040 80bd 	bne.w	80068c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7fe fdf8 	bl	8005340 <HAL_RCC_GetPCLK2Freq>
 8006750:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	461d      	mov	r5, r3
 8006756:	f04f 0600 	mov.w	r6, #0
 800675a:	46a8      	mov	r8, r5
 800675c:	46b1      	mov	r9, r6
 800675e:	eb18 0308 	adds.w	r3, r8, r8
 8006762:	eb49 0409 	adc.w	r4, r9, r9
 8006766:	4698      	mov	r8, r3
 8006768:	46a1      	mov	r9, r4
 800676a:	eb18 0805 	adds.w	r8, r8, r5
 800676e:	eb49 0906 	adc.w	r9, r9, r6
 8006772:	f04f 0100 	mov.w	r1, #0
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800677e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006782:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006786:	4688      	mov	r8, r1
 8006788:	4691      	mov	r9, r2
 800678a:	eb18 0005 	adds.w	r0, r8, r5
 800678e:	eb49 0106 	adc.w	r1, r9, r6
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	461d      	mov	r5, r3
 8006798:	f04f 0600 	mov.w	r6, #0
 800679c:	196b      	adds	r3, r5, r5
 800679e:	eb46 0406 	adc.w	r4, r6, r6
 80067a2:	461a      	mov	r2, r3
 80067a4:	4623      	mov	r3, r4
 80067a6:	f7f9 fd6b 	bl	8000280 <__aeabi_uldivmod>
 80067aa:	4603      	mov	r3, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	461a      	mov	r2, r3
 80067b0:	4ba5      	ldr	r3, [pc, #660]	; (8006a48 <UART_SetConfig+0x384>)
 80067b2:	fba3 2302 	umull	r2, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	461d      	mov	r5, r3
 80067c0:	f04f 0600 	mov.w	r6, #0
 80067c4:	46a9      	mov	r9, r5
 80067c6:	46b2      	mov	sl, r6
 80067c8:	eb19 0309 	adds.w	r3, r9, r9
 80067cc:	eb4a 040a 	adc.w	r4, sl, sl
 80067d0:	4699      	mov	r9, r3
 80067d2:	46a2      	mov	sl, r4
 80067d4:	eb19 0905 	adds.w	r9, r9, r5
 80067d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80067dc:	f04f 0100 	mov.w	r1, #0
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067f0:	4689      	mov	r9, r1
 80067f2:	4692      	mov	sl, r2
 80067f4:	eb19 0005 	adds.w	r0, r9, r5
 80067f8:	eb4a 0106 	adc.w	r1, sl, r6
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	461d      	mov	r5, r3
 8006802:	f04f 0600 	mov.w	r6, #0
 8006806:	196b      	adds	r3, r5, r5
 8006808:	eb46 0406 	adc.w	r4, r6, r6
 800680c:	461a      	mov	r2, r3
 800680e:	4623      	mov	r3, r4
 8006810:	f7f9 fd36 	bl	8000280 <__aeabi_uldivmod>
 8006814:	4603      	mov	r3, r0
 8006816:	460c      	mov	r4, r1
 8006818:	461a      	mov	r2, r3
 800681a:	4b8b      	ldr	r3, [pc, #556]	; (8006a48 <UART_SetConfig+0x384>)
 800681c:	fba3 1302 	umull	r1, r3, r3, r2
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	2164      	movs	r1, #100	; 0x64
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	3332      	adds	r3, #50	; 0x32
 800682e:	4a86      	ldr	r2, [pc, #536]	; (8006a48 <UART_SetConfig+0x384>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800683c:	4498      	add	r8, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	461d      	mov	r5, r3
 8006842:	f04f 0600 	mov.w	r6, #0
 8006846:	46a9      	mov	r9, r5
 8006848:	46b2      	mov	sl, r6
 800684a:	eb19 0309 	adds.w	r3, r9, r9
 800684e:	eb4a 040a 	adc.w	r4, sl, sl
 8006852:	4699      	mov	r9, r3
 8006854:	46a2      	mov	sl, r4
 8006856:	eb19 0905 	adds.w	r9, r9, r5
 800685a:	eb4a 0a06 	adc.w	sl, sl, r6
 800685e:	f04f 0100 	mov.w	r1, #0
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800686a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800686e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006872:	4689      	mov	r9, r1
 8006874:	4692      	mov	sl, r2
 8006876:	eb19 0005 	adds.w	r0, r9, r5
 800687a:	eb4a 0106 	adc.w	r1, sl, r6
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	461d      	mov	r5, r3
 8006884:	f04f 0600 	mov.w	r6, #0
 8006888:	196b      	adds	r3, r5, r5
 800688a:	eb46 0406 	adc.w	r4, r6, r6
 800688e:	461a      	mov	r2, r3
 8006890:	4623      	mov	r3, r4
 8006892:	f7f9 fcf5 	bl	8000280 <__aeabi_uldivmod>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	461a      	mov	r2, r3
 800689c:	4b6a      	ldr	r3, [pc, #424]	; (8006a48 <UART_SetConfig+0x384>)
 800689e:	fba3 1302 	umull	r1, r3, r3, r2
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	2164      	movs	r1, #100	; 0x64
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	3332      	adds	r3, #50	; 0x32
 80068b0:	4a65      	ldr	r2, [pc, #404]	; (8006a48 <UART_SetConfig+0x384>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	f003 0207 	and.w	r2, r3, #7
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4442      	add	r2, r8
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	e26f      	b.n	8006da6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068c6:	f7fe fd27 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 80068ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	461d      	mov	r5, r3
 80068d0:	f04f 0600 	mov.w	r6, #0
 80068d4:	46a8      	mov	r8, r5
 80068d6:	46b1      	mov	r9, r6
 80068d8:	eb18 0308 	adds.w	r3, r8, r8
 80068dc:	eb49 0409 	adc.w	r4, r9, r9
 80068e0:	4698      	mov	r8, r3
 80068e2:	46a1      	mov	r9, r4
 80068e4:	eb18 0805 	adds.w	r8, r8, r5
 80068e8:	eb49 0906 	adc.w	r9, r9, r6
 80068ec:	f04f 0100 	mov.w	r1, #0
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006900:	4688      	mov	r8, r1
 8006902:	4691      	mov	r9, r2
 8006904:	eb18 0005 	adds.w	r0, r8, r5
 8006908:	eb49 0106 	adc.w	r1, r9, r6
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	461d      	mov	r5, r3
 8006912:	f04f 0600 	mov.w	r6, #0
 8006916:	196b      	adds	r3, r5, r5
 8006918:	eb46 0406 	adc.w	r4, r6, r6
 800691c:	461a      	mov	r2, r3
 800691e:	4623      	mov	r3, r4
 8006920:	f7f9 fcae 	bl	8000280 <__aeabi_uldivmod>
 8006924:	4603      	mov	r3, r0
 8006926:	460c      	mov	r4, r1
 8006928:	461a      	mov	r2, r3
 800692a:	4b47      	ldr	r3, [pc, #284]	; (8006a48 <UART_SetConfig+0x384>)
 800692c:	fba3 2302 	umull	r2, r3, r3, r2
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	461d      	mov	r5, r3
 800693a:	f04f 0600 	mov.w	r6, #0
 800693e:	46a9      	mov	r9, r5
 8006940:	46b2      	mov	sl, r6
 8006942:	eb19 0309 	adds.w	r3, r9, r9
 8006946:	eb4a 040a 	adc.w	r4, sl, sl
 800694a:	4699      	mov	r9, r3
 800694c:	46a2      	mov	sl, r4
 800694e:	eb19 0905 	adds.w	r9, r9, r5
 8006952:	eb4a 0a06 	adc.w	sl, sl, r6
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006962:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006966:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800696a:	4689      	mov	r9, r1
 800696c:	4692      	mov	sl, r2
 800696e:	eb19 0005 	adds.w	r0, r9, r5
 8006972:	eb4a 0106 	adc.w	r1, sl, r6
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	461d      	mov	r5, r3
 800697c:	f04f 0600 	mov.w	r6, #0
 8006980:	196b      	adds	r3, r5, r5
 8006982:	eb46 0406 	adc.w	r4, r6, r6
 8006986:	461a      	mov	r2, r3
 8006988:	4623      	mov	r3, r4
 800698a:	f7f9 fc79 	bl	8000280 <__aeabi_uldivmod>
 800698e:	4603      	mov	r3, r0
 8006990:	460c      	mov	r4, r1
 8006992:	461a      	mov	r2, r3
 8006994:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <UART_SetConfig+0x384>)
 8006996:	fba3 1302 	umull	r1, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2164      	movs	r1, #100	; 0x64
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	3332      	adds	r3, #50	; 0x32
 80069a8:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <UART_SetConfig+0x384>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069b6:	4498      	add	r8, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	461d      	mov	r5, r3
 80069bc:	f04f 0600 	mov.w	r6, #0
 80069c0:	46a9      	mov	r9, r5
 80069c2:	46b2      	mov	sl, r6
 80069c4:	eb19 0309 	adds.w	r3, r9, r9
 80069c8:	eb4a 040a 	adc.w	r4, sl, sl
 80069cc:	4699      	mov	r9, r3
 80069ce:	46a2      	mov	sl, r4
 80069d0:	eb19 0905 	adds.w	r9, r9, r5
 80069d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069ec:	4689      	mov	r9, r1
 80069ee:	4692      	mov	sl, r2
 80069f0:	eb19 0005 	adds.w	r0, r9, r5
 80069f4:	eb4a 0106 	adc.w	r1, sl, r6
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	461d      	mov	r5, r3
 80069fe:	f04f 0600 	mov.w	r6, #0
 8006a02:	196b      	adds	r3, r5, r5
 8006a04:	eb46 0406 	adc.w	r4, r6, r6
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	f7f9 fc38 	bl	8000280 <__aeabi_uldivmod>
 8006a10:	4603      	mov	r3, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	461a      	mov	r2, r3
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <UART_SetConfig+0x384>)
 8006a18:	fba3 1302 	umull	r1, r3, r3, r2
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	2164      	movs	r1, #100	; 0x64
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	3332      	adds	r3, #50	; 0x32
 8006a2a:	4a07      	ldr	r2, [pc, #28]	; (8006a48 <UART_SetConfig+0x384>)
 8006a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	f003 0207 	and.w	r2, r3, #7
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4442      	add	r2, r8
 8006a3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a3e:	e1b2      	b.n	8006da6 <UART_SetConfig+0x6e2>
 8006a40:	40011000 	.word	0x40011000
 8006a44:	40011400 	.word	0x40011400
 8006a48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4ad7      	ldr	r2, [pc, #860]	; (8006db0 <UART_SetConfig+0x6ec>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d005      	beq.n	8006a62 <UART_SetConfig+0x39e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4ad6      	ldr	r2, [pc, #856]	; (8006db4 <UART_SetConfig+0x6f0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	f040 80d1 	bne.w	8006c04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a62:	f7fe fc6d 	bl	8005340 <HAL_RCC_GetPCLK2Freq>
 8006a66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	469a      	mov	sl, r3
 8006a6c:	f04f 0b00 	mov.w	fp, #0
 8006a70:	46d0      	mov	r8, sl
 8006a72:	46d9      	mov	r9, fp
 8006a74:	eb18 0308 	adds.w	r3, r8, r8
 8006a78:	eb49 0409 	adc.w	r4, r9, r9
 8006a7c:	4698      	mov	r8, r3
 8006a7e:	46a1      	mov	r9, r4
 8006a80:	eb18 080a 	adds.w	r8, r8, sl
 8006a84:	eb49 090b 	adc.w	r9, r9, fp
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a9c:	4688      	mov	r8, r1
 8006a9e:	4691      	mov	r9, r2
 8006aa0:	eb1a 0508 	adds.w	r5, sl, r8
 8006aa4:	eb4b 0609 	adc.w	r6, fp, r9
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4619      	mov	r1, r3
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	f04f 0400 	mov.w	r4, #0
 8006aba:	0094      	lsls	r4, r2, #2
 8006abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ac0:	008b      	lsls	r3, r1, #2
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4623      	mov	r3, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	4631      	mov	r1, r6
 8006aca:	f7f9 fbd9 	bl	8000280 <__aeabi_uldivmod>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4bb8      	ldr	r3, [pc, #736]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	469b      	mov	fp, r3
 8006ae4:	f04f 0c00 	mov.w	ip, #0
 8006ae8:	46d9      	mov	r9, fp
 8006aea:	46e2      	mov	sl, ip
 8006aec:	eb19 0309 	adds.w	r3, r9, r9
 8006af0:	eb4a 040a 	adc.w	r4, sl, sl
 8006af4:	4699      	mov	r9, r3
 8006af6:	46a2      	mov	sl, r4
 8006af8:	eb19 090b 	adds.w	r9, r9, fp
 8006afc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b00:	f04f 0100 	mov.w	r1, #0
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b14:	4689      	mov	r9, r1
 8006b16:	4692      	mov	sl, r2
 8006b18:	eb1b 0509 	adds.w	r5, fp, r9
 8006b1c:	eb4c 060a 	adc.w	r6, ip, sl
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4619      	mov	r1, r3
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	f04f 0400 	mov.w	r4, #0
 8006b32:	0094      	lsls	r4, r2, #2
 8006b34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b38:	008b      	lsls	r3, r1, #2
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4623      	mov	r3, r4
 8006b3e:	4628      	mov	r0, r5
 8006b40:	4631      	mov	r1, r6
 8006b42:	f7f9 fb9d 	bl	8000280 <__aeabi_uldivmod>
 8006b46:	4603      	mov	r3, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2164      	movs	r1, #100	; 0x64
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	3332      	adds	r3, #50	; 0x32
 8006b60:	4a95      	ldr	r2, [pc, #596]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b6c:	4498      	add	r8, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	469b      	mov	fp, r3
 8006b72:	f04f 0c00 	mov.w	ip, #0
 8006b76:	46d9      	mov	r9, fp
 8006b78:	46e2      	mov	sl, ip
 8006b7a:	eb19 0309 	adds.w	r3, r9, r9
 8006b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b82:	4699      	mov	r9, r3
 8006b84:	46a2      	mov	sl, r4
 8006b86:	eb19 090b 	adds.w	r9, r9, fp
 8006b8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	4692      	mov	sl, r2
 8006ba6:	eb1b 0509 	adds.w	r5, fp, r9
 8006baa:	eb4c 060a 	adc.w	r6, ip, sl
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	f04f 0400 	mov.w	r4, #0
 8006bc0:	0094      	lsls	r4, r2, #2
 8006bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bc6:	008b      	lsls	r3, r1, #2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4623      	mov	r3, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	4631      	mov	r1, r6
 8006bd0:	f7f9 fb56 	bl	8000280 <__aeabi_uldivmod>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4b77      	ldr	r3, [pc, #476]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	2164      	movs	r1, #100	; 0x64
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	3332      	adds	r3, #50	; 0x32
 8006bee:	4a72      	ldr	r2, [pc, #456]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	f003 020f 	and.w	r2, r3, #15
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4442      	add	r2, r8
 8006c00:	609a      	str	r2, [r3, #8]
 8006c02:	e0d0      	b.n	8006da6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7fe fb88 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8006c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	469a      	mov	sl, r3
 8006c0e:	f04f 0b00 	mov.w	fp, #0
 8006c12:	46d0      	mov	r8, sl
 8006c14:	46d9      	mov	r9, fp
 8006c16:	eb18 0308 	adds.w	r3, r8, r8
 8006c1a:	eb49 0409 	adc.w	r4, r9, r9
 8006c1e:	4698      	mov	r8, r3
 8006c20:	46a1      	mov	r9, r4
 8006c22:	eb18 080a 	adds.w	r8, r8, sl
 8006c26:	eb49 090b 	adc.w	r9, r9, fp
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c3e:	4688      	mov	r8, r1
 8006c40:	4691      	mov	r9, r2
 8006c42:	eb1a 0508 	adds.w	r5, sl, r8
 8006c46:	eb4b 0609 	adc.w	r6, fp, r9
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	f04f 0400 	mov.w	r4, #0
 8006c5c:	0094      	lsls	r4, r2, #2
 8006c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c62:	008b      	lsls	r3, r1, #2
 8006c64:	461a      	mov	r2, r3
 8006c66:	4623      	mov	r3, r4
 8006c68:	4628      	mov	r0, r5
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	f7f9 fb08 	bl	8000280 <__aeabi_uldivmod>
 8006c70:	4603      	mov	r3, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	461a      	mov	r2, r3
 8006c76:	4b50      	ldr	r3, [pc, #320]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006c78:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	469b      	mov	fp, r3
 8006c86:	f04f 0c00 	mov.w	ip, #0
 8006c8a:	46d9      	mov	r9, fp
 8006c8c:	46e2      	mov	sl, ip
 8006c8e:	eb19 0309 	adds.w	r3, r9, r9
 8006c92:	eb4a 040a 	adc.w	r4, sl, sl
 8006c96:	4699      	mov	r9, r3
 8006c98:	46a2      	mov	sl, r4
 8006c9a:	eb19 090b 	adds.w	r9, r9, fp
 8006c9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ca2:	f04f 0100 	mov.w	r1, #0
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb6:	4689      	mov	r9, r1
 8006cb8:	4692      	mov	sl, r2
 8006cba:	eb1b 0509 	adds.w	r5, fp, r9
 8006cbe:	eb4c 060a 	adc.w	r6, ip, sl
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	f04f 0400 	mov.w	r4, #0
 8006cd4:	0094      	lsls	r4, r2, #2
 8006cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cda:	008b      	lsls	r3, r1, #2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4623      	mov	r3, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	f7f9 facc 	bl	8000280 <__aeabi_uldivmod>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	2164      	movs	r1, #100	; 0x64
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	3332      	adds	r3, #50	; 0x32
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d0e:	4498      	add	r8, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	469b      	mov	fp, r3
 8006d14:	f04f 0c00 	mov.w	ip, #0
 8006d18:	46d9      	mov	r9, fp
 8006d1a:	46e2      	mov	sl, ip
 8006d1c:	eb19 0309 	adds.w	r3, r9, r9
 8006d20:	eb4a 040a 	adc.w	r4, sl, sl
 8006d24:	4699      	mov	r9, r3
 8006d26:	46a2      	mov	sl, r4
 8006d28:	eb19 090b 	adds.w	r9, r9, fp
 8006d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d44:	4689      	mov	r9, r1
 8006d46:	4692      	mov	sl, r2
 8006d48:	eb1b 0509 	adds.w	r5, fp, r9
 8006d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	f04f 0400 	mov.w	r4, #0
 8006d62:	0094      	lsls	r4, r2, #2
 8006d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d68:	008b      	lsls	r3, r1, #2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4631      	mov	r1, r6
 8006d72:	f7f9 fa85 	bl	8000280 <__aeabi_uldivmod>
 8006d76:	4603      	mov	r3, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	2164      	movs	r1, #100	; 0x64
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3332      	adds	r3, #50	; 0x32
 8006d90:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <UART_SetConfig+0x6f4>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4442      	add	r2, r8
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	e7ff      	b.n	8006da6 <UART_SetConfig+0x6e2>
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db0:	40011000 	.word	0x40011000
 8006db4:	40011400 	.word	0x40011400
 8006db8:	51eb851f 	.word	0x51eb851f

08006dbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	f107 001c 	add.w	r0, r7, #28
 8006dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d122      	bne.n	8006e1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d105      	bne.n	8006e0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f94a 	bl	80070a8 <USB_CoreReset>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
 8006e18:	e01a      	b.n	8006e50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f93e 	bl	80070a8 <USB_CoreReset>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
 8006e42:	e005      	b.n	8006e50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10b      	bne.n	8006e6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f043 0206 	orr.w	r2, r3, #6
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e7a:	b004      	add	sp, #16
 8006e7c:	4770      	bx	lr

08006e7e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f043 0201 	orr.w	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f023 0201 	bic.w	r2, r3, #1
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d106      	bne.n	8006eee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e00b      	b.n	8006f06 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]
 8006f00:	e001      	b.n	8006f06 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e003      	b.n	8006f0e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f06:	2032      	movs	r0, #50	; 0x32
 8006f08:	f7fa ffe0 	bl	8001ecc <HAL_Delay>

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	019b      	lsls	r3, r3, #6
 8006f2a:	f043 0220 	orr.w	r2, r3, #32
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <USB_FlushTxFifo+0x48>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d901      	bls.n	8006f44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e006      	b.n	8006f52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d0f0      	beq.n	8006f32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	00030d40 	.word	0x00030d40

08006f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2210      	movs	r2, #16
 8006f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <USB_FlushRxFifo+0x40>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e006      	b.n	8006f96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d0f0      	beq.n	8006f76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	00030d40 	.word	0x00030d40

08006fa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b089      	sub	sp, #36	; 0x24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	71fb      	strb	r3, [r7, #7]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d11a      	bne.n	8007004 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fce:	88bb      	ldrh	r3, [r7, #4]
 8006fd0:	3303      	adds	r3, #3
 8006fd2:	089b      	lsrs	r3, r3, #2
 8006fd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e00f      	b.n	8006ffc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	031a      	lsls	r2, r3, #12
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe8:	461a      	mov	r2, r3
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d3eb      	bcc.n	8006fdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3724      	adds	r7, #36	; 0x24
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007012:	b480      	push	{r7}
 8007014:	b089      	sub	sp, #36	; 0x24
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4613      	mov	r3, r2
 800701e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	3303      	adds	r3, #3
 800702c:	089b      	lsrs	r3, r3, #2
 800702e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	e00b      	b.n	800704e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	601a      	str	r2, [r3, #0]
    pDest++;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	3304      	adds	r3, #4
 8007046:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	3301      	adds	r3, #1
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	d3ef      	bcc.n	8007036 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3724      	adds	r7, #36	; 0x24
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800707c:	68fb      	ldr	r3, [r7, #12]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0301 	and.w	r3, r3, #1
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a13      	ldr	r2, [pc, #76]	; (800710c <USB_CoreReset+0x64>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e01b      	b.n	80070fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	daf2      	bge.n	80070b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f043 0201 	orr.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <USB_CoreReset+0x64>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d901      	bls.n	80070f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e006      	b.n	80070fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d0f0      	beq.n	80070de <USB_CoreReset+0x36>

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	00030d40 	.word	0x00030d40

08007110 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007110:	b084      	sub	sp, #16
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	f107 001c 	add.w	r0, r7, #28
 800711e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d018      	beq.n	8007194 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	2b01      	cmp	r3, #1
 8007166:	d10a      	bne.n	800717e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007176:	f043 0304 	orr.w	r3, r3, #4
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	e014      	b.n	80071a8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800718c:	f023 0304 	bic.w	r3, r3, #4
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	e009      	b.n	80071a8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071a2:	f023 0304 	bic.w	r3, r3, #4
 80071a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80071a8:	2110      	movs	r1, #16
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff feb4 	bl	8006f18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fed7 	bl	8006f64 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e015      	b.n	80071e8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c8:	461a      	mov	r2, r3
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295
 80071ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071dc:	461a      	mov	r2, r3
 80071de:	2300      	movs	r3, #0
 80071e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d3e5      	bcc.n	80071bc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80071f0:	2101      	movs	r1, #1
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f8ac 	bl	8007350 <USB_DriveVbus>

  HAL_Delay(200U);
 80071f8:	20c8      	movs	r0, #200	; 0xc8
 80071fa:	f7fa fe67 	bl	8001ecc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800721e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a14      	ldr	r2, [pc, #80]	; (8007274 <USB_HostInit+0x164>)
 8007224:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a13      	ldr	r2, [pc, #76]	; (8007278 <USB_HostInit+0x168>)
 800722a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800722e:	e009      	b.n	8007244 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a10      	ldr	r2, [pc, #64]	; (800727c <USB_HostInit+0x16c>)
 800723a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a10      	ldr	r2, [pc, #64]	; (8007280 <USB_HostInit+0x170>)
 8007240:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f043 0210 	orr.w	r2, r3, #16
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <USB_HostInit+0x174>)
 800725c:	4313      	orrs	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800726e:	b004      	add	sp, #16
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	01000200 	.word	0x01000200
 8007278:	00e00300 	.word	0x00e00300
 800727c:	00600080 	.word	0x00600080
 8007280:	004000e0 	.word	0x004000e0
 8007284:	a3200008 	.word	0xa3200008

08007288 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072c0:	4313      	orrs	r3, r2
 80072c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d107      	bne.n	80072da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d0:	461a      	mov	r2, r3
 80072d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072d6:	6053      	str	r3, [r2, #4]
 80072d8:	e009      	b.n	80072ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d106      	bne.n	80072ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072e6:	461a      	mov	r2, r3
 80072e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80072ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800731c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800732c:	2064      	movs	r0, #100	; 0x64
 800732e:	f7fa fdcd 	bl	8001ecc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800733a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007340:	200a      	movs	r0, #10
 8007342:	f7fa fdc3 	bl	8001ecc <HAL_Delay>

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007374:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <USB_DriveVbus+0x44>
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d106      	bne.n	8007394 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800738e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007392:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d109      	bne.n	80073b4 <USB_DriveVbus+0x64>
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	0c5b      	lsrs	r3, r3, #17
 80073e0:	f003 0303 	and.w	r3, r3, #3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	b29b      	uxth	r3, r3
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	461a      	mov	r2, r3
 8007422:	4603      	mov	r3, r0
 8007424:	70fb      	strb	r3, [r7, #3]
 8007426:	460b      	mov	r3, r1
 8007428:	70bb      	strb	r3, [r7, #2]
 800742a:	4613      	mov	r3, r2
 800742c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007442:	461a      	mov	r2, r3
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800744a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800744e:	2b03      	cmp	r3, #3
 8007450:	d87e      	bhi.n	8007550 <USB_HC_Init+0x13c>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <USB_HC_Init+0x44>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007469 	.word	0x08007469
 800745c:	08007513 	.word	0x08007513
 8007460:	08007469 	.word	0x08007469
 8007464:	080074d5 	.word	0x080074d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4413      	add	r3, r2
 8007470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007474:	461a      	mov	r2, r3
 8007476:	f240 439d 	movw	r3, #1181	; 0x49d
 800747a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800747c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007480:	2b00      	cmp	r3, #0
 8007482:	da10      	bge.n	80074a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4413      	add	r3, r2
 800748c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	440a      	add	r2, r1
 800749a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800749e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80074a4:	e057      	b.n	8007556 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d051      	beq.n	8007556 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80074d0:	60d3      	str	r3, [r2, #12]
      break;
 80074d2:	e040      	b.n	8007556 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e0:	461a      	mov	r2, r3
 80074e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80074e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	da34      	bge.n	800755a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	440a      	add	r2, r1
 8007506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800750a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007510:	e023      	b.n	800755a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751e:	461a      	mov	r2, r3
 8007520:	f240 2325 	movw	r3, #549	; 0x225
 8007524:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007526:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800752a:	2b00      	cmp	r3, #0
 800752c:	da17      	bge.n	800755e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4413      	add	r3, r2
 8007536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	440a      	add	r2, r1
 8007544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007548:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800754c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800754e:	e006      	b.n	800755e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	e004      	b.n	8007560 <USB_HC_Init+0x14c>
      break;
 8007556:	bf00      	nop
 8007558:	e002      	b.n	8007560 <USB_HC_Init+0x14c>
      break;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <USB_HC_Init+0x14c>
      break;
 800755e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	2101      	movs	r1, #1
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800757a:	4313      	orrs	r3, r2
 800757c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800758a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800758e:	2b00      	cmp	r3, #0
 8007590:	da03      	bge.n	800759a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	e001      	b.n	800759e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800759e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d103      	bne.n	80075ae <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80075a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e001      	b.n	80075b2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075b2:	787b      	ldrb	r3, [r7, #1]
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075ba:	78bb      	ldrb	r3, [r7, #2]
 80075bc:	02db      	lsls	r3, r3, #11
 80075be:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075c2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075c8:	049b      	lsls	r3, r3, #18
 80075ca:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075ce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	0159      	lsls	r1, r3, #5
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	440b      	add	r3, r1
 80075e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075ee:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80075f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d10f      	bne.n	8007618 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	440a      	add	r2, r1
 800760e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007612:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007616:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop

08007628 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	; 0x30
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007644:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	2b00      	cmp	r3, #0
 8007650:	d028      	beq.n	80076a4 <USB_HC_StartXfer+0x7c>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d124      	bne.n	80076a4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <USB_HC_StartXfer+0x50>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	795b      	ldrb	r3, [r3, #5]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d107      	bne.n	8007678 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	4619      	mov	r1, r3
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fa30 	bl	8007ad4 <USB_DoPing>
      return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e114      	b.n	80078a2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d112      	bne.n	80076a4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	4413      	add	r3, r2
 8007686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	440a      	add	r2, r1
 8007694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007698:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800769c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2200      	movs	r2, #0
 80076a2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d018      	beq.n	80076de <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	8912      	ldrh	r2, [r2, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	3b01      	subs	r3, #1
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	8912      	ldrh	r2, [r2, #8]
 80076bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80076c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076c4:	8b7b      	ldrh	r3, [r7, #26]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d90b      	bls.n	80076e2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80076ca:	8b7b      	ldrh	r3, [r7, #26]
 80076cc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80076ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	8912      	ldrh	r2, [r2, #8]
 80076d4:	fb02 f203 	mul.w	r2, r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	611a      	str	r2, [r3, #16]
 80076dc:	e001      	b.n	80076e2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80076de:	2301      	movs	r3, #1
 80076e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	78db      	ldrb	r3, [r3, #3]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d006      	beq.n	80076f8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80076ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	8912      	ldrh	r2, [r2, #8]
 80076f0:	fb02 f203 	mul.w	r2, r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007702:	04d9      	lsls	r1, r3, #19
 8007704:	4b69      	ldr	r3, [pc, #420]	; (80078ac <USB_HC_StartXfer+0x284>)
 8007706:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007708:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	7a9b      	ldrb	r3, [r3, #10]
 800770e:	075b      	lsls	r3, r3, #29
 8007710:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007714:	69f9      	ldr	r1, [r7, #28]
 8007716:	0148      	lsls	r0, r1, #5
 8007718:	6a39      	ldr	r1, [r7, #32]
 800771a:	4401      	add	r1, r0
 800771c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007720:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007722:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	68d9      	ldr	r1, [r3, #12]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	460a      	mov	r2, r1
 800773c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	6a3a      	ldr	r2, [r7, #32]
 800776a:	440a      	add	r2, r1
 800776c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007770:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007774:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	7e7b      	ldrb	r3, [r7, #25]
 8007786:	075b      	lsls	r3, r3, #29
 8007788:	69f9      	ldr	r1, [r7, #28]
 800778a:	0148      	lsls	r0, r1, #5
 800778c:	6a39      	ldr	r1, [r7, #32]
 800778e:	4401      	add	r1, r0
 8007790:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007794:	4313      	orrs	r3, r2
 8007796:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a42      	ldr	r2, [pc, #264]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077a8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077aa:	4b41      	ldr	r3, [pc, #260]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077b2:	4a3f      	ldr	r2, [pc, #252]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077b4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	78db      	ldrb	r3, [r3, #3]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d006      	beq.n	80077cc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077be:	4b3c      	ldr	r3, [pc, #240]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c6:	4a3a      	ldr	r2, [pc, #232]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e005      	b.n	80077d8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077cc:	4b38      	ldr	r3, [pc, #224]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077d4:	4a36      	ldr	r2, [pc, #216]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077d6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077d8:	4b35      	ldr	r3, [pc, #212]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077e0:	4a33      	ldr	r2, [pc, #204]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077e2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f0:	461a      	mov	r2, r3
 80077f2:	4b2f      	ldr	r3, [pc, #188]	; (80078b0 <USB_HC_StartXfer+0x288>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e04f      	b.n	80078a2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	78db      	ldrb	r3, [r3, #3]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d14a      	bne.n	80078a0 <USB_HC_StartXfer+0x278>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d046      	beq.n	80078a0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	79db      	ldrb	r3, [r3, #7]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d830      	bhi.n	800787c <USB_HC_StartXfer+0x254>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USB_HC_StartXfer+0x1f8>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007831 	.word	0x08007831
 8007824:	08007855 	.word	0x08007855
 8007828:	08007831 	.word	0x08007831
 800782c:	08007855 	.word	0x08007855
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	3303      	adds	r3, #3
 8007836:	089b      	lsrs	r3, r3, #2
 8007838:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800783a:	8afa      	ldrh	r2, [r7, #22]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	b29b      	uxth	r3, r3
 8007842:	429a      	cmp	r2, r3
 8007844:	d91c      	bls.n	8007880 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	619a      	str	r2, [r3, #24]
        }
        break;
 8007852:	e015      	b.n	8007880 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	3303      	adds	r3, #3
 800785a:	089b      	lsrs	r3, r3, #2
 800785c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800785e:	8afa      	ldrh	r2, [r7, #22]
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	b29b      	uxth	r3, r3
 800786a:	429a      	cmp	r2, r3
 800786c:	d90a      	bls.n	8007884 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	619a      	str	r2, [r3, #24]
        }
        break;
 800787a:	e003      	b.n	8007884 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800787c:	bf00      	nop
 800787e:	e002      	b.n	8007886 <USB_HC_StartXfer+0x25e>
        break;
 8007880:	bf00      	nop
 8007882:	e000      	b.n	8007886 <USB_HC_StartXfer+0x25e>
        break;
 8007884:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	68d9      	ldr	r1, [r3, #12]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	785a      	ldrb	r2, [r3, #1]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	b298      	uxth	r0, r3
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4603      	mov	r3, r0
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff fb84 	bl	8006fa8 <USB_WritePacket>
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3728      	adds	r7, #40	; 0x28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	1ff80000 	.word	0x1ff80000
 80078b0:	200000e0 	.word	0x200000e0

080078b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	b29b      	uxth	r3, r3
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	0c9b      	lsrs	r3, r3, #18
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <USB_HC_Halt+0x3a>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d16c      	bne.n	80079ea <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	440a      	add	r2, r1
 8007926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800792a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800792e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d143      	bne.n	80079c4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	0151      	lsls	r1, r2, #5
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	440a      	add	r2, r1
 8007952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800795a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	4413      	add	r3, r2
 8007964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	440a      	add	r2, r1
 8007972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800797a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	440a      	add	r2, r1
 8007992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800799a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	3301      	adds	r3, #1
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079a8:	d81d      	bhi.n	80079e6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c0:	d0ec      	beq.n	800799c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079c2:	e080      	b.n	8007ac6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	0151      	lsls	r1, r2, #5
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	440a      	add	r2, r1
 80079da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079e4:	e06f      	b.n	8007ac6 <USB_HC_Halt+0x1f0>
          break;
 80079e6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079e8:	e06d      	b.n	8007ac6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a08:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d143      	bne.n	8007aa2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a38:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a58:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	0151      	lsls	r1, r2, #5
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	440a      	add	r2, r1
 8007a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a78:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a86:	d81d      	bhi.n	8007ac4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a9e:	d0ec      	beq.n	8007a7a <USB_HC_Halt+0x1a4>
 8007aa0:	e011      	b.n	8007ac6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e000      	b.n	8007ac6 <USB_HC_Halt+0x1f0>
          break;
 8007ac4:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	04da      	lsls	r2, r3, #19
 8007af0:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <USB_DoPing+0x74>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b04:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b1c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b24:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	461a      	mov	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	1ff80000 	.word	0x1ff80000

08007b4c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff f99f 	bl	8006ea0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007b62:	2110      	movs	r1, #16
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f9d7 	bl	8006f18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f9fa 	bl	8006f64 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b70:	2300      	movs	r3, #0
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	e01f      	b.n	8007bb6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b8c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b9c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	461a      	mov	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b0f      	cmp	r3, #15
 8007bba:	d9dc      	bls.n	8007b76 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	e034      	b.n	8007c2c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bd8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007be0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007be8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c08:	d80c      	bhi.n	8007c24 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c20:	d0ec      	beq.n	8007bfc <USB_StopHost+0xb0>
 8007c22:	e000      	b.n	8007c26 <USB_StopHost+0xda>
        break;
 8007c24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	613b      	str	r3, [r7, #16]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b0f      	cmp	r3, #15
 8007c30:	d9c7      	bls.n	8007bc2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f04f 32ff 	mov.w	r2, #4294967295
 8007c46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff f918 	bl	8006e7e <USB_EnableGlobalInt>

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b089      	sub	sp, #36	; 0x24
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007c60:	2301      	movs	r3, #1
 8007c62:	2202      	movs	r2, #2
 8007c64:	2102      	movs	r1, #2
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fc68 	bl	800853c <USBH_FindInterface>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2bff      	cmp	r3, #255	; 0xff
 8007c74:	d002      	beq.n	8007c7c <USBH_CDC_InterfaceInit+0x24>
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d901      	bls.n	8007c80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e13d      	b.n	8007efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fc3d 	bl	8008504 <USBH_SelectInterface>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	e131      	b.n	8007efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007c9e:	2050      	movs	r0, #80	; 0x50
 8007ca0:	f002 fa1e 	bl	800a0e0 <malloc>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e11f      	b.n	8007efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007cbc:	2250      	movs	r2, #80	; 0x50
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	68b8      	ldr	r0, [r7, #8]
 8007cc2:	f002 fa1d 	bl	800a100 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	211a      	movs	r1, #26
 8007ccc:	fb01 f303 	mul.w	r3, r1, r3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b25b      	sxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da15      	bge.n	8007d0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	211a      	movs	r1, #26
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	211a      	movs	r1, #26
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fe36 	bl	8009982 <USBH_AllocPipe>
 8007d16:	4603      	mov	r3, r0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	7819      	ldrb	r1, [r3, #0]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	7858      	ldrb	r0, [r3, #1]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	8952      	ldrh	r2, [r2, #10]
 8007d36:	9202      	str	r2, [sp, #8]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	9201      	str	r2, [sp, #4]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4623      	mov	r3, r4
 8007d40:	4602      	mov	r2, r0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fdee 	bl	8009924 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f002 f8fb 	bl	8009f4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007d56:	2300      	movs	r3, #0
 8007d58:	2200      	movs	r2, #0
 8007d5a:	210a      	movs	r1, #10
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fbed 	bl	800853c <USBH_FindInterface>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	2bff      	cmp	r3, #255	; 0xff
 8007d6a:	d002      	beq.n	8007d72 <USBH_CDC_InterfaceInit+0x11a>
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d901      	bls.n	8007d76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d72:	2302      	movs	r3, #2
 8007d74:	e0c2      	b.n	8007efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	211a      	movs	r1, #26
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b25b      	sxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da16      	bge.n	8007dbc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	211a      	movs	r1, #26
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	4413      	add	r3, r2
 8007d9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	211a      	movs	r1, #26
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007db4:	881a      	ldrh	r2, [r3, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	835a      	strh	r2, [r3, #26]
 8007dba:	e015      	b.n	8007de8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	211a      	movs	r1, #26
 8007dc2:	fb01 f303 	mul.w	r3, r1, r3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	211a      	movs	r1, #26
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007de2:	881a      	ldrh	r2, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	211a      	movs	r1, #26
 8007dee:	fb01 f303 	mul.w	r3, r1, r3
 8007df2:	4413      	add	r3, r2
 8007df4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	da16      	bge.n	8007e2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	211a      	movs	r1, #26
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e10:	781a      	ldrb	r2, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	211a      	movs	r1, #26
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	835a      	strh	r2, [r3, #26]
 8007e2c:	e015      	b.n	8007e5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	211a      	movs	r1, #26
 8007e34:	fb01 f303 	mul.w	r3, r1, r3
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	211a      	movs	r1, #26
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e54:	881a      	ldrh	r2, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	7b9b      	ldrb	r3, [r3, #14]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 fd8e 	bl	8009982 <USBH_AllocPipe>
 8007e66:	4603      	mov	r3, r0
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	7bdb      	ldrb	r3, [r3, #15]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fd84 	bl	8009982 <USBH_AllocPipe>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	7b59      	ldrb	r1, [r3, #13]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	7b98      	ldrb	r0, [r3, #14]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	8b12      	ldrh	r2, [r2, #24]
 8007e9a:	9202      	str	r2, [sp, #8]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	9201      	str	r2, [sp, #4]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fd3c 	bl	8009924 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	7b19      	ldrb	r1, [r3, #12]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	7bd8      	ldrb	r0, [r3, #15]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	8b52      	ldrh	r2, [r2, #26]
 8007ec4:	9202      	str	r2, [sp, #8]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	9201      	str	r2, [sp, #4]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	4623      	mov	r3, r4
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 fd27 	bl	8009924 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	7b5b      	ldrb	r3, [r3, #13]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f002 f830 	bl	8009f4c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	7b1b      	ldrb	r3, [r3, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f002 f829 	bl	8009f4c <USBH_LL_SetToggle>

  return USBH_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd90      	pop	{r4, r7, pc}

08007f04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fd1c 	bl	8009962 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 fd47 	bl	80099c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	7b1b      	ldrb	r3, [r3, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00e      	beq.n	8007f62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	7b1b      	ldrb	r3, [r3, #12]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fd09 	bl	8009962 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	7b1b      	ldrb	r3, [r3, #12]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fd34 	bl	80099c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	7b5b      	ldrb	r3, [r3, #13]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00e      	beq.n	8007f88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	7b5b      	ldrb	r3, [r3, #13]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fcf6 	bl	8009962 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	7b5b      	ldrb	r3, [r3, #13]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 fd21 	bl	80099c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f002 f8a7 	bl	800a0f0 <free>
    phost->pActiveClass->pData = 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fa8:	2200      	movs	r2, #0
 8007faa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3340      	adds	r3, #64	; 0x40
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f8b1 	bl	8008136 <GetLineCoding>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d105      	bne.n	8007fea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fe4:	2102      	movs	r1, #2
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007fea:	7afb      	ldrb	r3, [r7, #11]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008014:	2b04      	cmp	r3, #4
 8008016:	d877      	bhi.n	8008108 <USBH_CDC_Process+0x114>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <USBH_CDC_Process+0x2c>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008035 	.word	0x08008035
 8008024:	0800803b 	.word	0x0800803b
 8008028:	0800806b 	.word	0x0800806b
 800802c:	080080df 	.word	0x080080df
 8008030:	080080ed 	.word	0x080080ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
      break;
 8008038:	e06d      	b.n	8008116 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f897 	bl	8008174 <SetLineCoding>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008058:	e058      	b.n	800810c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d055      	beq.n	800810c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2204      	movs	r2, #4
 8008064:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008068:	e050      	b.n	800810c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	3340      	adds	r3, #64	; 0x40
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f860 	bl	8008136 <GetLineCoding>
 8008076:	4603      	mov	r3, r0
 8008078:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d126      	bne.n	80080ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d13b      	bne.n	8008110 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d133      	bne.n	8008110 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d12b      	bne.n	8008110 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d124      	bne.n	8008110 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f95a 	bl	8008380 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080cc:	e020      	b.n	8008110 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d01d      	beq.n	8008110 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2204      	movs	r2, #4
 80080d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80080dc:	e018      	b.n	8008110 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f867 	bl	80081b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f8dc 	bl	80082a2 <CDC_ProcessReception>
      break;
 80080ea:	e014      	b.n	8008116 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80080ec:	2100      	movs	r1, #0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 ffe5 	bl	80090be <USBH_ClrFeature>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008106:	e005      	b.n	8008114 <USBH_CDC_Process+0x120>

    default:
      break;
 8008108:	bf00      	nop
 800810a:	e004      	b.n	8008116 <USBH_CDC_Process+0x122>
      break;
 800810c:	bf00      	nop
 800810e:	e002      	b.n	8008116 <USBH_CDC_Process+0x122>
      break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <USBH_CDC_Process+0x122>
      break;
 8008114:	bf00      	nop

  }

  return status;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	22a1      	movs	r2, #161	; 0xa1
 8008144:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2221      	movs	r2, #33	; 0x21
 800814a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2207      	movs	r2, #7
 800815c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2207      	movs	r2, #7
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 f98a 	bl	800947e <USBH_CtlReq>
 800816a:	4603      	mov	r3, r0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2221      	movs	r2, #33	; 0x21
 8008182:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2207      	movs	r2, #7
 800819a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2207      	movs	r2, #7
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f96b 	bl	800947e <USBH_CtlReq>
 80081a8:	4603      	mov	r3, r0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af02      	add	r7, sp, #8
 80081b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d002      	beq.n	80081d8 <CDC_ProcessTransmission+0x26>
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d025      	beq.n	8008222 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80081d6:	e060      	b.n	800829a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	8b12      	ldrh	r2, [r2, #24]
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d90c      	bls.n	80081fe <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	69d9      	ldr	r1, [r3, #28]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8b1a      	ldrh	r2, [r3, #24]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	7b58      	ldrb	r0, [r3, #13]
 80081f0:	2301      	movs	r3, #1
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4603      	mov	r3, r0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 fb51 	bl	800989e <USBH_BulkSendData>
 80081fc:	e00c      	b.n	8008218 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	7b58      	ldrb	r0, [r3, #13]
 800820c:	2301      	movs	r3, #1
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4603      	mov	r3, r0
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fb43 	bl	800989e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008220:	e03b      	b.n	800829a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	7b5b      	ldrb	r3, [r3, #13]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fe65 	bl	8009ef8 <USBH_LL_GetURBState>
 800822e:	4603      	mov	r3, r0
 8008230:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d128      	bne.n	800828a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	8b12      	ldrh	r2, [r2, #24]
 8008240:	4293      	cmp	r3, r2
 8008242:	d90e      	bls.n	8008262 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	8b12      	ldrh	r2, [r2, #24]
 800824c:	1a9a      	subs	r2, r3, r2
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	8b12      	ldrh	r2, [r2, #24]
 800825a:	441a      	add	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	61da      	str	r2, [r3, #28]
 8008260:	e002      	b.n	8008268 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008278:	e00e      	b.n	8008298 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f868 	bl	8008358 <USBH_CDC_TransmitCallback>
      break;
 8008288:	e006      	b.n	8008298 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d103      	bne.n	8008298 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008298:	bf00      	nop
  }
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d002      	beq.n	80082c8 <CDC_ProcessReception+0x26>
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d00e      	beq.n	80082e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80082c6:	e043      	b.n	8008350 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6a19      	ldr	r1, [r3, #32]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	8b5a      	ldrh	r2, [r3, #26]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	7b1b      	ldrb	r3, [r3, #12]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fb07 	bl	80098e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2204      	movs	r2, #4
 80082de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80082e2:	e035      	b.n	8008350 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	7b1b      	ldrb	r3, [r3, #12]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 fe04 	bl	8009ef8 <USBH_LL_GetURBState>
 80082f0:	4603      	mov	r3, r0
 80082f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80082f4:	7cfb      	ldrb	r3, [r7, #19]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d129      	bne.n	800834e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	7b1b      	ldrb	r3, [r3, #12]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fd67 	bl	8009dd4 <USBH_LL_GetLastXferSize>
 8008306:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	429a      	cmp	r2, r3
 8008310:	d016      	beq.n	8008340 <CDC_ProcessReception+0x9e>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	8b5b      	ldrh	r3, [r3, #26]
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4293      	cmp	r3, r2
 800831c:	d910      	bls.n	8008340 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	6a1a      	ldr	r2, [r3, #32]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	441a      	add	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2203      	movs	r2, #3
 800833a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800833e:	e006      	b.n	800834e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f80f 	bl	800836c <USBH_CDC_ReceiveCallback>
      break;
 800834e:	bf00      	nop
  }
}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	4613      	mov	r3, r2
 80083a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80083a8:	2302      	movs	r3, #2
 80083aa:	e029      	b.n	8008400 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	79fa      	ldrb	r2, [r7, #7]
 80083b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f81f 	bl	8008408 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 fc39 	bl	8009c70 <USBH_LL_Init>

  return USBH_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	e009      	b.n	800842e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	33e0      	adds	r3, #224	; 0xe0
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	2200      	movs	r2, #0
 8008426:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b0e      	cmp	r3, #14
 8008432:	d9f2      	bls.n	800841a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e009      	b.n	800844e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008444:	2200      	movs	r2, #0
 8008446:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008454:	d3f1      	bcc.n	800843a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2240      	movs	r2, #64	; 0x40
 800847a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d016      	beq.n	80084f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10e      	bne.n	80084ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084d4:	1c59      	adds	r1, r3, #1
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	33de      	adds	r3, #222	; 0xde
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
 80084ea:	e004      	b.n	80084f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80084ec:	2302      	movs	r3, #2
 80084ee:	73fb      	strb	r3, [r7, #15]
 80084f0:	e001      	b.n	80084f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80084f2:	2302      	movs	r3, #2
 80084f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	429a      	cmp	r2, r3
 800851e:	d204      	bcs.n	800852a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008528:	e001      	b.n	800852e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800852a:	2302      	movs	r3, #2
 800852c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	4608      	mov	r0, r1
 8008546:	4611      	mov	r1, r2
 8008548:	461a      	mov	r2, r3
 800854a:	4603      	mov	r3, r0
 800854c:	70fb      	strb	r3, [r7, #3]
 800854e:	460b      	mov	r3, r1
 8008550:	70bb      	strb	r3, [r7, #2]
 8008552:	4613      	mov	r3, r2
 8008554:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008564:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008566:	e025      	b.n	80085b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	221a      	movs	r2, #26
 800856c:	fb02 f303 	mul.w	r3, r2, r3
 8008570:	3308      	adds	r3, #8
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	3302      	adds	r3, #2
 8008578:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	795b      	ldrb	r3, [r3, #5]
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	429a      	cmp	r2, r3
 8008582:	d002      	beq.n	800858a <USBH_FindInterface+0x4e>
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	2bff      	cmp	r3, #255	; 0xff
 8008588:	d111      	bne.n	80085ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800858e:	78ba      	ldrb	r2, [r7, #2]
 8008590:	429a      	cmp	r2, r3
 8008592:	d002      	beq.n	800859a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008594:	78bb      	ldrb	r3, [r7, #2]
 8008596:	2bff      	cmp	r3, #255	; 0xff
 8008598:	d109      	bne.n	80085ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800859e:	787a      	ldrb	r2, [r7, #1]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d002      	beq.n	80085aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80085a4:	787b      	ldrb	r3, [r7, #1]
 80085a6:	2bff      	cmp	r3, #255	; 0xff
 80085a8:	d101      	bne.n	80085ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	e006      	b.n	80085bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	3301      	adds	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d9d6      	bls.n	8008568 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80085ba:	23ff      	movs	r3, #255	; 0xff
}
 80085bc:	4618      	mov	r0, r3
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fb89 	bl	8009ce8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80085d6:	2101      	movs	r1, #1
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 fca0 	bl	8009f1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af04      	add	r7, sp, #16
 80085ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80085f0:	2302      	movs	r3, #2
 80085f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d102      	bne.n	800860a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2203      	movs	r2, #3
 8008608:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b0b      	cmp	r3, #11
 8008612:	f200 81b3 	bhi.w	800897c <USBH_Process+0x394>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <USBH_Process+0x34>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800864d 	.word	0x0800864d
 8008620:	0800867f 	.word	0x0800867f
 8008624:	080086e7 	.word	0x080086e7
 8008628:	08008917 	.word	0x08008917
 800862c:	0800897d 	.word	0x0800897d
 8008630:	0800878b 	.word	0x0800878b
 8008634:	080088bd 	.word	0x080088bd
 8008638:	080087c1 	.word	0x080087c1
 800863c:	080087e1 	.word	0x080087e1
 8008640:	08008801 	.word	0x08008801
 8008644:	0800882f 	.word	0x0800882f
 8008648:	080088ff 	.word	0x080088ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8193 	beq.w	8008980 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008660:	20c8      	movs	r0, #200	; 0xc8
 8008662:	f001 fca6 	bl	8009fb2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fb99 	bl	8009d9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800867c:	e180      	b.n	8008980 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008684:	2b01      	cmp	r3, #1
 8008686:	d107      	bne.n	8008698 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008696:	e182      	b.n	800899e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800869e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a2:	d914      	bls.n	80086ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80086aa:	3301      	adds	r3, #1
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d903      	bls.n	80086c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	220d      	movs	r2, #13
 80086c2:	701a      	strb	r2, [r3, #0]
      break;
 80086c4:	e16b      	b.n	800899e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
      break;
 80086cc:	e167      	b.n	800899e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80086d4:	f103 020a 	add.w	r2, r3, #10
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80086de:	200a      	movs	r0, #10
 80086e0:	f001 fc67 	bl	8009fb2 <USBH_Delay>
      break;
 80086e4:	e15b      	b.n	800899e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086f6:	2104      	movs	r1, #4
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80086fc:	2064      	movs	r0, #100	; 0x64
 80086fe:	f001 fc58 	bl	8009fb2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fb26 	bl	8009d54 <USBH_LL_GetSpeed>
 8008708:	4603      	mov	r3, r0
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2205      	movs	r2, #5
 8008716:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 f931 	bl	8009982 <USBH_AllocPipe>
 8008720:	4603      	mov	r3, r0
 8008722:	461a      	mov	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008728:	2180      	movs	r1, #128	; 0x80
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 f929 	bl	8009982 <USBH_AllocPipe>
 8008730:	4603      	mov	r3, r0
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7919      	ldrb	r1, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800874c:	b292      	uxth	r2, r2
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4603      	mov	r3, r0
 8008758:	2280      	movs	r2, #128	; 0x80
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 f8e2 	bl	8009924 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7959      	ldrb	r1, [r3, #5]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008774:	b292      	uxth	r2, r2
 8008776:	9202      	str	r2, [sp, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	9201      	str	r2, [sp, #4]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	4603      	mov	r3, r0
 8008780:	2200      	movs	r2, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 f8ce 	bl	8009924 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008788:	e109      	b.n	800899e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f90c 	bl	80089a8 <USBH_HandleEnum>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	f040 80f3 	bne.w	8008984 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d103      	bne.n	80087b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2208      	movs	r2, #8
 80087b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80087b6:	e0e5      	b.n	8008984 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2207      	movs	r2, #7
 80087bc:	701a      	strb	r2, [r3, #0]
      break;
 80087be:	e0e1      	b.n	8008984 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80de 	beq.w	8008988 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087d2:	2101      	movs	r1, #1
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2208      	movs	r2, #8
 80087dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087de:	e0d3      	b.n	8008988 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fc20 	bl	8009030 <USBH_SetCfg>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 80ca 	bne.w	800898c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2209      	movs	r2, #9
 80087fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087fe:	e0c5      	b.n	800898c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00b      	beq.n	8008826 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800880e:	2101      	movs	r1, #1
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fc30 	bl	8009076 <USBH_SetFeature>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	f040 80b9 	bne.w	8008990 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	220a      	movs	r2, #10
 8008822:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008824:	e0b4      	b.n	8008990 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	220a      	movs	r2, #10
 800882a:	701a      	strb	r2, [r3, #0]
      break;
 800882c:	e0b0      	b.n	8008990 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80ad 	beq.w	8008994 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	e016      	b.n	8008876 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008848:	7bfa      	ldrb	r2, [r7, #15]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32de      	adds	r2, #222	; 0xde
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	791a      	ldrb	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800885a:	429a      	cmp	r2, r3
 800885c:	d108      	bne.n	8008870 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800885e:	7bfa      	ldrb	r2, [r7, #15]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	32de      	adds	r2, #222	; 0xde
 8008864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800886e:	e005      	b.n	800887c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	3301      	adds	r3, #1
 8008874:	73fb      	strb	r3, [r7, #15]
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0e5      	beq.n	8008848 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2206      	movs	r2, #6
 800889c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088a4:	2103      	movs	r1, #3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80088aa:	e073      	b.n	8008994 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	220d      	movs	r2, #13
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e06f      	b.n	8008994 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	220d      	movs	r2, #13
 80088b8:	701a      	strb	r2, [r3, #0]
      break;
 80088ba:	e06b      	b.n	8008994 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d017      	beq.n	80088f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	220b      	movs	r2, #11
 80088e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80088e4:	e058      	b.n	8008998 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d154      	bne.n	8008998 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	220d      	movs	r2, #13
 80088f2:	701a      	strb	r2, [r3, #0]
      break;
 80088f4:	e050      	b.n	8008998 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	220d      	movs	r2, #13
 80088fa:	701a      	strb	r2, [r3, #0]
      break;
 80088fc:	e04c      	b.n	8008998 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d049      	beq.n	800899c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
      }
      break;
 8008914:	e042      	b.n	800899c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff fd72 	bl	8008408 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008952:	2105      	movs	r1, #5
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	d107      	bne.n	8008974 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fe2b 	bl	80085c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008972:	e014      	b.n	800899e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 f9b7 	bl	8009ce8 <USBH_LL_Start>
      break;
 800897a:	e010      	b.n	800899e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800897c:	bf00      	nop
 800897e:	e00e      	b.n	800899e <USBH_Process+0x3b6>
      break;
 8008980:	bf00      	nop
 8008982:	e00c      	b.n	800899e <USBH_Process+0x3b6>
      break;
 8008984:	bf00      	nop
 8008986:	e00a      	b.n	800899e <USBH_Process+0x3b6>
    break;
 8008988:	bf00      	nop
 800898a:	e008      	b.n	800899e <USBH_Process+0x3b6>
      break;
 800898c:	bf00      	nop
 800898e:	e006      	b.n	800899e <USBH_Process+0x3b6>
      break;
 8008990:	bf00      	nop
 8008992:	e004      	b.n	800899e <USBH_Process+0x3b6>
      break;
 8008994:	bf00      	nop
 8008996:	e002      	b.n	800899e <USBH_Process+0x3b6>
      break;
 8008998:	bf00      	nop
 800899a:	e000      	b.n	800899e <USBH_Process+0x3b6>
      break;
 800899c:	bf00      	nop
  }
  return USBH_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80089b0:	2301      	movs	r3, #1
 80089b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	785b      	ldrb	r3, [r3, #1]
 80089bc:	2b07      	cmp	r3, #7
 80089be:	f200 81c1 	bhi.w	8008d44 <USBH_HandleEnum+0x39c>
 80089c2:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <USBH_HandleEnum+0x20>)
 80089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	08008aa7 	.word	0x08008aa7
 80089d0:	08008b11 	.word	0x08008b11
 80089d4:	08008b9f 	.word	0x08008b9f
 80089d8:	08008c09 	.word	0x08008c09
 80089dc:	08008c79 	.word	0x08008c79
 80089e0:	08008cbf 	.word	0x08008cbf
 80089e4:	08008d05 	.word	0x08008d05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80089e8:	2108      	movs	r1, #8
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa50 	bl	8008e90 <USBH_Get_DevDesc>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d130      	bne.n	8008a5c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7919      	ldrb	r1, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a1e:	b292      	uxth	r2, r2
 8008a20:	9202      	str	r2, [sp, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	9201      	str	r2, [sp, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2280      	movs	r2, #128	; 0x80
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 ff79 	bl	8009924 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7959      	ldrb	r1, [r3, #5]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a46:	b292      	uxth	r2, r2
 8008a48:	9202      	str	r2, [sp, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	9201      	str	r2, [sp, #4]
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	4603      	mov	r3, r0
 8008a52:	2200      	movs	r2, #0
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 ff65 	bl	8009924 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a5a:	e175      	b.n	8008d48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	f040 8172 	bne.w	8008d48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d903      	bls.n	8008a86 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	220d      	movs	r2, #13
 8008a82:	701a      	strb	r2, [r3, #0]
      break;
 8008a84:	e160      	b.n	8008d48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	795b      	ldrb	r3, [r3, #5]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 ff99 	bl	80099c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	791b      	ldrb	r3, [r3, #4]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 ff93 	bl	80099c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	701a      	strb	r2, [r3, #0]
      break;
 8008aa4:	e150      	b.n	8008d48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008aa6:	2112      	movs	r1, #18
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f9f1 	bl	8008e90 <USBH_Get_DevDesc>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008abe:	e145      	b.n	8008d4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	f040 8142 	bne.w	8008d4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ace:	3301      	adds	r3, #1
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d903      	bls.n	8008aea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	220d      	movs	r2, #13
 8008ae6:	701a      	strb	r2, [r3, #0]
      break;
 8008ae8:	e130      	b.n	8008d4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	795b      	ldrb	r3, [r3, #5]
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 ff67 	bl	80099c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 ff61 	bl	80099c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
      break;
 8008b0e:	e11d      	b.n	8008d4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008b10:	2101      	movs	r1, #1
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa68 	bl	8008fe8 <USBH_SetAddress>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d132      	bne.n	8008b88 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008b22:	2002      	movs	r0, #2
 8008b24:	f001 fa45 	bl	8009fb2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2203      	movs	r2, #3
 8008b34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7919      	ldrb	r1, [r3, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b4a:	b292      	uxth	r2, r2
 8008b4c:	9202      	str	r2, [sp, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	9201      	str	r2, [sp, #4]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4603      	mov	r3, r0
 8008b56:	2280      	movs	r2, #128	; 0x80
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fee3 	bl	8009924 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7959      	ldrb	r1, [r3, #5]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b72:	b292      	uxth	r2, r2
 8008b74:	9202      	str	r2, [sp, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	9201      	str	r2, [sp, #4]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2200      	movs	r2, #0
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fecf 	bl	8009924 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b86:	e0e3      	b.n	8008d50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	f040 80e0 	bne.w	8008d50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	220d      	movs	r2, #13
 8008b94:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	705a      	strb	r2, [r3, #1]
      break;
 8008b9c:	e0d8      	b.n	8008d50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008b9e:	2109      	movs	r1, #9
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f99d 	bl	8008ee0 <USBH_Get_CfgDesc>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d103      	bne.n	8008bb8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2204      	movs	r2, #4
 8008bb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bb6:	e0cd      	b.n	8008d54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	f040 80ca 	bne.w	8008d54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d903      	bls.n	8008be2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	220d      	movs	r2, #13
 8008bde:	701a      	strb	r2, [r3, #0]
      break;
 8008be0:	e0b8      	b.n	8008d54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	795b      	ldrb	r3, [r3, #5]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 feeb 	bl	80099c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	791b      	ldrb	r3, [r3, #4]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fee5 	bl	80099c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
      break;
 8008c06:	e0a5      	b.n	8008d54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f965 	bl	8008ee0 <USBH_Get_CfgDesc>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2205      	movs	r2, #5
 8008c24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c26:	e097      	b.n	8008d58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	f040 8094 	bne.w	8008d58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c36:	3301      	adds	r3, #1
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d903      	bls.n	8008c52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	220d      	movs	r2, #13
 8008c4e:	701a      	strb	r2, [r3, #0]
      break;
 8008c50:	e082      	b.n	8008d58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	795b      	ldrb	r3, [r3, #5]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 feb3 	bl	80099c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	791b      	ldrb	r3, [r3, #4]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fead 	bl	80099c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	701a      	strb	r2, [r3, #0]
      break;
 8008c76:	e06f      	b.n	8008d58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d019      	beq.n	8008cb6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c8e:	23ff      	movs	r3, #255	; 0xff
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f949 	bl	8008f28 <USBH_Get_StringDesc>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2206      	movs	r2, #6
 8008ca4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ca6:	e059      	b.n	8008d5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d156      	bne.n	8008d5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2206      	movs	r2, #6
 8008cb2:	705a      	strb	r2, [r3, #1]
      break;
 8008cb4:	e052      	b.n	8008d5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2206      	movs	r2, #6
 8008cba:	705a      	strb	r2, [r3, #1]
      break;
 8008cbc:	e04e      	b.n	8008d5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d019      	beq.n	8008cfc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008cd4:	23ff      	movs	r3, #255	; 0xff
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f926 	bl	8008f28 <USBH_Get_StringDesc>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2207      	movs	r2, #7
 8008cea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008cec:	e038      	b.n	8008d60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d135      	bne.n	8008d60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2207      	movs	r2, #7
 8008cf8:	705a      	strb	r2, [r3, #1]
      break;
 8008cfa:	e031      	b.n	8008d60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2207      	movs	r2, #7
 8008d00:	705a      	strb	r2, [r3, #1]
      break;
 8008d02:	e02d      	b.n	8008d60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d017      	beq.n	8008d3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d1a:	23ff      	movs	r3, #255	; 0xff
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f903 	bl	8008f28 <USBH_Get_StringDesc>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008d30:	e018      	b.n	8008d64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d115      	bne.n	8008d64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3c:	e012      	b.n	8008d64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
      break;
 8008d42:	e00f      	b.n	8008d64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008d44:	bf00      	nop
 8008d46:	e00e      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d48:	bf00      	nop
 8008d4a:	e00c      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d4c:	bf00      	nop
 8008d4e:	e00a      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d50:	bf00      	nop
 8008d52:	e008      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d54:	bf00      	nop
 8008d56:	e006      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d58:	bf00      	nop
 8008d5a:	e004      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d5c:	bf00      	nop
 8008d5e:	e002      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <USBH_HandleEnum+0x3be>
      break;
 8008d64:	bf00      	nop
  }
  return Status;
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f804 	bl	8008db2 <USBH_HandleSof>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b0b      	cmp	r3, #11
 8008dc2:	d10a      	bne.n	8008dda <USBH_HandleSof+0x28>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d005      	beq.n	8008dda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008df2:	bf00      	nop
}
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e0e:	bf00      	nop
}
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 ff58 	bl	8009d1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	791b      	ldrb	r3, [r3, #4]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fda5 	bl	80099c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	795b      	ldrb	r3, [r3, #5]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fd9f 	bl	80099c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f864 	bl	8008f7e <USBH_GetDescriptor>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f000 f918 	bl	8009106 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	331c      	adds	r3, #28
 8008ef0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ef2:	887b      	ldrh	r3, [r7, #2]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f83d 	bl	8008f7e <USBH_GetDescriptor>
 8008f04:	4603      	mov	r3, r0
 8008f06:	72fb      	strb	r3, [r7, #11]
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d107      	bne.n	8008f1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f14:	887a      	ldrh	r2, [r7, #2]
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f964 	bl	80091e6 <USBH_ParseCfgDesc>
  }

  return status;
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	607a      	str	r2, [r7, #4]
 8008f32:	461a      	mov	r2, r3
 8008f34:	460b      	mov	r3, r1
 8008f36:	72fb      	strb	r3, [r7, #11]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f4c:	893b      	ldrh	r3, [r7, #8]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	460b      	mov	r3, r1
 8008f52:	2100      	movs	r1, #0
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f812 	bl	8008f7e <USBH_GetDescriptor>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d107      	bne.n	8008f74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f6a:	893a      	ldrh	r2, [r7, #8]
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fa37 	bl	80093e2 <USBH_ParseStringDesc>
  }

  return status;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	607b      	str	r3, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	72fb      	strb	r3, [r7, #11]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	789b      	ldrb	r3, [r3, #2]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d11c      	bne.n	8008fd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2206      	movs	r2, #6
 8008fa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	893a      	ldrh	r2, [r7, #8]
 8008fae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008fb0:	893b      	ldrh	r3, [r7, #8]
 8008fb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fba:	d104      	bne.n	8008fc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f240 4209 	movw	r2, #1033	; 0x409
 8008fc2:	829a      	strh	r2, [r3, #20]
 8008fc4:	e002      	b.n	8008fcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8b3a      	ldrh	r2, [r7, #24]
 8008fd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008fd2:	8b3b      	ldrh	r3, [r7, #24]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fa50 	bl	800947e <USBH_CtlReq>
 8008fde:	4603      	mov	r3, r0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	789b      	ldrb	r3, [r3, #2]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d10f      	bne.n	800901c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2205      	movs	r2, #5
 8009006:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800901c:	2200      	movs	r2, #0
 800901e:	2100      	movs	r1, #0
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa2c 	bl	800947e <USBH_CtlReq>
 8009026:	4603      	mov	r3, r0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	789b      	ldrb	r3, [r3, #2]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d10e      	bne.n	8009062 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2209      	movs	r2, #9
 800904e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	887a      	ldrh	r2, [r7, #2]
 8009054:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa09 	bl	800947e <USBH_CtlReq>
 800906c:	4603      	mov	r3, r0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	789b      	ldrb	r3, [r3, #2]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d10f      	bne.n	80090aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2203      	movs	r2, #3
 8009094:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f9e5 	bl	800947e <USBH_CtlReq>
 80090b4:	4603      	mov	r3, r0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	789b      	ldrb	r3, [r3, #2]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d10f      	bne.n	80090f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f9c1 	bl	800947e <USBH_CtlReq>
 80090fc:	4603      	mov	r3, r0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	4613      	mov	r3, r2
 8009112:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	785a      	ldrb	r2, [r3, #1]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	3302      	adds	r3, #2
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	b29a      	uxth	r2, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3303      	adds	r3, #3
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	b29b      	uxth	r3, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	791a      	ldrb	r2, [r3, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	795a      	ldrb	r2, [r3, #5]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	799a      	ldrb	r2, [r3, #6]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	79da      	ldrb	r2, [r3, #7]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	2b08      	cmp	r3, #8
 8009164:	d939      	bls.n	80091da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	3308      	adds	r3, #8
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	b29a      	uxth	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	3309      	adds	r3, #9
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	b29b      	uxth	r3, r3
 800917a:	4313      	orrs	r3, r2
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	330a      	adds	r3, #10
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	b29a      	uxth	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	330b      	adds	r3, #11
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	b29b      	uxth	r3, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	330c      	adds	r3, #12
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	330d      	adds	r3, #13
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	021b      	lsls	r3, r3, #8
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	7b9a      	ldrb	r2, [r3, #14]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	7bda      	ldrb	r2, [r3, #15]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	7c1a      	ldrb	r2, [r3, #16]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	7c5a      	ldrb	r2, [r3, #17]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	745a      	strb	r2, [r3, #17]
  }
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b08a      	sub	sp, #40	; 0x28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	785a      	ldrb	r2, [r3, #1]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	3302      	adds	r3, #2
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b29a      	uxth	r2, r3
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3303      	adds	r3, #3
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	b29b      	uxth	r3, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	791a      	ldrb	r2, [r3, #4]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	795a      	ldrb	r2, [r3, #5]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	799a      	ldrb	r2, [r3, #6]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	79da      	ldrb	r2, [r3, #7]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	7a1a      	ldrb	r2, [r3, #8]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800925c:	88fb      	ldrh	r3, [r7, #6]
 800925e:	2b09      	cmp	r3, #9
 8009260:	d95f      	bls.n	8009322 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009262:	2309      	movs	r3, #9
 8009264:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800926a:	e051      	b.n	8009310 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800926c:	f107 0316 	add.w	r3, r7, #22
 8009270:	4619      	mov	r1, r3
 8009272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009274:	f000 f8e8 	bl	8009448 <USBH_GetNextDesc>
 8009278:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b04      	cmp	r3, #4
 8009280:	d146      	bne.n	8009310 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009286:	221a      	movs	r2, #26
 8009288:	fb02 f303 	mul.w	r3, r2, r3
 800928c:	3308      	adds	r3, #8
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	3302      	adds	r3, #2
 8009294:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009298:	69f8      	ldr	r0, [r7, #28]
 800929a:	f000 f846 	bl	800932a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092a8:	e022      	b.n	80092f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092aa:	f107 0316 	add.w	r3, r7, #22
 80092ae:	4619      	mov	r1, r3
 80092b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092b2:	f000 f8c9 	bl	8009448 <USBH_GetNextDesc>
 80092b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	2b05      	cmp	r3, #5
 80092be:	d117      	bne.n	80092f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80092c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092c8:	3201      	adds	r2, #1
 80092ca:	00d2      	lsls	r2, r2, #3
 80092cc:	211a      	movs	r1, #26
 80092ce:	fb01 f303 	mul.w	r3, r1, r3
 80092d2:	4413      	add	r3, r2
 80092d4:	3308      	adds	r3, #8
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	3304      	adds	r3, #4
 80092dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80092de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092e0:	69b8      	ldr	r0, [r7, #24]
 80092e2:	f000 f851 	bl	8009388 <USBH_ParseEPDesc>
            ep_ix++;
 80092e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80092ea:	3301      	adds	r3, #1
 80092ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	791b      	ldrb	r3, [r3, #4]
 80092f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d204      	bcs.n	8009306 <USBH_ParseCfgDesc+0x120>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	885a      	ldrh	r2, [r3, #2]
 8009300:	8afb      	ldrh	r3, [r7, #22]
 8009302:	429a      	cmp	r2, r3
 8009304:	d8d1      	bhi.n	80092aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800930a:	3301      	adds	r3, #1
 800930c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009314:	2b01      	cmp	r3, #1
 8009316:	d804      	bhi.n	8009322 <USBH_ParseCfgDesc+0x13c>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	885a      	ldrh	r2, [r3, #2]
 800931c:	8afb      	ldrh	r3, [r7, #22]
 800931e:	429a      	cmp	r2, r3
 8009320:	d8a4      	bhi.n	800926c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009322:	bf00      	nop
 8009324:	3728      	adds	r7, #40	; 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	785a      	ldrb	r2, [r3, #1]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	789a      	ldrb	r2, [r3, #2]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	78da      	ldrb	r2, [r3, #3]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	791a      	ldrb	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	795a      	ldrb	r2, [r3, #5]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	799a      	ldrb	r2, [r3, #6]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	79da      	ldrb	r2, [r3, #7]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	7a1a      	ldrb	r2, [r3, #8]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	721a      	strb	r2, [r3, #8]
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	785a      	ldrb	r2, [r3, #1]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	789a      	ldrb	r2, [r3, #2]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	78da      	ldrb	r2, [r3, #3]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	3304      	adds	r3, #4
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	3305      	adds	r3, #5
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	799a      	ldrb	r2, [r3, #6]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	719a      	strb	r2, [r3, #6]
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b087      	sub	sp, #28
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	4613      	mov	r3, r2
 80093ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3301      	adds	r3, #1
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d120      	bne.n	800943c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	1e9a      	subs	r2, r3, #2
 8009400:	88fb      	ldrh	r3, [r7, #6]
 8009402:	4293      	cmp	r3, r2
 8009404:	bf28      	it	cs
 8009406:	4613      	movcs	r3, r2
 8009408:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3302      	adds	r3, #2
 800940e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009410:	2300      	movs	r3, #0
 8009412:	82fb      	strh	r3, [r7, #22]
 8009414:	e00b      	b.n	800942e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009416:	8afb      	ldrh	r3, [r7, #22]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	781a      	ldrb	r2, [r3, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	3301      	adds	r3, #1
 8009426:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009428:	8afb      	ldrh	r3, [r7, #22]
 800942a:	3302      	adds	r3, #2
 800942c:	82fb      	strh	r3, [r7, #22]
 800942e:	8afa      	ldrh	r2, [r7, #22]
 8009430:	8abb      	ldrh	r3, [r7, #20]
 8009432:	429a      	cmp	r2, r3
 8009434:	d3ef      	bcc.n	8009416 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
  }
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	881a      	ldrh	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b29b      	uxth	r3, r3
 800945c:	4413      	add	r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009470:	68fb      	ldr	r3, [r7, #12]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b086      	sub	sp, #24
 8009482:	af00      	add	r7, sp, #0
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	4613      	mov	r3, r2
 800948a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	789b      	ldrb	r3, [r3, #2]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d002      	beq.n	800949e <USBH_CtlReq+0x20>
 8009498:	2b02      	cmp	r3, #2
 800949a:	d00f      	beq.n	80094bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800949c:	e027      	b.n	80094ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2202      	movs	r2, #2
 80094b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ba:	e018      	b.n	80094ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f81b 	bl	80094f8 <USBH_HandleControl>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <USBH_CtlReq+0x54>
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d106      	bne.n	80094e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	761a      	strb	r2, [r3, #24]
      break;
 80094de:	e005      	b.n	80094ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d102      	bne.n	80094ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	709a      	strb	r2, [r3, #2]
      break;
 80094ec:	bf00      	nop
  }
  return status;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009500:	2301      	movs	r3, #1
 8009502:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009504:	2300      	movs	r3, #0
 8009506:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7e1b      	ldrb	r3, [r3, #24]
 800950c:	3b01      	subs	r3, #1
 800950e:	2b0a      	cmp	r3, #10
 8009510:	f200 8158 	bhi.w	80097c4 <USBH_HandleControl+0x2cc>
 8009514:	a201      	add	r2, pc, #4	; (adr r2, 800951c <USBH_HandleControl+0x24>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	08009549 	.word	0x08009549
 8009520:	08009563 	.word	0x08009563
 8009524:	080095cd 	.word	0x080095cd
 8009528:	080095f3 	.word	0x080095f3
 800952c:	0800962b 	.word	0x0800962b
 8009530:	08009657 	.word	0x08009657
 8009534:	080096a9 	.word	0x080096a9
 8009538:	080096cb 	.word	0x080096cb
 800953c:	08009707 	.word	0x08009707
 8009540:	0800972f 	.word	0x0800972f
 8009544:	0800976d 	.word	0x0800976d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f103 0110 	add.w	r1, r3, #16
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	461a      	mov	r2, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f945 	bl	80097e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	761a      	strb	r2, [r3, #24]
      break;
 8009560:	e13b      	b.n	80097da <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	795b      	ldrb	r3, [r3, #5]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fcc5 	bl	8009ef8 <USBH_LL_GetURBState>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d11e      	bne.n	80095b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7c1b      	ldrb	r3, [r3, #16]
 800957c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009580:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	8adb      	ldrh	r3, [r3, #22]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800958a:	7b7b      	ldrb	r3, [r7, #13]
 800958c:	2b80      	cmp	r3, #128	; 0x80
 800958e:	d103      	bne.n	8009598 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2203      	movs	r2, #3
 8009594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009596:	e117      	b.n	80097c8 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2205      	movs	r2, #5
 800959c:	761a      	strb	r2, [r3, #24]
      break;
 800959e:	e113      	b.n	80097c8 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80095a0:	7b7b      	ldrb	r3, [r7, #13]
 80095a2:	2b80      	cmp	r3, #128	; 0x80
 80095a4:	d103      	bne.n	80095ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2209      	movs	r2, #9
 80095aa:	761a      	strb	r2, [r3, #24]
      break;
 80095ac:	e10c      	b.n	80097c8 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2207      	movs	r2, #7
 80095b2:	761a      	strb	r2, [r3, #24]
      break;
 80095b4:	e108      	b.n	80097c8 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d003      	beq.n	80095c4 <USBH_HandleControl+0xcc>
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	f040 8102 	bne.w	80097c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	220b      	movs	r2, #11
 80095c8:	761a      	strb	r2, [r3, #24]
      break;
 80095ca:	e0fd      	b.n	80097c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6899      	ldr	r1, [r3, #8]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	899a      	ldrh	r2, [r3, #12]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	791b      	ldrb	r3, [r3, #4]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f93c 	bl	8009862 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2204      	movs	r2, #4
 80095ee:	761a      	strb	r2, [r3, #24]
      break;
 80095f0:	e0f3      	b.n	80097da <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	791b      	ldrb	r3, [r3, #4]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fc7d 	bl	8009ef8 <USBH_LL_GetURBState>
 80095fe:	4603      	mov	r3, r0
 8009600:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d102      	bne.n	800960e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2209      	movs	r2, #9
 800960c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b05      	cmp	r3, #5
 8009612:	d102      	bne.n	800961a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009614:	2303      	movs	r3, #3
 8009616:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009618:	e0d8      	b.n	80097cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b04      	cmp	r3, #4
 800961e:	f040 80d5 	bne.w	80097cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	220b      	movs	r2, #11
 8009626:	761a      	strb	r2, [r3, #24]
      break;
 8009628:	e0d0      	b.n	80097cc <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6899      	ldr	r1, [r3, #8]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	899a      	ldrh	r2, [r3, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	7958      	ldrb	r0, [r3, #5]
 8009636:	2301      	movs	r3, #1
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4603      	mov	r3, r0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f8eb 	bl	8009818 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009648:	b29a      	uxth	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2206      	movs	r2, #6
 8009652:	761a      	strb	r2, [r3, #24]
      break;
 8009654:	e0c1      	b.n	80097da <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	795b      	ldrb	r3, [r3, #5]
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc4b 	bl	8009ef8 <USBH_LL_GetURBState>
 8009662:	4603      	mov	r3, r0
 8009664:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d103      	bne.n	8009674 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2207      	movs	r2, #7
 8009670:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009672:	e0ad      	b.n	80097d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b05      	cmp	r3, #5
 8009678:	d105      	bne.n	8009686 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	220c      	movs	r2, #12
 800967e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009680:	2303      	movs	r3, #3
 8009682:	73fb      	strb	r3, [r7, #15]
      break;
 8009684:	e0a4      	b.n	80097d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d103      	bne.n	8009694 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2205      	movs	r2, #5
 8009690:	761a      	strb	r2, [r3, #24]
      break;
 8009692:	e09d      	b.n	80097d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	2b04      	cmp	r3, #4
 8009698:	f040 809a 	bne.w	80097d0 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	220b      	movs	r2, #11
 80096a0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80096a2:	2302      	movs	r3, #2
 80096a4:	73fb      	strb	r3, [r7, #15]
      break;
 80096a6:	e093      	b.n	80097d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	791b      	ldrb	r3, [r3, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	2100      	movs	r1, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f8d6 	bl	8009862 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096bc:	b29a      	uxth	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2208      	movs	r2, #8
 80096c6:	761a      	strb	r2, [r3, #24]

      break;
 80096c8:	e087      	b.n	80097da <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	791b      	ldrb	r3, [r3, #4]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc11 	bl	8009ef8 <USBH_LL_GetURBState>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d105      	bne.n	80096ec <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220d      	movs	r2, #13
 80096e4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096ea:	e073      	b.n	80097d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d103      	bne.n	80096fa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	220b      	movs	r2, #11
 80096f6:	761a      	strb	r2, [r3, #24]
      break;
 80096f8:	e06c      	b.n	80097d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	d169      	bne.n	80097d4 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009700:	2303      	movs	r3, #3
 8009702:	73fb      	strb	r3, [r7, #15]
      break;
 8009704:	e066      	b.n	80097d4 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	795a      	ldrb	r2, [r3, #5]
 800970a:	2301      	movs	r3, #1
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	4613      	mov	r3, r2
 8009710:	2200      	movs	r2, #0
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f87f 	bl	8009818 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	220a      	movs	r2, #10
 800972a:	761a      	strb	r2, [r3, #24]
      break;
 800972c:	e055      	b.n	80097da <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	795b      	ldrb	r3, [r3, #5]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fbdf 	bl	8009ef8 <USBH_LL_GetURBState>
 800973a:	4603      	mov	r3, r0
 800973c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d105      	bne.n	8009750 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	220d      	movs	r2, #13
 800974c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800974e:	e043      	b.n	80097d8 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d103      	bne.n	800975e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2209      	movs	r2, #9
 800975a:	761a      	strb	r2, [r3, #24]
      break;
 800975c:	e03c      	b.n	80097d8 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	2b04      	cmp	r3, #4
 8009762:	d139      	bne.n	80097d8 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	220b      	movs	r2, #11
 8009768:	761a      	strb	r2, [r3, #24]
      break;
 800976a:	e035      	b.n	80097d8 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7e5b      	ldrb	r3, [r3, #25]
 8009770:	3301      	adds	r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	765a      	strb	r2, [r3, #25]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7e5b      	ldrb	r3, [r3, #25]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d806      	bhi.n	800978e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800978c:	e025      	b.n	80097da <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009794:	2106      	movs	r1, #6
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	795b      	ldrb	r3, [r3, #5]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f90c 	bl	80099c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	791b      	ldrb	r3, [r3, #4]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f906 	bl	80099c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80097be:	2302      	movs	r3, #2
 80097c0:	73fb      	strb	r3, [r7, #15]
      break;
 80097c2:	e00a      	b.n	80097da <USBH_HandleControl+0x2e2>

    default:
      break;
 80097c4:	bf00      	nop
 80097c6:	e008      	b.n	80097da <USBH_HandleControl+0x2e2>
      break;
 80097c8:	bf00      	nop
 80097ca:	e006      	b.n	80097da <USBH_HandleControl+0x2e2>
      break;
 80097cc:	bf00      	nop
 80097ce:	e004      	b.n	80097da <USBH_HandleControl+0x2e2>
      break;
 80097d0:	bf00      	nop
 80097d2:	e002      	b.n	80097da <USBH_HandleControl+0x2e2>
      break;
 80097d4:	bf00      	nop
 80097d6:	e000      	b.n	80097da <USBH_HandleControl+0x2e2>
      break;
 80097d8:	bf00      	nop
  }

  return status;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80097f2:	79f9      	ldrb	r1, [r7, #7]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	2308      	movs	r3, #8
 80097fa:	9302      	str	r3, [sp, #8]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	2300      	movs	r3, #0
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fb44 	bl	8009e96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af04      	add	r7, sp, #16
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4611      	mov	r1, r2
 8009824:	461a      	mov	r2, r3
 8009826:	460b      	mov	r3, r1
 8009828:	80fb      	strh	r3, [r7, #6]
 800982a:	4613      	mov	r3, r2
 800982c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800983c:	7979      	ldrb	r1, [r7, #5]
 800983e:	7e3b      	ldrb	r3, [r7, #24]
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	2301      	movs	r3, #1
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	2200      	movs	r2, #0
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fb1f 	bl	8009e96 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b088      	sub	sp, #32
 8009866:	af04      	add	r7, sp, #16
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	4611      	mov	r1, r2
 800986e:	461a      	mov	r2, r3
 8009870:	460b      	mov	r3, r1
 8009872:	80fb      	strh	r3, [r7, #6]
 8009874:	4613      	mov	r3, r2
 8009876:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009878:	7979      	ldrb	r1, [r7, #5]
 800987a:	2300      	movs	r3, #0
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	9302      	str	r3, [sp, #8]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	2301      	movs	r3, #1
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	2300      	movs	r3, #0
 800988c:	2201      	movs	r2, #1
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 fb01 	bl	8009e96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009894:	2300      	movs	r3, #0

}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b088      	sub	sp, #32
 80098a2:	af04      	add	r7, sp, #16
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	4611      	mov	r1, r2
 80098aa:	461a      	mov	r2, r3
 80098ac:	460b      	mov	r3, r1
 80098ae:	80fb      	strh	r3, [r7, #6]
 80098b0:	4613      	mov	r3, r2
 80098b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098c2:	7979      	ldrb	r1, [r7, #5]
 80098c4:	7e3b      	ldrb	r3, [r7, #24]
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	9302      	str	r3, [sp, #8]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	2301      	movs	r3, #1
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	2302      	movs	r3, #2
 80098d6:	2200      	movs	r2, #0
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fadc 	bl	8009e96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af04      	add	r7, sp, #16
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4611      	mov	r1, r2
 80098f4:	461a      	mov	r2, r3
 80098f6:	460b      	mov	r3, r1
 80098f8:	80fb      	strh	r3, [r7, #6]
 80098fa:	4613      	mov	r3, r2
 80098fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098fe:	7979      	ldrb	r1, [r7, #5]
 8009900:	2300      	movs	r3, #0
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	9302      	str	r3, [sp, #8]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	2301      	movs	r3, #1
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	2302      	movs	r3, #2
 8009912:	2201      	movs	r2, #1
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fabe 	bl	8009e96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af04      	add	r7, sp, #16
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	461a      	mov	r2, r3
 8009932:	4603      	mov	r3, r0
 8009934:	70fb      	strb	r3, [r7, #3]
 8009936:	460b      	mov	r3, r1
 8009938:	70bb      	strb	r3, [r7, #2]
 800993a:	4613      	mov	r3, r2
 800993c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800993e:	7878      	ldrb	r0, [r7, #1]
 8009940:	78ba      	ldrb	r2, [r7, #2]
 8009942:	78f9      	ldrb	r1, [r7, #3]
 8009944:	8b3b      	ldrh	r3, [r7, #24]
 8009946:	9302      	str	r3, [sp, #8]
 8009948:	7d3b      	ldrb	r3, [r7, #20]
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	7c3b      	ldrb	r3, [r7, #16]
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	4603      	mov	r3, r0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa51 	bl	8009dfa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa70 	bl	8009e58 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	460b      	mov	r3, r1
 800998c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f836 	bl	8009a00 <USBH_GetFreePipe>
 8009994:	4603      	mov	r3, r0
 8009996:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009998:	89fb      	ldrh	r3, [r7, #14]
 800999a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00a      	beq.n	80099b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	89fb      	ldrh	r3, [r7, #14]
 80099a6:	f003 030f 	and.w	r3, r3, #15
 80099aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	33e0      	adds	r3, #224	; 0xe0
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80099b8:	89fb      	ldrh	r3, [r7, #14]
 80099ba:	b2db      	uxtb	r3, r3
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	2b0a      	cmp	r3, #10
 80099d4:	d80d      	bhi.n	80099f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	33e0      	adds	r3, #224	; 0xe0
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	33e0      	adds	r3, #224	; 0xe0
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	440b      	add	r3, r1
 80099f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
 8009a10:	e00f      	b.n	8009a32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	33e0      	adds	r3, #224	; 0xe0
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	e007      	b.n	8009a3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	2b0a      	cmp	r3, #10
 8009a36:	d9ec      	bls.n	8009a12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	490e      	ldr	r1, [pc, #56]	; (8009a88 <MX_USB_HOST_Init+0x40>)
 8009a50:	480e      	ldr	r0, [pc, #56]	; (8009a8c <MX_USB_HOST_Init+0x44>)
 8009a52:	f7fe fc9f 	bl	8008394 <USBH_Init>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009a5c:	f7f7 ff1e 	bl	800189c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009a60:	490b      	ldr	r1, [pc, #44]	; (8009a90 <MX_USB_HOST_Init+0x48>)
 8009a62:	480a      	ldr	r0, [pc, #40]	; (8009a8c <MX_USB_HOST_Init+0x44>)
 8009a64:	f7fe fd24 	bl	80084b0 <USBH_RegisterClass>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009a6e:	f7f7 ff15 	bl	800189c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009a72:	4806      	ldr	r0, [pc, #24]	; (8009a8c <MX_USB_HOST_Init+0x44>)
 8009a74:	f7fe fda8 	bl	80085c8 <USBH_Start>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009a7e:	f7f7 ff0d 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009a82:	bf00      	nop
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	20000348 	.word	0x20000348
 8009a90:	2000000c 	.word	0x2000000c

08009a94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009a98:	4802      	ldr	r0, [pc, #8]	; (8009aa4 <MX_USB_HOST_Process+0x10>)
 8009a9a:	f7fe fda5 	bl	80085e8 <USBH_Process>
}
 8009a9e:	bf00      	nop
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000348 	.word	0x20000348

08009aa8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d819      	bhi.n	8009af0 <USBH_UserProcess+0x48>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBH_UserProcess+0x1c>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	08009ae1 	.word	0x08009ae1
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009ad9 	.word	0x08009ad9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <USBH_UserProcess+0x58>)
 8009ada:	2203      	movs	r2, #3
 8009adc:	701a      	strb	r2, [r3, #0]
  break;
 8009ade:	e008      	b.n	8009af2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <USBH_UserProcess+0x58>)
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	701a      	strb	r2, [r3, #0]
  break;
 8009ae6:	e004      	b.n	8009af2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <USBH_UserProcess+0x58>)
 8009aea:	2201      	movs	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
  break;
 8009aee:	e000      	b.n	8009af2 <USBH_UserProcess+0x4a>

  default:
  break;
 8009af0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	200000e4 	.word	0x200000e4

08009b04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	; 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b0c:	f107 0314 	add.w	r3, r7, #20
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b24:	d147      	bne.n	8009bb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b26:	2300      	movs	r3, #0
 8009b28:	613b      	str	r3, [r7, #16]
 8009b2a:	4b25      	ldr	r3, [pc, #148]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2e:	4a24      	ldr	r2, [pc, #144]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b30:	f043 0301 	orr.w	r3, r3, #1
 8009b34:	6313      	str	r3, [r2, #48]	; 0x30
 8009b36:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009b50:	f107 0314 	add.w	r3, r7, #20
 8009b54:	4619      	mov	r1, r3
 8009b56:	481b      	ldr	r0, [pc, #108]	; (8009bc4 <HAL_HCD_MspInit+0xc0>)
 8009b58:	f7f8 fb0e 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009b5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b62:	2302      	movs	r3, #2
 8009b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b6e:	230a      	movs	r3, #10
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b72:	f107 0314 	add.w	r3, r7, #20
 8009b76:	4619      	mov	r1, r3
 8009b78:	4812      	ldr	r0, [pc, #72]	; (8009bc4 <HAL_HCD_MspInit+0xc0>)
 8009b7a:	f7f8 fafd 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	4a0f      	ldr	r2, [pc, #60]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b88:	6353      	str	r3, [r2, #52]	; 0x34
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	4a0b      	ldr	r2, [pc, #44]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b98:	6453      	str	r3, [r2, #68]	; 0x44
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <HAL_HCD_MspInit+0xbc>)
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	2043      	movs	r0, #67	; 0x43
 8009bac:	f7f8 fa8b 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bb0:	2043      	movs	r0, #67	; 0x43
 8009bb2:	f7f8 faa4 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	3728      	adds	r7, #40	; 0x28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	40020000 	.word	0x40020000

08009bc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff f8d9 	bl	8008d8e <USBH_LL_IncTimer>
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff f911 	bl	8008e1a <USBH_LL_Connect>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff f91a 	bl	8008e48 <USBH_LL_Disconnect>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff f8cb 	bl	8008de2 <USBH_LL_PortEnabled>
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff f8cb 	bl	8008dfe <USBH_LL_PortDisabled>
}
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d12a      	bne.n	8009cd8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009c82:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a15      	ldr	r2, [pc, #84]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009c8e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c92:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009c94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c98:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009c9a:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009ca0:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009cac:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009cae:	2202      	movs	r2, #2
 8009cb0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009cb8:	480a      	ldr	r0, [pc, #40]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009cba:	f7f8 fc29 	bl	8002510 <HAL_HCD_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009cc4:	f7f7 fdea 	bl	800189c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009cc8:	4806      	ldr	r0, [pc, #24]	; (8009ce4 <USBH_LL_Init+0x74>)
 8009cca:	f7f9 f82d 	bl	8002d28 <HAL_HCD_GetCurrentFrame>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff f84c 	bl	8008d70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000720 	.word	0x20000720

08009ce8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7f8 ff9a 	bl	8002c38 <HAL_HCD_Start>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f95c 	bl	8009fc8 <USBH_Get_USB_Status>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7f8 ffa2 	bl	8002c7e <HAL_HCD_Stop>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 f941 	bl	8009fc8 <USBH_Get_USB_Status>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7f8 ffec 	bl	8002d44 <HAL_HCD_GetCurrentSpeed>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d007      	beq.n	8009d82 <USBH_LL_GetSpeed+0x2e>
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d302      	bcc.n	8009d7c <USBH_LL_GetSpeed+0x28>
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d006      	beq.n	8009d88 <USBH_LL_GetSpeed+0x34>
 8009d7a:	e008      	b.n	8009d8e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d80:	e008      	b.n	8009d94 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009d82:	2301      	movs	r3, #1
 8009d84:	73fb      	strb	r3, [r7, #15]
    break;
 8009d86:	e005      	b.n	8009d94 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d8c:	e002      	b.n	8009d94 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	73fb      	strb	r3, [r7, #15]
    break;
 8009d92:	bf00      	nop
  }
  return  speed;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f8 ff7f 	bl	8002cb8 <HAL_HCD_ResetPort>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f901 	bl	8009fc8 <USBH_Get_USB_Status>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009de6:	78fa      	ldrb	r2, [r7, #3]
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f8 ff87 	bl	8002cfe <HAL_HCD_HC_GetXferCount>
 8009df0:	4603      	mov	r3, r0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009dfa:	b590      	push	{r4, r7, lr}
 8009dfc:	b089      	sub	sp, #36	; 0x24
 8009dfe:	af04      	add	r7, sp, #16
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	4608      	mov	r0, r1
 8009e04:	4611      	mov	r1, r2
 8009e06:	461a      	mov	r2, r3
 8009e08:	4603      	mov	r3, r0
 8009e0a:	70fb      	strb	r3, [r7, #3]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70bb      	strb	r3, [r7, #2]
 8009e10:	4613      	mov	r3, r2
 8009e12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e22:	787c      	ldrb	r4, [r7, #1]
 8009e24:	78ba      	ldrb	r2, [r7, #2]
 8009e26:	78f9      	ldrb	r1, [r7, #3]
 8009e28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e2a:	9302      	str	r3, [sp, #8]
 8009e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4623      	mov	r3, r4
 8009e3a:	f7f8 fbcb 	bl	80025d4 <HAL_HCD_HC_Init>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 f8bf 	bl	8009fc8 <USBH_Get_USB_Status>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd90      	pop	{r4, r7, pc}

08009e58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e72:	78fa      	ldrb	r2, [r7, #3]
 8009e74:	4611      	mov	r1, r2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7f8 fc44 	bl	8002704 <HAL_HCD_HC_Halt>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 f8a0 	bl	8009fc8 <USBH_Get_USB_Status>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009e96:	b590      	push	{r4, r7, lr}
 8009e98:	b089      	sub	sp, #36	; 0x24
 8009e9a:	af04      	add	r7, sp, #16
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	4608      	mov	r0, r1
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	70fb      	strb	r3, [r7, #3]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70bb      	strb	r3, [r7, #2]
 8009eac:	4613      	mov	r3, r2
 8009eae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ebe:	787c      	ldrb	r4, [r7, #1]
 8009ec0:	78ba      	ldrb	r2, [r7, #2]
 8009ec2:	78f9      	ldrb	r1, [r7, #3]
 8009ec4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ec8:	9303      	str	r3, [sp, #12]
 8009eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ecc:	9302      	str	r3, [sp, #8]
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	4623      	mov	r3, r4
 8009eda:	f7f8 fc37 	bl	800274c <HAL_HCD_HC_SubmitRequest>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f86f 	bl	8009fc8 <USBH_Get_USB_Status>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd90      	pop	{r4, r7, pc}

08009ef8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7f8 fee0 	bl	8002cd4 <HAL_HCD_HC_GetURBState>
 8009f14:	4603      	mov	r3, r0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	460b      	mov	r3, r1
 8009f28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d103      	bne.n	8009f3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f872 	bl	800a020 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009f3c:	20c8      	movs	r0, #200	; 0xc8
 8009f3e:	f7f7 ffc5 	bl	8001ecc <HAL_Delay>
  return USBH_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009f64:	78fa      	ldrb	r2, [r7, #3]
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	440b      	add	r3, r1
 8009f72:	333b      	adds	r3, #59	; 0x3b
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009f7a:	78fa      	ldrb	r2, [r7, #3]
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	440b      	add	r3, r1
 8009f88:	3350      	adds	r3, #80	; 0x50
 8009f8a:	78ba      	ldrb	r2, [r7, #2]
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e009      	b.n	8009fa4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009f90:	78fa      	ldrb	r2, [r7, #3]
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3351      	adds	r3, #81	; 0x51
 8009fa0:	78ba      	ldrb	r2, [r7, #2]
 8009fa2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7f7 ff86 	bl	8001ecc <HAL_Delay>
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d817      	bhi.n	800a00c <USBH_Get_USB_Status+0x44>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <USBH_Get_USB_Status+0x1c>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	08009ff5 	.word	0x08009ff5
 8009fe8:	08009ffb 	.word	0x08009ffb
 8009fec:	0800a001 	.word	0x0800a001
 8009ff0:	0800a007 	.word	0x0800a007
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff8:	e00b      	b.n	800a012 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffe:	e008      	b.n	800a012 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a000:	2301      	movs	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
    break;
 800a004:	e005      	b.n	800a012 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a006:	2302      	movs	r3, #2
 800a008:	73fb      	strb	r3, [r7, #15]
    break;
 800a00a:	e002      	b.n	800a012 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a00c:	2302      	movs	r3, #2
 800a00e:	73fb      	strb	r3, [r7, #15]
    break;
 800a010:	bf00      	nop
  }
  return usb_status;
 800a012:	7bfb      	ldrb	r3, [r7, #15]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a034:	2301      	movs	r3, #1
 800a036:	73fb      	strb	r3, [r7, #15]
 800a038:	e001      	b.n	800a03e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	461a      	mov	r2, r3
 800a042:	2101      	movs	r1, #1
 800a044:	4803      	ldr	r0, [pc, #12]	; (800a054 <MX_DriverVbusFS+0x34>)
 800a046:	f7f8 fa31 	bl	80024ac <HAL_GPIO_WritePin>
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	40020800 	.word	0x40020800

0800a058 <__errno>:
 800a058:	4b01      	ldr	r3, [pc, #4]	; (800a060 <__errno+0x8>)
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	2000002c 	.word	0x2000002c

0800a064 <__libc_init_array>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4e0d      	ldr	r6, [pc, #52]	; (800a09c <__libc_init_array+0x38>)
 800a068:	4c0d      	ldr	r4, [pc, #52]	; (800a0a0 <__libc_init_array+0x3c>)
 800a06a:	1ba4      	subs	r4, r4, r6
 800a06c:	10a4      	asrs	r4, r4, #2
 800a06e:	2500      	movs	r5, #0
 800a070:	42a5      	cmp	r5, r4
 800a072:	d109      	bne.n	800a088 <__libc_init_array+0x24>
 800a074:	4e0b      	ldr	r6, [pc, #44]	; (800a0a4 <__libc_init_array+0x40>)
 800a076:	4c0c      	ldr	r4, [pc, #48]	; (800a0a8 <__libc_init_array+0x44>)
 800a078:	f000 fd32 	bl	800aae0 <_init>
 800a07c:	1ba4      	subs	r4, r4, r6
 800a07e:	10a4      	asrs	r4, r4, #2
 800a080:	2500      	movs	r5, #0
 800a082:	42a5      	cmp	r5, r4
 800a084:	d105      	bne.n	800a092 <__libc_init_array+0x2e>
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a08c:	4798      	blx	r3
 800a08e:	3501      	adds	r5, #1
 800a090:	e7ee      	b.n	800a070 <__libc_init_array+0xc>
 800a092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a096:	4798      	blx	r3
 800a098:	3501      	adds	r5, #1
 800a09a:	e7f2      	b.n	800a082 <__libc_init_array+0x1e>
 800a09c:	0800ac04 	.word	0x0800ac04
 800a0a0:	0800ac04 	.word	0x0800ac04
 800a0a4:	0800ac04 	.word	0x0800ac04
 800a0a8:	0800ac08 	.word	0x0800ac08

0800a0ac <__itoa>:
 800a0ac:	1e93      	subs	r3, r2, #2
 800a0ae:	2b22      	cmp	r3, #34	; 0x22
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	d904      	bls.n	800a0c0 <__itoa+0x14>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	700b      	strb	r3, [r1, #0]
 800a0ba:	461c      	mov	r4, r3
 800a0bc:	4620      	mov	r0, r4
 800a0be:	bd10      	pop	{r4, pc}
 800a0c0:	2a0a      	cmp	r2, #10
 800a0c2:	d109      	bne.n	800a0d8 <__itoa+0x2c>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	da07      	bge.n	800a0d8 <__itoa+0x2c>
 800a0c8:	232d      	movs	r3, #45	; 0x2d
 800a0ca:	700b      	strb	r3, [r1, #0]
 800a0cc:	4240      	negs	r0, r0
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4421      	add	r1, r4
 800a0d2:	f000 f97f 	bl	800a3d4 <__utoa>
 800a0d6:	e7f1      	b.n	800a0bc <__itoa+0x10>
 800a0d8:	2100      	movs	r1, #0
 800a0da:	e7f9      	b.n	800a0d0 <__itoa+0x24>

0800a0dc <itoa>:
 800a0dc:	f7ff bfe6 	b.w	800a0ac <__itoa>

0800a0e0 <malloc>:
 800a0e0:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <malloc+0xc>)
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	f000 b861 	b.w	800a1ac <_malloc_r>
 800a0ea:	bf00      	nop
 800a0ec:	2000002c 	.word	0x2000002c

0800a0f0 <free>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <free+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f000 b80b 	b.w	800a110 <_free_r>
 800a0fa:	bf00      	nop
 800a0fc:	2000002c 	.word	0x2000002c

0800a100 <memset>:
 800a100:	4402      	add	r2, r0
 800a102:	4603      	mov	r3, r0
 800a104:	4293      	cmp	r3, r2
 800a106:	d100      	bne.n	800a10a <memset+0xa>
 800a108:	4770      	bx	lr
 800a10a:	f803 1b01 	strb.w	r1, [r3], #1
 800a10e:	e7f9      	b.n	800a104 <memset+0x4>

0800a110 <_free_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4605      	mov	r5, r0
 800a114:	2900      	cmp	r1, #0
 800a116:	d045      	beq.n	800a1a4 <_free_r+0x94>
 800a118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a11c:	1f0c      	subs	r4, r1, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfb8      	it	lt
 800a122:	18e4      	addlt	r4, r4, r3
 800a124:	f000 f9a6 	bl	800a474 <__malloc_lock>
 800a128:	4a1f      	ldr	r2, [pc, #124]	; (800a1a8 <_free_r+0x98>)
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	4610      	mov	r0, r2
 800a12e:	b933      	cbnz	r3, 800a13e <_free_r+0x2e>
 800a130:	6063      	str	r3, [r4, #4]
 800a132:	6014      	str	r4, [r2, #0]
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a13a:	f000 b99c 	b.w	800a476 <__malloc_unlock>
 800a13e:	42a3      	cmp	r3, r4
 800a140:	d90c      	bls.n	800a15c <_free_r+0x4c>
 800a142:	6821      	ldr	r1, [r4, #0]
 800a144:	1862      	adds	r2, r4, r1
 800a146:	4293      	cmp	r3, r2
 800a148:	bf04      	itt	eq
 800a14a:	681a      	ldreq	r2, [r3, #0]
 800a14c:	685b      	ldreq	r3, [r3, #4]
 800a14e:	6063      	str	r3, [r4, #4]
 800a150:	bf04      	itt	eq
 800a152:	1852      	addeq	r2, r2, r1
 800a154:	6022      	streq	r2, [r4, #0]
 800a156:	6004      	str	r4, [r0, #0]
 800a158:	e7ec      	b.n	800a134 <_free_r+0x24>
 800a15a:	4613      	mov	r3, r2
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	b10a      	cbz	r2, 800a164 <_free_r+0x54>
 800a160:	42a2      	cmp	r2, r4
 800a162:	d9fa      	bls.n	800a15a <_free_r+0x4a>
 800a164:	6819      	ldr	r1, [r3, #0]
 800a166:	1858      	adds	r0, r3, r1
 800a168:	42a0      	cmp	r0, r4
 800a16a:	d10b      	bne.n	800a184 <_free_r+0x74>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	4401      	add	r1, r0
 800a170:	1858      	adds	r0, r3, r1
 800a172:	4282      	cmp	r2, r0
 800a174:	6019      	str	r1, [r3, #0]
 800a176:	d1dd      	bne.n	800a134 <_free_r+0x24>
 800a178:	6810      	ldr	r0, [r2, #0]
 800a17a:	6852      	ldr	r2, [r2, #4]
 800a17c:	605a      	str	r2, [r3, #4]
 800a17e:	4401      	add	r1, r0
 800a180:	6019      	str	r1, [r3, #0]
 800a182:	e7d7      	b.n	800a134 <_free_r+0x24>
 800a184:	d902      	bls.n	800a18c <_free_r+0x7c>
 800a186:	230c      	movs	r3, #12
 800a188:	602b      	str	r3, [r5, #0]
 800a18a:	e7d3      	b.n	800a134 <_free_r+0x24>
 800a18c:	6820      	ldr	r0, [r4, #0]
 800a18e:	1821      	adds	r1, r4, r0
 800a190:	428a      	cmp	r2, r1
 800a192:	bf04      	itt	eq
 800a194:	6811      	ldreq	r1, [r2, #0]
 800a196:	6852      	ldreq	r2, [r2, #4]
 800a198:	6062      	str	r2, [r4, #4]
 800a19a:	bf04      	itt	eq
 800a19c:	1809      	addeq	r1, r1, r0
 800a19e:	6021      	streq	r1, [r4, #0]
 800a1a0:	605c      	str	r4, [r3, #4]
 800a1a2:	e7c7      	b.n	800a134 <_free_r+0x24>
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200000e8 	.word	0x200000e8

0800a1ac <_malloc_r>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	1ccd      	adds	r5, r1, #3
 800a1b0:	f025 0503 	bic.w	r5, r5, #3
 800a1b4:	3508      	adds	r5, #8
 800a1b6:	2d0c      	cmp	r5, #12
 800a1b8:	bf38      	it	cc
 800a1ba:	250c      	movcc	r5, #12
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	4606      	mov	r6, r0
 800a1c0:	db01      	blt.n	800a1c6 <_malloc_r+0x1a>
 800a1c2:	42a9      	cmp	r1, r5
 800a1c4:	d903      	bls.n	800a1ce <_malloc_r+0x22>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	6033      	str	r3, [r6, #0]
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	bd70      	pop	{r4, r5, r6, pc}
 800a1ce:	f000 f951 	bl	800a474 <__malloc_lock>
 800a1d2:	4a21      	ldr	r2, [pc, #132]	; (800a258 <_malloc_r+0xac>)
 800a1d4:	6814      	ldr	r4, [r2, #0]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	b991      	cbnz	r1, 800a200 <_malloc_r+0x54>
 800a1da:	4c20      	ldr	r4, [pc, #128]	; (800a25c <_malloc_r+0xb0>)
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	b91b      	cbnz	r3, 800a1e8 <_malloc_r+0x3c>
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f895 	bl	800a310 <_sbrk_r>
 800a1e6:	6020      	str	r0, [r4, #0]
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f000 f890 	bl	800a310 <_sbrk_r>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d124      	bne.n	800a23e <_malloc_r+0x92>
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	6033      	str	r3, [r6, #0]
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f93c 	bl	800a476 <__malloc_unlock>
 800a1fe:	e7e4      	b.n	800a1ca <_malloc_r+0x1e>
 800a200:	680b      	ldr	r3, [r1, #0]
 800a202:	1b5b      	subs	r3, r3, r5
 800a204:	d418      	bmi.n	800a238 <_malloc_r+0x8c>
 800a206:	2b0b      	cmp	r3, #11
 800a208:	d90f      	bls.n	800a22a <_malloc_r+0x7e>
 800a20a:	600b      	str	r3, [r1, #0]
 800a20c:	50cd      	str	r5, [r1, r3]
 800a20e:	18cc      	adds	r4, r1, r3
 800a210:	4630      	mov	r0, r6
 800a212:	f000 f930 	bl	800a476 <__malloc_unlock>
 800a216:	f104 000b 	add.w	r0, r4, #11
 800a21a:	1d23      	adds	r3, r4, #4
 800a21c:	f020 0007 	bic.w	r0, r0, #7
 800a220:	1ac3      	subs	r3, r0, r3
 800a222:	d0d3      	beq.n	800a1cc <_malloc_r+0x20>
 800a224:	425a      	negs	r2, r3
 800a226:	50e2      	str	r2, [r4, r3]
 800a228:	e7d0      	b.n	800a1cc <_malloc_r+0x20>
 800a22a:	428c      	cmp	r4, r1
 800a22c:	684b      	ldr	r3, [r1, #4]
 800a22e:	bf16      	itet	ne
 800a230:	6063      	strne	r3, [r4, #4]
 800a232:	6013      	streq	r3, [r2, #0]
 800a234:	460c      	movne	r4, r1
 800a236:	e7eb      	b.n	800a210 <_malloc_r+0x64>
 800a238:	460c      	mov	r4, r1
 800a23a:	6849      	ldr	r1, [r1, #4]
 800a23c:	e7cc      	b.n	800a1d8 <_malloc_r+0x2c>
 800a23e:	1cc4      	adds	r4, r0, #3
 800a240:	f024 0403 	bic.w	r4, r4, #3
 800a244:	42a0      	cmp	r0, r4
 800a246:	d005      	beq.n	800a254 <_malloc_r+0xa8>
 800a248:	1a21      	subs	r1, r4, r0
 800a24a:	4630      	mov	r0, r6
 800a24c:	f000 f860 	bl	800a310 <_sbrk_r>
 800a250:	3001      	adds	r0, #1
 800a252:	d0cf      	beq.n	800a1f4 <_malloc_r+0x48>
 800a254:	6025      	str	r5, [r4, #0]
 800a256:	e7db      	b.n	800a210 <_malloc_r+0x64>
 800a258:	200000e8 	.word	0x200000e8
 800a25c:	200000ec 	.word	0x200000ec

0800a260 <srand>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <srand+0x38>)
 800a264:	681c      	ldr	r4, [r3, #0]
 800a266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a268:	4605      	mov	r5, r0
 800a26a:	b97b      	cbnz	r3, 800a28c <srand+0x2c>
 800a26c:	2018      	movs	r0, #24
 800a26e:	f7ff ff37 	bl	800a0e0 <malloc>
 800a272:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <srand+0x3c>)
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <srand+0x40>)
 800a276:	63a0      	str	r0, [r4, #56]	; 0x38
 800a278:	e9c0 2300 	strd	r2, r3, [r0]
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <srand+0x44>)
 800a27e:	6083      	str	r3, [r0, #8]
 800a280:	230b      	movs	r3, #11
 800a282:	8183      	strh	r3, [r0, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	2300      	movs	r3, #0
 800a288:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a28c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a28e:	2200      	movs	r2, #0
 800a290:	611d      	str	r5, [r3, #16]
 800a292:	615a      	str	r2, [r3, #20]
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	2000002c 	.word	0x2000002c
 800a29c:	abcd330e 	.word	0xabcd330e
 800a2a0:	e66d1234 	.word	0xe66d1234
 800a2a4:	0005deec 	.word	0x0005deec

0800a2a8 <rand>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <rand+0x50>)
 800a2ac:	681c      	ldr	r4, [r3, #0]
 800a2ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2b0:	b97b      	cbnz	r3, 800a2d2 <rand+0x2a>
 800a2b2:	2018      	movs	r0, #24
 800a2b4:	f7ff ff14 	bl	800a0e0 <malloc>
 800a2b8:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <rand+0x54>)
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <rand+0x58>)
 800a2bc:	63a0      	str	r0, [r4, #56]	; 0x38
 800a2be:	e9c0 2300 	strd	r2, r3, [r0]
 800a2c2:	4b10      	ldr	r3, [pc, #64]	; (800a304 <rand+0x5c>)
 800a2c4:	6083      	str	r3, [r0, #8]
 800a2c6:	230b      	movs	r3, #11
 800a2c8:	8183      	strh	r3, [r0, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a2d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a2d4:	480c      	ldr	r0, [pc, #48]	; (800a308 <rand+0x60>)
 800a2d6:	690a      	ldr	r2, [r1, #16]
 800a2d8:	694b      	ldr	r3, [r1, #20]
 800a2da:	4c0c      	ldr	r4, [pc, #48]	; (800a30c <rand+0x64>)
 800a2dc:	4350      	muls	r0, r2
 800a2de:	fb04 0003 	mla	r0, r4, r3, r0
 800a2e2:	fba2 2304 	umull	r2, r3, r2, r4
 800a2e6:	4403      	add	r3, r0
 800a2e8:	1c54      	adds	r4, r2, #1
 800a2ea:	f143 0500 	adc.w	r5, r3, #0
 800a2ee:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800a2f2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	2000002c 	.word	0x2000002c
 800a2fc:	abcd330e 	.word	0xabcd330e
 800a300:	e66d1234 	.word	0xe66d1234
 800a304:	0005deec 	.word	0x0005deec
 800a308:	5851f42d 	.word	0x5851f42d
 800a30c:	4c957f2d 	.word	0x4c957f2d

0800a310 <_sbrk_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4c06      	ldr	r4, [pc, #24]	; (800a32c <_sbrk_r+0x1c>)
 800a314:	2300      	movs	r3, #0
 800a316:	4605      	mov	r5, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	f7f7 fcee 	bl	8001cfc <_sbrk>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_sbrk_r+0x1a>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	b103      	cbz	r3, 800a32a <_sbrk_r+0x1a>
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	200009e4 	.word	0x200009e4

0800a330 <siprintf>:
 800a330:	b40e      	push	{r1, r2, r3}
 800a332:	b500      	push	{lr}
 800a334:	b09c      	sub	sp, #112	; 0x70
 800a336:	ab1d      	add	r3, sp, #116	; 0x74
 800a338:	9002      	str	r0, [sp, #8]
 800a33a:	9006      	str	r0, [sp, #24]
 800a33c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a340:	4809      	ldr	r0, [pc, #36]	; (800a368 <siprintf+0x38>)
 800a342:	9107      	str	r1, [sp, #28]
 800a344:	9104      	str	r1, [sp, #16]
 800a346:	4909      	ldr	r1, [pc, #36]	; (800a36c <siprintf+0x3c>)
 800a348:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	6800      	ldr	r0, [r0, #0]
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	a902      	add	r1, sp, #8
 800a354:	f000 f8ea 	bl	800a52c <_svfiprintf_r>
 800a358:	9b02      	ldr	r3, [sp, #8]
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	b01c      	add	sp, #112	; 0x70
 800a360:	f85d eb04 	ldr.w	lr, [sp], #4
 800a364:	b003      	add	sp, #12
 800a366:	4770      	bx	lr
 800a368:	2000002c 	.word	0x2000002c
 800a36c:	ffff0208 	.word	0xffff0208

0800a370 <strcat>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4603      	mov	r3, r0
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	1c5c      	adds	r4, r3, #1
 800a378:	b93a      	cbnz	r2, 800a38a <strcat+0x1a>
 800a37a:	3b01      	subs	r3, #1
 800a37c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a380:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a384:	2a00      	cmp	r2, #0
 800a386:	d1f9      	bne.n	800a37c <strcat+0xc>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	4623      	mov	r3, r4
 800a38c:	e7f2      	b.n	800a374 <strcat+0x4>

0800a38e <strcpy>:
 800a38e:	4603      	mov	r3, r0
 800a390:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a394:	f803 2b01 	strb.w	r2, [r3], #1
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d1f9      	bne.n	800a390 <strcpy+0x2>
 800a39c:	4770      	bx	lr
	...

0800a3a0 <time>:
 800a3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <time+0x30>)
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4669      	mov	r1, sp
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	f000 f850 	bl	800a450 <_gettimeofday_r>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	da05      	bge.n	800a3c0 <time+0x20>
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3bc:	e9cd 2300 	strd	r2, r3, [sp]
 800a3c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c4:	b10c      	cbz	r4, 800a3ca <time+0x2a>
 800a3c6:	e9c4 0100 	strd	r0, r1, [r4]
 800a3ca:	b004      	add	sp, #16
 800a3cc:	bd10      	pop	{r4, pc}
 800a3ce:	bf00      	nop
 800a3d0:	2000002c 	.word	0x2000002c

0800a3d4 <__utoa>:
 800a3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <__utoa+0x78>)
 800a3d8:	b08b      	sub	sp, #44	; 0x2c
 800a3da:	4605      	mov	r5, r0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	466e      	mov	r6, sp
 800a3e0:	f103 0c20 	add.w	ip, r3, #32
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	6859      	ldr	r1, [r3, #4]
 800a3e8:	4637      	mov	r7, r6
 800a3ea:	c703      	stmia	r7!, {r0, r1}
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	4563      	cmp	r3, ip
 800a3f0:	463e      	mov	r6, r7
 800a3f2:	d1f7      	bne.n	800a3e4 <__utoa+0x10>
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	791b      	ldrb	r3, [r3, #4]
 800a3f8:	713b      	strb	r3, [r7, #4]
 800a3fa:	1e93      	subs	r3, r2, #2
 800a3fc:	2b22      	cmp	r3, #34	; 0x22
 800a3fe:	6038      	str	r0, [r7, #0]
 800a400:	f04f 0300 	mov.w	r3, #0
 800a404:	d904      	bls.n	800a410 <__utoa+0x3c>
 800a406:	7023      	strb	r3, [r4, #0]
 800a408:	461c      	mov	r4, r3
 800a40a:	4620      	mov	r0, r4
 800a40c:	b00b      	add	sp, #44	; 0x2c
 800a40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a410:	1e66      	subs	r6, r4, #1
 800a412:	fbb5 f0f2 	udiv	r0, r5, r2
 800a416:	af0a      	add	r7, sp, #40	; 0x28
 800a418:	fb02 5510 	mls	r5, r2, r0, r5
 800a41c:	443d      	add	r5, r7
 800a41e:	1c59      	adds	r1, r3, #1
 800a420:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800a424:	f806 5f01 	strb.w	r5, [r6, #1]!
 800a428:	4605      	mov	r5, r0
 800a42a:	b968      	cbnz	r0, 800a448 <__utoa+0x74>
 800a42c:	5460      	strb	r0, [r4, r1]
 800a42e:	4423      	add	r3, r4
 800a430:	4622      	mov	r2, r4
 800a432:	1b19      	subs	r1, r3, r4
 800a434:	1b10      	subs	r0, r2, r4
 800a436:	4281      	cmp	r1, r0
 800a438:	dde7      	ble.n	800a40a <__utoa+0x36>
 800a43a:	7811      	ldrb	r1, [r2, #0]
 800a43c:	7818      	ldrb	r0, [r3, #0]
 800a43e:	f802 0b01 	strb.w	r0, [r2], #1
 800a442:	f803 1901 	strb.w	r1, [r3], #-1
 800a446:	e7f4      	b.n	800a432 <__utoa+0x5e>
 800a448:	460b      	mov	r3, r1
 800a44a:	e7e2      	b.n	800a412 <__utoa+0x3e>
 800a44c:	0800aba4 	.word	0x0800aba4

0800a450 <_gettimeofday_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4c07      	ldr	r4, [pc, #28]	; (800a470 <_gettimeofday_r+0x20>)
 800a454:	2300      	movs	r3, #0
 800a456:	4605      	mov	r5, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	4611      	mov	r1, r2
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	f000 fb37 	bl	800aad0 <_gettimeofday>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d102      	bne.n	800a46c <_gettimeofday_r+0x1c>
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	b103      	cbz	r3, 800a46c <_gettimeofday_r+0x1c>
 800a46a:	602b      	str	r3, [r5, #0]
 800a46c:	bd38      	pop	{r3, r4, r5, pc}
 800a46e:	bf00      	nop
 800a470:	200009e4 	.word	0x200009e4

0800a474 <__malloc_lock>:
 800a474:	4770      	bx	lr

0800a476 <__malloc_unlock>:
 800a476:	4770      	bx	lr

0800a478 <__ssputs_r>:
 800a478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a47c:	688e      	ldr	r6, [r1, #8]
 800a47e:	429e      	cmp	r6, r3
 800a480:	4682      	mov	sl, r0
 800a482:	460c      	mov	r4, r1
 800a484:	4690      	mov	r8, r2
 800a486:	4699      	mov	r9, r3
 800a488:	d837      	bhi.n	800a4fa <__ssputs_r+0x82>
 800a48a:	898a      	ldrh	r2, [r1, #12]
 800a48c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a490:	d031      	beq.n	800a4f6 <__ssputs_r+0x7e>
 800a492:	6825      	ldr	r5, [r4, #0]
 800a494:	6909      	ldr	r1, [r1, #16]
 800a496:	1a6f      	subs	r7, r5, r1
 800a498:	6965      	ldr	r5, [r4, #20]
 800a49a:	2302      	movs	r3, #2
 800a49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a4a4:	f109 0301 	add.w	r3, r9, #1
 800a4a8:	443b      	add	r3, r7
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	bf38      	it	cc
 800a4ae:	461d      	movcc	r5, r3
 800a4b0:	0553      	lsls	r3, r2, #21
 800a4b2:	d530      	bpl.n	800a516 <__ssputs_r+0x9e>
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	f7ff fe79 	bl	800a1ac <_malloc_r>
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	b950      	cbnz	r0, 800a4d4 <__ssputs_r+0x5c>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	f8ca 3000 	str.w	r3, [sl]
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d4:	463a      	mov	r2, r7
 800a4d6:	6921      	ldr	r1, [r4, #16]
 800a4d8:	f000 faa8 	bl	800aa2c <memcpy>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e6:	81a3      	strh	r3, [r4, #12]
 800a4e8:	6126      	str	r6, [r4, #16]
 800a4ea:	6165      	str	r5, [r4, #20]
 800a4ec:	443e      	add	r6, r7
 800a4ee:	1bed      	subs	r5, r5, r7
 800a4f0:	6026      	str	r6, [r4, #0]
 800a4f2:	60a5      	str	r5, [r4, #8]
 800a4f4:	464e      	mov	r6, r9
 800a4f6:	454e      	cmp	r6, r9
 800a4f8:	d900      	bls.n	800a4fc <__ssputs_r+0x84>
 800a4fa:	464e      	mov	r6, r9
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	4641      	mov	r1, r8
 800a500:	6820      	ldr	r0, [r4, #0]
 800a502:	f000 fa9e 	bl	800aa42 <memmove>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	1b9b      	subs	r3, r3, r6
 800a50a:	60a3      	str	r3, [r4, #8]
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	441e      	add	r6, r3
 800a510:	6026      	str	r6, [r4, #0]
 800a512:	2000      	movs	r0, #0
 800a514:	e7dc      	b.n	800a4d0 <__ssputs_r+0x58>
 800a516:	462a      	mov	r2, r5
 800a518:	f000 faac 	bl	800aa74 <_realloc_r>
 800a51c:	4606      	mov	r6, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	d1e2      	bne.n	800a4e8 <__ssputs_r+0x70>
 800a522:	6921      	ldr	r1, [r4, #16]
 800a524:	4650      	mov	r0, sl
 800a526:	f7ff fdf3 	bl	800a110 <_free_r>
 800a52a:	e7c8      	b.n	800a4be <__ssputs_r+0x46>

0800a52c <_svfiprintf_r>:
 800a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a530:	461d      	mov	r5, r3
 800a532:	898b      	ldrh	r3, [r1, #12]
 800a534:	061f      	lsls	r7, r3, #24
 800a536:	b09d      	sub	sp, #116	; 0x74
 800a538:	4680      	mov	r8, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	4616      	mov	r6, r2
 800a53e:	d50f      	bpl.n	800a560 <_svfiprintf_r+0x34>
 800a540:	690b      	ldr	r3, [r1, #16]
 800a542:	b96b      	cbnz	r3, 800a560 <_svfiprintf_r+0x34>
 800a544:	2140      	movs	r1, #64	; 0x40
 800a546:	f7ff fe31 	bl	800a1ac <_malloc_r>
 800a54a:	6020      	str	r0, [r4, #0]
 800a54c:	6120      	str	r0, [r4, #16]
 800a54e:	b928      	cbnz	r0, 800a55c <_svfiprintf_r+0x30>
 800a550:	230c      	movs	r3, #12
 800a552:	f8c8 3000 	str.w	r3, [r8]
 800a556:	f04f 30ff 	mov.w	r0, #4294967295
 800a55a:	e0c8      	b.n	800a6ee <_svfiprintf_r+0x1c2>
 800a55c:	2340      	movs	r3, #64	; 0x40
 800a55e:	6163      	str	r3, [r4, #20]
 800a560:	2300      	movs	r3, #0
 800a562:	9309      	str	r3, [sp, #36]	; 0x24
 800a564:	2320      	movs	r3, #32
 800a566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a56a:	2330      	movs	r3, #48	; 0x30
 800a56c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a570:	9503      	str	r5, [sp, #12]
 800a572:	f04f 0b01 	mov.w	fp, #1
 800a576:	4637      	mov	r7, r6
 800a578:	463d      	mov	r5, r7
 800a57a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a57e:	b10b      	cbz	r3, 800a584 <_svfiprintf_r+0x58>
 800a580:	2b25      	cmp	r3, #37	; 0x25
 800a582:	d13e      	bne.n	800a602 <_svfiprintf_r+0xd6>
 800a584:	ebb7 0a06 	subs.w	sl, r7, r6
 800a588:	d00b      	beq.n	800a5a2 <_svfiprintf_r+0x76>
 800a58a:	4653      	mov	r3, sl
 800a58c:	4632      	mov	r2, r6
 800a58e:	4621      	mov	r1, r4
 800a590:	4640      	mov	r0, r8
 800a592:	f7ff ff71 	bl	800a478 <__ssputs_r>
 800a596:	3001      	adds	r0, #1
 800a598:	f000 80a4 	beq.w	800a6e4 <_svfiprintf_r+0x1b8>
 800a59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59e:	4453      	add	r3, sl
 800a5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a2:	783b      	ldrb	r3, [r7, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 809d 	beq.w	800a6e4 <_svfiprintf_r+0x1b8>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b4:	9304      	str	r3, [sp, #16]
 800a5b6:	9307      	str	r3, [sp, #28]
 800a5b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a5be:	462f      	mov	r7, r5
 800a5c0:	2205      	movs	r2, #5
 800a5c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a5c6:	4850      	ldr	r0, [pc, #320]	; (800a708 <_svfiprintf_r+0x1dc>)
 800a5c8:	f7f5 fe0a 	bl	80001e0 <memchr>
 800a5cc:	9b04      	ldr	r3, [sp, #16]
 800a5ce:	b9d0      	cbnz	r0, 800a606 <_svfiprintf_r+0xda>
 800a5d0:	06d9      	lsls	r1, r3, #27
 800a5d2:	bf44      	itt	mi
 800a5d4:	2220      	movmi	r2, #32
 800a5d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5da:	071a      	lsls	r2, r3, #28
 800a5dc:	bf44      	itt	mi
 800a5de:	222b      	movmi	r2, #43	; 0x2b
 800a5e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5e4:	782a      	ldrb	r2, [r5, #0]
 800a5e6:	2a2a      	cmp	r2, #42	; 0x2a
 800a5e8:	d015      	beq.n	800a616 <_svfiprintf_r+0xea>
 800a5ea:	9a07      	ldr	r2, [sp, #28]
 800a5ec:	462f      	mov	r7, r5
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	250a      	movs	r5, #10
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f8:	3b30      	subs	r3, #48	; 0x30
 800a5fa:	2b09      	cmp	r3, #9
 800a5fc:	d94d      	bls.n	800a69a <_svfiprintf_r+0x16e>
 800a5fe:	b1b8      	cbz	r0, 800a630 <_svfiprintf_r+0x104>
 800a600:	e00f      	b.n	800a622 <_svfiprintf_r+0xf6>
 800a602:	462f      	mov	r7, r5
 800a604:	e7b8      	b.n	800a578 <_svfiprintf_r+0x4c>
 800a606:	4a40      	ldr	r2, [pc, #256]	; (800a708 <_svfiprintf_r+0x1dc>)
 800a608:	1a80      	subs	r0, r0, r2
 800a60a:	fa0b f000 	lsl.w	r0, fp, r0
 800a60e:	4318      	orrs	r0, r3
 800a610:	9004      	str	r0, [sp, #16]
 800a612:	463d      	mov	r5, r7
 800a614:	e7d3      	b.n	800a5be <_svfiprintf_r+0x92>
 800a616:	9a03      	ldr	r2, [sp, #12]
 800a618:	1d11      	adds	r1, r2, #4
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	9103      	str	r1, [sp, #12]
 800a61e:	2a00      	cmp	r2, #0
 800a620:	db01      	blt.n	800a626 <_svfiprintf_r+0xfa>
 800a622:	9207      	str	r2, [sp, #28]
 800a624:	e004      	b.n	800a630 <_svfiprintf_r+0x104>
 800a626:	4252      	negs	r2, r2
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	9207      	str	r2, [sp, #28]
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	783b      	ldrb	r3, [r7, #0]
 800a632:	2b2e      	cmp	r3, #46	; 0x2e
 800a634:	d10c      	bne.n	800a650 <_svfiprintf_r+0x124>
 800a636:	787b      	ldrb	r3, [r7, #1]
 800a638:	2b2a      	cmp	r3, #42	; 0x2a
 800a63a:	d133      	bne.n	800a6a4 <_svfiprintf_r+0x178>
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	1d1a      	adds	r2, r3, #4
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	9203      	str	r2, [sp, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	bfb8      	it	lt
 800a648:	f04f 33ff 	movlt.w	r3, #4294967295
 800a64c:	3702      	adds	r7, #2
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	4d2e      	ldr	r5, [pc, #184]	; (800a70c <_svfiprintf_r+0x1e0>)
 800a652:	7839      	ldrb	r1, [r7, #0]
 800a654:	2203      	movs	r2, #3
 800a656:	4628      	mov	r0, r5
 800a658:	f7f5 fdc2 	bl	80001e0 <memchr>
 800a65c:	b138      	cbz	r0, 800a66e <_svfiprintf_r+0x142>
 800a65e:	2340      	movs	r3, #64	; 0x40
 800a660:	1b40      	subs	r0, r0, r5
 800a662:	fa03 f000 	lsl.w	r0, r3, r0
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	4303      	orrs	r3, r0
 800a66a:	3701      	adds	r7, #1
 800a66c:	9304      	str	r3, [sp, #16]
 800a66e:	7839      	ldrb	r1, [r7, #0]
 800a670:	4827      	ldr	r0, [pc, #156]	; (800a710 <_svfiprintf_r+0x1e4>)
 800a672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a676:	2206      	movs	r2, #6
 800a678:	1c7e      	adds	r6, r7, #1
 800a67a:	f7f5 fdb1 	bl	80001e0 <memchr>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d038      	beq.n	800a6f4 <_svfiprintf_r+0x1c8>
 800a682:	4b24      	ldr	r3, [pc, #144]	; (800a714 <_svfiprintf_r+0x1e8>)
 800a684:	bb13      	cbnz	r3, 800a6cc <_svfiprintf_r+0x1a0>
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	3307      	adds	r3, #7
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	3308      	adds	r3, #8
 800a690:	9303      	str	r3, [sp, #12]
 800a692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a694:	444b      	add	r3, r9
 800a696:	9309      	str	r3, [sp, #36]	; 0x24
 800a698:	e76d      	b.n	800a576 <_svfiprintf_r+0x4a>
 800a69a:	fb05 3202 	mla	r2, r5, r2, r3
 800a69e:	2001      	movs	r0, #1
 800a6a0:	460f      	mov	r7, r1
 800a6a2:	e7a6      	b.n	800a5f2 <_svfiprintf_r+0xc6>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	3701      	adds	r7, #1
 800a6a8:	9305      	str	r3, [sp, #20]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	250a      	movs	r5, #10
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b4:	3a30      	subs	r2, #48	; 0x30
 800a6b6:	2a09      	cmp	r2, #9
 800a6b8:	d903      	bls.n	800a6c2 <_svfiprintf_r+0x196>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0c8      	beq.n	800a650 <_svfiprintf_r+0x124>
 800a6be:	9105      	str	r1, [sp, #20]
 800a6c0:	e7c6      	b.n	800a650 <_svfiprintf_r+0x124>
 800a6c2:	fb05 2101 	mla	r1, r5, r1, r2
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	e7f0      	b.n	800a6ae <_svfiprintf_r+0x182>
 800a6cc:	ab03      	add	r3, sp, #12
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4b11      	ldr	r3, [pc, #68]	; (800a718 <_svfiprintf_r+0x1ec>)
 800a6d4:	a904      	add	r1, sp, #16
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f3af 8000 	nop.w
 800a6dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a6e0:	4681      	mov	r9, r0
 800a6e2:	d1d6      	bne.n	800a692 <_svfiprintf_r+0x166>
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	065b      	lsls	r3, r3, #25
 800a6e8:	f53f af35 	bmi.w	800a556 <_svfiprintf_r+0x2a>
 800a6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ee:	b01d      	add	sp, #116	; 0x74
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	ab03      	add	r3, sp, #12
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4b07      	ldr	r3, [pc, #28]	; (800a718 <_svfiprintf_r+0x1ec>)
 800a6fc:	a904      	add	r1, sp, #16
 800a6fe:	4640      	mov	r0, r8
 800a700:	f000 f882 	bl	800a808 <_printf_i>
 800a704:	e7ea      	b.n	800a6dc <_svfiprintf_r+0x1b0>
 800a706:	bf00      	nop
 800a708:	0800abc9 	.word	0x0800abc9
 800a70c:	0800abcf 	.word	0x0800abcf
 800a710:	0800abd3 	.word	0x0800abd3
 800a714:	00000000 	.word	0x00000000
 800a718:	0800a479 	.word	0x0800a479

0800a71c <_printf_common>:
 800a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	4691      	mov	r9, r2
 800a722:	461f      	mov	r7, r3
 800a724:	688a      	ldr	r2, [r1, #8]
 800a726:	690b      	ldr	r3, [r1, #16]
 800a728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a72c:	4293      	cmp	r3, r2
 800a72e:	bfb8      	it	lt
 800a730:	4613      	movlt	r3, r2
 800a732:	f8c9 3000 	str.w	r3, [r9]
 800a736:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a73a:	4606      	mov	r6, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	b112      	cbz	r2, 800a746 <_printf_common+0x2a>
 800a740:	3301      	adds	r3, #1
 800a742:	f8c9 3000 	str.w	r3, [r9]
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	0699      	lsls	r1, r3, #26
 800a74a:	bf42      	ittt	mi
 800a74c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a750:	3302      	addmi	r3, #2
 800a752:	f8c9 3000 	strmi.w	r3, [r9]
 800a756:	6825      	ldr	r5, [r4, #0]
 800a758:	f015 0506 	ands.w	r5, r5, #6
 800a75c:	d107      	bne.n	800a76e <_printf_common+0x52>
 800a75e:	f104 0a19 	add.w	sl, r4, #25
 800a762:	68e3      	ldr	r3, [r4, #12]
 800a764:	f8d9 2000 	ldr.w	r2, [r9]
 800a768:	1a9b      	subs	r3, r3, r2
 800a76a:	42ab      	cmp	r3, r5
 800a76c:	dc28      	bgt.n	800a7c0 <_printf_common+0xa4>
 800a76e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	3300      	adds	r3, #0
 800a776:	bf18      	it	ne
 800a778:	2301      	movne	r3, #1
 800a77a:	0692      	lsls	r2, r2, #26
 800a77c:	d42d      	bmi.n	800a7da <_printf_common+0xbe>
 800a77e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a782:	4639      	mov	r1, r7
 800a784:	4630      	mov	r0, r6
 800a786:	47c0      	blx	r8
 800a788:	3001      	adds	r0, #1
 800a78a:	d020      	beq.n	800a7ce <_printf_common+0xb2>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	68e5      	ldr	r5, [r4, #12]
 800a790:	f8d9 2000 	ldr.w	r2, [r9]
 800a794:	f003 0306 	and.w	r3, r3, #6
 800a798:	2b04      	cmp	r3, #4
 800a79a:	bf08      	it	eq
 800a79c:	1aad      	subeq	r5, r5, r2
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	6922      	ldr	r2, [r4, #16]
 800a7a2:	bf0c      	ite	eq
 800a7a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7a8:	2500      	movne	r5, #0
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	bfc4      	itt	gt
 800a7ae:	1a9b      	subgt	r3, r3, r2
 800a7b0:	18ed      	addgt	r5, r5, r3
 800a7b2:	f04f 0900 	mov.w	r9, #0
 800a7b6:	341a      	adds	r4, #26
 800a7b8:	454d      	cmp	r5, r9
 800a7ba:	d11a      	bne.n	800a7f2 <_printf_common+0xd6>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e008      	b.n	800a7d2 <_printf_common+0xb6>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4652      	mov	r2, sl
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	47c0      	blx	r8
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d103      	bne.n	800a7d6 <_printf_common+0xba>
 800a7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	e7c3      	b.n	800a762 <_printf_common+0x46>
 800a7da:	18e1      	adds	r1, r4, r3
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	2030      	movs	r0, #48	; 0x30
 800a7e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7e4:	4422      	add	r2, r4
 800a7e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	e7c5      	b.n	800a77e <_printf_common+0x62>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	47c0      	blx	r8
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d0e6      	beq.n	800a7ce <_printf_common+0xb2>
 800a800:	f109 0901 	add.w	r9, r9, #1
 800a804:	e7d8      	b.n	800a7b8 <_printf_common+0x9c>
	...

0800a808 <_printf_i>:
 800a808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a80c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a810:	460c      	mov	r4, r1
 800a812:	7e09      	ldrb	r1, [r1, #24]
 800a814:	b085      	sub	sp, #20
 800a816:	296e      	cmp	r1, #110	; 0x6e
 800a818:	4617      	mov	r7, r2
 800a81a:	4606      	mov	r6, r0
 800a81c:	4698      	mov	r8, r3
 800a81e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a820:	f000 80b3 	beq.w	800a98a <_printf_i+0x182>
 800a824:	d822      	bhi.n	800a86c <_printf_i+0x64>
 800a826:	2963      	cmp	r1, #99	; 0x63
 800a828:	d036      	beq.n	800a898 <_printf_i+0x90>
 800a82a:	d80a      	bhi.n	800a842 <_printf_i+0x3a>
 800a82c:	2900      	cmp	r1, #0
 800a82e:	f000 80b9 	beq.w	800a9a4 <_printf_i+0x19c>
 800a832:	2958      	cmp	r1, #88	; 0x58
 800a834:	f000 8083 	beq.w	800a93e <_printf_i+0x136>
 800a838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a83c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a840:	e032      	b.n	800a8a8 <_printf_i+0xa0>
 800a842:	2964      	cmp	r1, #100	; 0x64
 800a844:	d001      	beq.n	800a84a <_printf_i+0x42>
 800a846:	2969      	cmp	r1, #105	; 0x69
 800a848:	d1f6      	bne.n	800a838 <_printf_i+0x30>
 800a84a:	6820      	ldr	r0, [r4, #0]
 800a84c:	6813      	ldr	r3, [r2, #0]
 800a84e:	0605      	lsls	r5, r0, #24
 800a850:	f103 0104 	add.w	r1, r3, #4
 800a854:	d52a      	bpl.n	800a8ac <_printf_i+0xa4>
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6011      	str	r1, [r2, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	da03      	bge.n	800a866 <_printf_i+0x5e>
 800a85e:	222d      	movs	r2, #45	; 0x2d
 800a860:	425b      	negs	r3, r3
 800a862:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a866:	486f      	ldr	r0, [pc, #444]	; (800aa24 <_printf_i+0x21c>)
 800a868:	220a      	movs	r2, #10
 800a86a:	e039      	b.n	800a8e0 <_printf_i+0xd8>
 800a86c:	2973      	cmp	r1, #115	; 0x73
 800a86e:	f000 809d 	beq.w	800a9ac <_printf_i+0x1a4>
 800a872:	d808      	bhi.n	800a886 <_printf_i+0x7e>
 800a874:	296f      	cmp	r1, #111	; 0x6f
 800a876:	d020      	beq.n	800a8ba <_printf_i+0xb2>
 800a878:	2970      	cmp	r1, #112	; 0x70
 800a87a:	d1dd      	bne.n	800a838 <_printf_i+0x30>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	f043 0320 	orr.w	r3, r3, #32
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	e003      	b.n	800a88e <_printf_i+0x86>
 800a886:	2975      	cmp	r1, #117	; 0x75
 800a888:	d017      	beq.n	800a8ba <_printf_i+0xb2>
 800a88a:	2978      	cmp	r1, #120	; 0x78
 800a88c:	d1d4      	bne.n	800a838 <_printf_i+0x30>
 800a88e:	2378      	movs	r3, #120	; 0x78
 800a890:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a894:	4864      	ldr	r0, [pc, #400]	; (800aa28 <_printf_i+0x220>)
 800a896:	e055      	b.n	800a944 <_printf_i+0x13c>
 800a898:	6813      	ldr	r3, [r2, #0]
 800a89a:	1d19      	adds	r1, r3, #4
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6011      	str	r1, [r2, #0]
 800a8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e08c      	b.n	800a9c6 <_printf_i+0x1be>
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6011      	str	r1, [r2, #0]
 800a8b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8b4:	bf18      	it	ne
 800a8b6:	b21b      	sxthne	r3, r3
 800a8b8:	e7cf      	b.n	800a85a <_printf_i+0x52>
 800a8ba:	6813      	ldr	r3, [r2, #0]
 800a8bc:	6825      	ldr	r5, [r4, #0]
 800a8be:	1d18      	adds	r0, r3, #4
 800a8c0:	6010      	str	r0, [r2, #0]
 800a8c2:	0628      	lsls	r0, r5, #24
 800a8c4:	d501      	bpl.n	800a8ca <_printf_i+0xc2>
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	e002      	b.n	800a8d0 <_printf_i+0xc8>
 800a8ca:	0668      	lsls	r0, r5, #25
 800a8cc:	d5fb      	bpl.n	800a8c6 <_printf_i+0xbe>
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	4854      	ldr	r0, [pc, #336]	; (800aa24 <_printf_i+0x21c>)
 800a8d2:	296f      	cmp	r1, #111	; 0x6f
 800a8d4:	bf14      	ite	ne
 800a8d6:	220a      	movne	r2, #10
 800a8d8:	2208      	moveq	r2, #8
 800a8da:	2100      	movs	r1, #0
 800a8dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8e0:	6865      	ldr	r5, [r4, #4]
 800a8e2:	60a5      	str	r5, [r4, #8]
 800a8e4:	2d00      	cmp	r5, #0
 800a8e6:	f2c0 8095 	blt.w	800aa14 <_printf_i+0x20c>
 800a8ea:	6821      	ldr	r1, [r4, #0]
 800a8ec:	f021 0104 	bic.w	r1, r1, #4
 800a8f0:	6021      	str	r1, [r4, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d13d      	bne.n	800a972 <_printf_i+0x16a>
 800a8f6:	2d00      	cmp	r5, #0
 800a8f8:	f040 808e 	bne.w	800aa18 <_printf_i+0x210>
 800a8fc:	4665      	mov	r5, ip
 800a8fe:	2a08      	cmp	r2, #8
 800a900:	d10b      	bne.n	800a91a <_printf_i+0x112>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	07db      	lsls	r3, r3, #31
 800a906:	d508      	bpl.n	800a91a <_printf_i+0x112>
 800a908:	6923      	ldr	r3, [r4, #16]
 800a90a:	6862      	ldr	r2, [r4, #4]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	bfde      	ittt	le
 800a910:	2330      	movle	r3, #48	; 0x30
 800a912:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a91a:	ebac 0305 	sub.w	r3, ip, r5
 800a91e:	6123      	str	r3, [r4, #16]
 800a920:	f8cd 8000 	str.w	r8, [sp]
 800a924:	463b      	mov	r3, r7
 800a926:	aa03      	add	r2, sp, #12
 800a928:	4621      	mov	r1, r4
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7ff fef6 	bl	800a71c <_printf_common>
 800a930:	3001      	adds	r0, #1
 800a932:	d14d      	bne.n	800a9d0 <_printf_i+0x1c8>
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	b005      	add	sp, #20
 800a93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93e:	4839      	ldr	r0, [pc, #228]	; (800aa24 <_printf_i+0x21c>)
 800a940:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	6821      	ldr	r1, [r4, #0]
 800a948:	1d1d      	adds	r5, r3, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6015      	str	r5, [r2, #0]
 800a94e:	060a      	lsls	r2, r1, #24
 800a950:	d50b      	bpl.n	800a96a <_printf_i+0x162>
 800a952:	07ca      	lsls	r2, r1, #31
 800a954:	bf44      	itt	mi
 800a956:	f041 0120 	orrmi.w	r1, r1, #32
 800a95a:	6021      	strmi	r1, [r4, #0]
 800a95c:	b91b      	cbnz	r3, 800a966 <_printf_i+0x15e>
 800a95e:	6822      	ldr	r2, [r4, #0]
 800a960:	f022 0220 	bic.w	r2, r2, #32
 800a964:	6022      	str	r2, [r4, #0]
 800a966:	2210      	movs	r2, #16
 800a968:	e7b7      	b.n	800a8da <_printf_i+0xd2>
 800a96a:	064d      	lsls	r5, r1, #25
 800a96c:	bf48      	it	mi
 800a96e:	b29b      	uxthmi	r3, r3
 800a970:	e7ef      	b.n	800a952 <_printf_i+0x14a>
 800a972:	4665      	mov	r5, ip
 800a974:	fbb3 f1f2 	udiv	r1, r3, r2
 800a978:	fb02 3311 	mls	r3, r2, r1, r3
 800a97c:	5cc3      	ldrb	r3, [r0, r3]
 800a97e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a982:	460b      	mov	r3, r1
 800a984:	2900      	cmp	r1, #0
 800a986:	d1f5      	bne.n	800a974 <_printf_i+0x16c>
 800a988:	e7b9      	b.n	800a8fe <_printf_i+0xf6>
 800a98a:	6813      	ldr	r3, [r2, #0]
 800a98c:	6825      	ldr	r5, [r4, #0]
 800a98e:	6961      	ldr	r1, [r4, #20]
 800a990:	1d18      	adds	r0, r3, #4
 800a992:	6010      	str	r0, [r2, #0]
 800a994:	0628      	lsls	r0, r5, #24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	d501      	bpl.n	800a99e <_printf_i+0x196>
 800a99a:	6019      	str	r1, [r3, #0]
 800a99c:	e002      	b.n	800a9a4 <_printf_i+0x19c>
 800a99e:	066a      	lsls	r2, r5, #25
 800a9a0:	d5fb      	bpl.n	800a99a <_printf_i+0x192>
 800a9a2:	8019      	strh	r1, [r3, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	6123      	str	r3, [r4, #16]
 800a9a8:	4665      	mov	r5, ip
 800a9aa:	e7b9      	b.n	800a920 <_printf_i+0x118>
 800a9ac:	6813      	ldr	r3, [r2, #0]
 800a9ae:	1d19      	adds	r1, r3, #4
 800a9b0:	6011      	str	r1, [r2, #0]
 800a9b2:	681d      	ldr	r5, [r3, #0]
 800a9b4:	6862      	ldr	r2, [r4, #4]
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f7f5 fc11 	bl	80001e0 <memchr>
 800a9be:	b108      	cbz	r0, 800a9c4 <_printf_i+0x1bc>
 800a9c0:	1b40      	subs	r0, r0, r5
 800a9c2:	6060      	str	r0, [r4, #4]
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	6123      	str	r3, [r4, #16]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ce:	e7a7      	b.n	800a920 <_printf_i+0x118>
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	47c0      	blx	r8
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d0aa      	beq.n	800a934 <_printf_i+0x12c>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	079b      	lsls	r3, r3, #30
 800a9e2:	d413      	bmi.n	800aa0c <_printf_i+0x204>
 800a9e4:	68e0      	ldr	r0, [r4, #12]
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	4298      	cmp	r0, r3
 800a9ea:	bfb8      	it	lt
 800a9ec:	4618      	movlt	r0, r3
 800a9ee:	e7a3      	b.n	800a938 <_printf_i+0x130>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	464a      	mov	r2, r9
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	47c0      	blx	r8
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d09a      	beq.n	800a934 <_printf_i+0x12c>
 800a9fe:	3501      	adds	r5, #1
 800aa00:	68e3      	ldr	r3, [r4, #12]
 800aa02:	9a03      	ldr	r2, [sp, #12]
 800aa04:	1a9b      	subs	r3, r3, r2
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	dcf2      	bgt.n	800a9f0 <_printf_i+0x1e8>
 800aa0a:	e7eb      	b.n	800a9e4 <_printf_i+0x1dc>
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	f104 0919 	add.w	r9, r4, #25
 800aa12:	e7f5      	b.n	800aa00 <_printf_i+0x1f8>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1ac      	bne.n	800a972 <_printf_i+0x16a>
 800aa18:	7803      	ldrb	r3, [r0, #0]
 800aa1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa22:	e76c      	b.n	800a8fe <_printf_i+0xf6>
 800aa24:	0800abda 	.word	0x0800abda
 800aa28:	0800abeb 	.word	0x0800abeb

0800aa2c <memcpy>:
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	1e43      	subs	r3, r0, #1
 800aa30:	440a      	add	r2, r1
 800aa32:	4291      	cmp	r1, r2
 800aa34:	d100      	bne.n	800aa38 <memcpy+0xc>
 800aa36:	bd10      	pop	{r4, pc}
 800aa38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa40:	e7f7      	b.n	800aa32 <memcpy+0x6>

0800aa42 <memmove>:
 800aa42:	4288      	cmp	r0, r1
 800aa44:	b510      	push	{r4, lr}
 800aa46:	eb01 0302 	add.w	r3, r1, r2
 800aa4a:	d807      	bhi.n	800aa5c <memmove+0x1a>
 800aa4c:	1e42      	subs	r2, r0, #1
 800aa4e:	4299      	cmp	r1, r3
 800aa50:	d00a      	beq.n	800aa68 <memmove+0x26>
 800aa52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa56:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa5a:	e7f8      	b.n	800aa4e <memmove+0xc>
 800aa5c:	4283      	cmp	r3, r0
 800aa5e:	d9f5      	bls.n	800aa4c <memmove+0xa>
 800aa60:	1881      	adds	r1, r0, r2
 800aa62:	1ad2      	subs	r2, r2, r3
 800aa64:	42d3      	cmn	r3, r2
 800aa66:	d100      	bne.n	800aa6a <memmove+0x28>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa72:	e7f7      	b.n	800aa64 <memmove+0x22>

0800aa74 <_realloc_r>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	4607      	mov	r7, r0
 800aa78:	4614      	mov	r4, r2
 800aa7a:	460e      	mov	r6, r1
 800aa7c:	b921      	cbnz	r1, 800aa88 <_realloc_r+0x14>
 800aa7e:	4611      	mov	r1, r2
 800aa80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa84:	f7ff bb92 	b.w	800a1ac <_malloc_r>
 800aa88:	b922      	cbnz	r2, 800aa94 <_realloc_r+0x20>
 800aa8a:	f7ff fb41 	bl	800a110 <_free_r>
 800aa8e:	4625      	mov	r5, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa94:	f000 f814 	bl	800aac0 <_malloc_usable_size_r>
 800aa98:	42a0      	cmp	r0, r4
 800aa9a:	d20f      	bcs.n	800aabc <_realloc_r+0x48>
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff fb84 	bl	800a1ac <_malloc_r>
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0f2      	beq.n	800aa90 <_realloc_r+0x1c>
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4622      	mov	r2, r4
 800aaae:	f7ff ffbd 	bl	800aa2c <memcpy>
 800aab2:	4631      	mov	r1, r6
 800aab4:	4638      	mov	r0, r7
 800aab6:	f7ff fb2b 	bl	800a110 <_free_r>
 800aaba:	e7e9      	b.n	800aa90 <_realloc_r+0x1c>
 800aabc:	4635      	mov	r5, r6
 800aabe:	e7e7      	b.n	800aa90 <_realloc_r+0x1c>

0800aac0 <_malloc_usable_size_r>:
 800aac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac4:	1f18      	subs	r0, r3, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bfbc      	itt	lt
 800aaca:	580b      	ldrlt	r3, [r1, r0]
 800aacc:	18c0      	addlt	r0, r0, r3
 800aace:	4770      	bx	lr

0800aad0 <_gettimeofday>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <_gettimeofday+0xc>)
 800aad2:	2258      	movs	r2, #88	; 0x58
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	4770      	bx	lr
 800aadc:	200009e4 	.word	0x200009e4

0800aae0 <_init>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	bf00      	nop
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr

0800aaec <_fini>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	bf00      	nop
 800aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf2:	bc08      	pop	{r3}
 800aaf4:	469e      	mov	lr, r3
 800aaf6:	4770      	bx	lr
